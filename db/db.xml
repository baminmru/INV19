<?xml version="1.0"?>
<root>
  <ModuleHolder ModuleName="--Tables" File="">
    <BlockHolder BlockName="--body" BlockCode=" 
/* TYPE=invg (Группы) */
GO
/*Группа*/
if not exists (select * from sysobjects where id = object_id(N'invg_grp') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invg_grp/**/ (
invg_grpid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invg_grp'))
alter table invg_grp add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invg_grp
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invg_grp')
and name not in('invg_grpID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invg_grp drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invg_grp') and xtype='PK' and type='K')
ALTER TABLE invg_grp DROP CONSTRAINT pk_invg_grp
GO
alter table invg_grp add constraint pk_invg_grp primary key (invg_grpID)

GO
/*Подгруппа*/
if not exists (select * from sysobjects where id = object_id(N'invg_subgrp') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invg_subgrp/**/ (
invg_subgrpid uniqueidentifier not null rowguidcol default ( newid())  
,invg_grpID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invg_subgrp'))
alter table invg_subgrp add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invg_subgrp
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invg_subgrp')
and name not in('invg_subgrpID','invg_grpID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invg_subgrp drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invg_subgrp') and xtype='PK' and type='K')
ALTER TABLE invg_subgrp DROP CONSTRAINT pk_invg_subgrp
GO
alter table invg_subgrp add constraint pk_invg_subgrp primary key (invg_subgrpID)

GO
/* TYPE=invm (Движение) */
GO
/*Движение*/
if not exists (select * from sysobjects where id = object_id(N'invm_info') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invm_info/**/ (
invm_infoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='fromcell' and id=object_id(N'invm_info'))
alter table invm_info add 
fromcell
 UNIQUEIDENTIFIER null /* Из ячейки */
go
if  not exists(select * from syscolumns where name='toCell' and id=object_id(N'invm_info'))
alter table invm_info add 
toCell
 UNIQUEIDENTIFIER null /* В ячейку */
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'invm_info'))
alter table invm_info add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'invm_info'))
alter table invm_info add 
Qty
 float null /* Количество */
go
if  not exists(select * from syscolumns where name='optime' and id=object_id(N'invm_info'))
alter table invm_info add 
optime
 DATETIME null /* Время операции */
go
go
-- drop extra columns from generated table: invm_info
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invm_info')
and name not in('invm_infoID','fromcell','toCell','storepartid','Qty','optime')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invm_info drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invm_info') and xtype='PK' and type='K')
ALTER TABLE invm_info DROP CONSTRAINT pk_invm_info
GO
alter table invm_info add constraint pk_invm_info primary key (invm_infoID)

GO
/* TYPE=invw (Заполнение склада) */
GO
/*Заполнение*/
if not exists (select * from sysobjects where id = object_id(N'invw_info') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invw_info/**/ (
invw_infoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='locationid' and id=object_id(N'invw_info'))
alter table invw_info add 
locationid
 UNIQUEIDENTIFIER null /* Стеллаж */
go
if  not exists(select * from syscolumns where name='cellid' and id=object_id(N'invw_info'))
alter table invw_info add 
cellid
 UNIQUEIDENTIFIER null /* Ячейка */
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'invw_info'))
alter table invw_info add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'invw_info'))
alter table invw_info add 
Qty
 float null /* Количество */
go
go
-- drop extra columns from generated table: invw_info
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invw_info')
and name not in('invw_infoID','locationid','cellid','storepartid','Qty')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invw_info drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invw_info') and xtype='PK' and type='K')
ALTER TABLE invw_info DROP CONSTRAINT pk_invw_info
GO
alter table invw_info add constraint pk_invw_info primary key (invw_infoID)

GO
/* TYPE=invi (Запчасть) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'invp_data') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invp_data/**/ (
invp_dataid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invp_data'))
alter table invp_data add 
name
 VARCHAR (120) null /* Название */
go
if  not exists(select * from syscolumns where name='RFID' and id=object_id(N'invp_data'))
alter table invp_data add 
RFID
 VARCHAR (128) null /* Метка RFID */
go
if  not exists(select * from syscolumns where name='groupid' and id=object_id(N'invp_data'))
alter table invp_data add 
groupid
 UNIQUEIDENTIFIER null /* Группа */
go
if  not exists(select * from syscolumns where name='subgroupid' and id=object_id(N'invp_data'))
alter table invp_data add 
subgroupid
 UNIQUEIDENTIFIER null /* Подгруппа */
go
if  not exists(select * from syscolumns where name='departmentid' and id=object_id(N'invp_data'))
alter table invp_data add 
departmentid
 UNIQUEIDENTIFIER null /* Отдел */
go
if  not exists(select * from syscolumns where name='machineid' and id=object_id(N'invp_data'))
alter table invp_data add 
machineid
 UNIQUEIDENTIFIER null /* Машина */
go
go
-- drop extra columns from generated table: invp_data
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invp_data')
and name not in('invp_dataID','name','RFID','groupid','subgroupid','departmentid','machineid')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invp_data drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invp_data') and xtype='PK' and type='K')
ALTER TABLE invp_data DROP CONSTRAINT pk_invp_data
GO
alter table invp_data add constraint pk_invp_data primary key (invp_dataID)

GO
/* TYPE=inva (Инвентраизация) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'inva_info') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_info/**/ (
inva_infoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='invDate' and id=object_id(N'inva_info'))
alter table inva_info add 
invDate
 DATETIME null /* Дата инвентаризации */
go
if  not exists(select * from syscolumns where name='invReason' and id=object_id(N'inva_info'))
alter table inva_info add 
invReason
 TEXT null /* Причина инвентаризации */
go
if  not exists(select * from syscolumns where name='isFinished' and id=object_id(N'inva_info'))
alter table inva_info add 
isFinished
 integer null 
 check (isFinished in ( 1/* Да */
, 0/* Нет */ )) /* Инвентаризация завершена */
go
go
-- drop extra columns from generated table: inva_info
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_info')
and name not in('inva_infoID','invDate','invReason','isFinished')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_info drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_info') and xtype='PK' and type='K')
ALTER TABLE inva_info DROP CONSTRAINT pk_inva_info
GO
alter table inva_info add constraint pk_inva_info primary key (inva_infoID)

GO
/*Наличие*/
if not exists (select * from sysobjects where id = object_id(N'inva_real') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_real/**/ (
inva_realid uniqueidentifier not null rowguidcol default ( newid())  
,inva_infoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'inva_real'))
alter table inva_real add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'inva_real'))
alter table inva_real add 
Qty
 float null /* Количество */
go
if  not exists(select * from syscolumns where name='locationid' and id=object_id(N'inva_real'))
alter table inva_real add 
locationid
 UNIQUEIDENTIFIER null /* Стеллаж */
go
if  not exists(select * from syscolumns where name='cellid' and id=object_id(N'inva_real'))
alter table inva_real add 
cellid
 UNIQUEIDENTIFIER null /* Ячейка */
go
go
-- drop extra columns from generated table: inva_real
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_real')
and name not in('inva_realID','inva_infoID','storepartid','Qty','locationid','cellid')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_real drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_real') and xtype='PK' and type='K')
ALTER TABLE inva_real DROP CONSTRAINT pk_inva_real
GO
alter table inva_real add constraint pk_inva_real primary key (inva_realID)

GO
/*Недостача*/
if not exists (select * from sysobjects where id = object_id(N'inva_absnt') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_absnt/**/ (
inva_absntid uniqueidentifier not null rowguidcol default ( newid())  
,inva_infoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'inva_absnt'))
alter table inva_absnt add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'inva_absnt'))
alter table inva_absnt add 
Qty
 float null /* Количество */
go
go
-- drop extra columns from generated table: inva_absnt
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_absnt')
and name not in('inva_absntID','inva_infoID','storepartid','Qty')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_absnt drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_absnt') and xtype='PK' and type='K')
ALTER TABLE inva_absnt DROP CONSTRAINT pk_inva_absnt
GO
alter table inva_absnt add constraint pk_inva_absnt primary key (inva_absntID)

GO
/*Излишки*/
if not exists (select * from sysobjects where id = object_id(N'inva_extra') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_extra/**/ (
inva_extraid uniqueidentifier not null rowguidcol default ( newid())  
,inva_infoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'inva_extra'))
alter table inva_extra add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'inva_extra'))
alter table inva_extra add 
Qty
 float null /* Количество */
go
if  not exists(select * from syscolumns where name='locationid' and id=object_id(N'inva_extra'))
alter table inva_extra add 
locationid
 UNIQUEIDENTIFIER null /* Стеллаж */
go
if  not exists(select * from syscolumns where name='cellid' and id=object_id(N'inva_extra'))
alter table inva_extra add 
cellid
 UNIQUEIDENTIFIER null /* Ячейка */
go
go
-- drop extra columns from generated table: inva_extra
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_extra')
and name not in('inva_extraID','inva_infoID','storepartid','Qty','locationid','cellid')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_extra drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_extra') and xtype='PK' and type='K')
ALTER TABLE inva_extra DROP CONSTRAINT pk_inva_extra
GO
alter table inva_extra add constraint pk_inva_extra primary key (inva_extraID)

GO
/* TYPE=bpdi (Интерфейс) */
GO
/*Модуль*/
if not exists (select * from sysobjects where id = object_id(N'iu_int_modules') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table iu_int_modules/**/ (
iu_int_modulesid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Sequence' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
Sequence
 integer null /* № п/п */
go
if  not exists(select * from syscolumns where name='TheIcon' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
TheIcon
 VARCHAR (64) null /* Иконка */
go
if  not exists(select * from syscolumns where name='GroupName' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
GroupName
 VARCHAR (60) null /* Меню верхнего урровня */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
name
 VARCHAR (255) null /* Название меню */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
Caption
 VARCHAR (80) null /* Надпись */
go
if  not exists(select * from syscolumns where name='visibleControl' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
visibleControl
 INTEGER null 
 check (visibleControl in ( -1/* Да */
, 0/* Нет */ )) /* Управление видимостью */
go
if  not exists(select * from syscolumns where name='controldocmode' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
controldocmode
 VARCHAR (10) null /* Документы на контроле */
go
if  not exists(select * from syscolumns where name='otherdocmode' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
otherdocmode
 VARCHAR (10) null /* Чужие документы */
go
if  not exists(select * from syscolumns where name='mydocmode' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
mydocmode
 VARCHAR (10) null /* Мои документы */
go
if  not exists(select * from syscolumns where name='AllObjects' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
AllObjects
 INTEGER null 
 check (AllObjects in ( -1/* Да */
, 0/* Нет */ )) /* Вся фирма */
go
if  not exists(select * from syscolumns where name='ColegsObject' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
ColegsObject
 INTEGER null 
 check (ColegsObject in ( -1/* Да */
, 0/* Нет */ )) /* Объекты коллег */
go
if  not exists(select * from syscolumns where name='SubStructObjects' and id=object_id(N'iu_int_modules'))
alter table iu_int_modules add 
SubStructObjects
 INTEGER null 
 check (SubStructObjects in ( -1/* Да */
, 0/* Нет */ )) /* Подчиненные подразделения */
go
go
-- drop extra columns from generated table: iu_int_modules
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('iu_int_modules')
and name not in('iu_int_modulesID','Sequence','TheIcon','GroupName','name','Caption','visibleControl','controldocmode','otherdocmode','mydocmode','AllObjects','ColegsObject','SubStructObjects')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table iu_int_modules drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_iu_int_modules') and xtype='PK' and type='K')
ALTER TABLE iu_int_modules DROP CONSTRAINT pk_iu_int_modules
GO
alter table iu_int_modules add constraint pk_iu_int_modules primary key (iu_int_modulesID)

GO
/* TYPE=bpc (Клиент) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'bpc_info') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table bpc_info/*Описание клиента*/ (
bpc_infoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'bpc_info'))
alter table bpc_info add 
Name
 VARCHAR (255) null /* Название */
go
go
-- drop extra columns from generated table: bpc_info
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('bpc_info')
and name not in('bpc_infoID','Name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table bpc_info drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_bpc_info') and xtype='PK' and type='K')
ALTER TABLE bpc_info DROP CONSTRAINT pk_bpc_info
GO
alter table bpc_info add constraint pk_bpc_info primary key (bpc_infoID)

GO
/* TYPE=bprcfg (Настройка роли) */
GO
/*Модуль*/
if not exists (select * from sysobjects where id = object_id(N'iu_rcfg_mod') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table iu_rcfg_mod/**/ (
iu_rcfg_modid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Sequence' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
Sequence
 integer null /* № п/п */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
Caption
 VARCHAR (80) null /* Надпись */
go
if  not exists(select * from syscolumns where name='ModuleAccessible' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
ModuleAccessible
 INTEGER null 
 check (ModuleAccessible in ( -1/* Да */
, 0/* Нет */ )) /* Разрешен */
go
if  not exists(select * from syscolumns where name='TheIcon' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
TheIcon
 VARCHAR (64) null /* Иконка */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
name
 VARCHAR (255) null /* Название меню */
go
if  not exists(select * from syscolumns where name='GroupName' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
GroupName
 VARCHAR (60) null /* Меню верхнего урровня */
go
if  not exists(select * from syscolumns where name='AllObjects' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
AllObjects
 INTEGER null 
 check (AllObjects in ( -1/* Да */
, 0/* Нет */ )) /* Вся фирма */
go
if  not exists(select * from syscolumns where name='ColegsObject' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
ColegsObject
 INTEGER null 
 check (ColegsObject in ( -1/* Да */
, 0/* Нет */ )) /* Объекты коллег */
go
if  not exists(select * from syscolumns where name='SubStructObjects' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
SubStructObjects
 INTEGER null 
 check (SubStructObjects in ( -1/* Да */
, 0/* Нет */ )) /* Подчиненные подразделения */
go
if  not exists(select * from syscolumns where name='mydocmode' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
mydocmode
 VARCHAR (10) null /* Мои документы */
go
if  not exists(select * from syscolumns where name='otherdocmode' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
otherdocmode
 VARCHAR (10) null /* Чужие документы */
go
if  not exists(select * from syscolumns where name='controldocmode' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
controldocmode
 VARCHAR (10) null /* Документы на контроле */
go
if  not exists(select * from syscolumns where name='visibleControl' and id=object_id(N'iu_rcfg_mod'))
alter table iu_rcfg_mod add 
visibleControl
 INTEGER null 
 check (visibleControl in ( -1/* Да */
, 0/* Нет */ )) /* Управление видимостью */
go
go
-- drop extra columns from generated table: iu_rcfg_mod
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('iu_rcfg_mod')
and name not in('iu_rcfg_modID','Sequence','Caption','ModuleAccessible','TheIcon','name','GroupName','AllObjects','ColegsObject','SubStructObjects','mydocmode','otherdocmode','controldocmode','visibleControl')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table iu_rcfg_mod drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_iu_rcfg_mod') and xtype='PK' and type='K')
ALTER TABLE iu_rcfg_mod DROP CONSTRAINT pk_iu_rcfg_mod
GO
alter table iu_rcfg_mod add constraint pk_iu_rcfg_mod primary key (iu_rcfg_modID)

GO
/*Режим документа*/
if not exists (select * from sysobjects where id = object_id(N'iu_rcfg_docmode') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table iu_rcfg_docmode/*какую карточку документа открывать*/ (
iu_rcfg_docmodeid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='The_Document' and id=object_id(N'iu_rcfg_docmode'))
alter table iu_rcfg_docmode add 
The_Document
 UNIQUEIDENTIFIER null /* Тип документа */
go
if  not exists(select * from syscolumns where name='AddMode' and id=object_id(N'iu_rcfg_docmode'))
alter table iu_rcfg_docmode add 
AddMode
 VARCHAR (4) null /* Режим для  создания */
go
if  not exists(select * from syscolumns where name='EditMode' and id=object_id(N'iu_rcfg_docmode'))
alter table iu_rcfg_docmode add 
EditMode
 VARCHAR (4) null /* Режим для редактирования */
go
if  not exists(select * from syscolumns where name='AllowAdd' and id=object_id(N'iu_rcfg_docmode'))
alter table iu_rcfg_docmode add 
AllowAdd
 INTEGER null 
 check (AllowAdd in ( -1/* Да */
, 0/* Нет */ )) /* Можно создавать */
go
if  not exists(select * from syscolumns where name='AllowDelete' and id=object_id(N'iu_rcfg_docmode'))
alter table iu_rcfg_docmode add 
AllowDelete
 INTEGER null 
 check (AllowDelete in ( -1/* Да */
, 0/* Нет */ )) /* Можно удалять */
go
go
-- drop extra columns from generated table: iu_rcfg_docmode
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('iu_rcfg_docmode')
and name not in('iu_rcfg_docmodeID','The_Document','AddMode','EditMode','AllowAdd','AllowDelete')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table iu_rcfg_docmode drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_iu_rcfg_docmode') and xtype='PK' and type='K')
ALTER TABLE iu_rcfg_docmode DROP CONSTRAINT pk_iu_rcfg_docmode
GO
alter table iu_rcfg_docmode add constraint pk_iu_rcfg_docmode primary key (iu_rcfg_docmodeID)

GO
/*Роль*/
if not exists (select * from sysobjects where id = object_id(N'iu_rcfg_def') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table iu_rcfg_def/*Роль для настройки*/ (
iu_rcfg_defid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='therole' and id=object_id(N'iu_rcfg_def'))
alter table iu_rcfg_def add 
therole
 UNIQUEIDENTIFIER null /* Роль */
go
go
-- drop extra columns from generated table: iu_rcfg_def
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('iu_rcfg_def')
and name not in('iu_rcfg_defID','therole')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table iu_rcfg_def drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_iu_rcfg_def') and xtype='PK' and type='K')
ALTER TABLE iu_rcfg_def DROP CONSTRAINT pk_iu_rcfg_def
GO
alter table iu_rcfg_def add constraint pk_iu_rcfg_def primary key (iu_rcfg_defID)

GO
/* TYPE=STDNumerator (Нумератор) */
GO
/*Зоны*/
if not exists (select * from sysobjects where id = object_id(N'Num_zones') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Num_zones/*Зоны уникальных нумеров*/ (
Num_zonesid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ZoneMask' and id=object_id(N'Num_zones'))
alter table Num_zones add 
ZoneMask
 VARCHAR (255) null /* Маска зоны */
go
go
-- drop extra columns from generated table: Num_zones
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Num_zones')
and name not in('Num_zonesID','ZoneMask')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Num_zones drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Num_zones') and xtype='PK' and type='K')
ALTER TABLE Num_zones DROP CONSTRAINT pk_Num_zones
GO
alter table Num_zones add constraint pk_Num_zones primary key (Num_zonesID)

GO
/*Номера*/
if not exists (select * from sysobjects where id = object_id(N'Num_Values') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Num_Values/*уникальные номера*/ (
Num_zonesID uniqueidentifier not null,
Num_Valuesid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='the_Value' and id=object_id(N'Num_Values'))
alter table Num_Values add 
the_Value
 integer null /* Значение */
go
if  not exists(select * from syscolumns where name='OwnerPartName' and id=object_id(N'Num_Values'))
alter table Num_Values add 
OwnerPartName
 VARCHAR (64) null /* Раздел */
go
if  not exists(select * from syscolumns where name='OwnerRowID' and id=object_id(N'Num_Values'))
alter table Num_Values add 
OwnerRowID
 uniqueidentifier null /* Идентификатор строки */
go
go
-- drop extra columns from generated table: Num_Values
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Num_Values')
and name not in('Num_zonesID','Num_ValuesID','the_Value','OwnerPartName','OwnerRowID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Num_Values drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Num_Values') and xtype='PK' and type='K')
ALTER TABLE Num_Values DROP CONSTRAINT pk_Num_Values
GO
alter table Num_Values add constraint pk_Num_Values primary key (Num_ValuesID)

GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'Num_head') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Num_head/*Описание нумератора*/ (
Num_headid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Num_head'))
alter table Num_head add 
Name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='Shema' and id=object_id(N'Num_head'))
alter table Num_head add 
Shema
 INTEGER null 
 check (Shema in ( 2/* По кварталу */
, 3/* По месяцу */
, 0/* Единая зона */
, 4/* По дню */
, 1/* По году */
, 10/* Произвольные зоны */ )) /* Схема нумерации */
go
go
-- drop extra columns from generated table: Num_head
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Num_head')
and name not in('Num_headID','Name','Shema')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Num_head drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Num_head') and xtype='PK' and type='K')
ALTER TABLE Num_head DROP CONSTRAINT pk_Num_head
GO
alter table Num_head add constraint pk_Num_head primary key (Num_headID)

GO
/* TYPE=MTZwp (Описание АРМ) */
GO
/*Поведение журналов*/
if not exists (select * from sysobjects where id = object_id(N'ARMJournal') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJournal/*Описание действий журанлов*/ (
ARMJournalid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheJournal' and id=object_id(N'ARMJournal'))
alter table ARMJournal add 
TheJournal
 UNIQUEIDENTIFIER null /* Журнал */
go
go
-- drop extra columns from generated table: ARMJournal
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJournal')
and name not in('ARMJournalID','TheJournal')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJournal drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJournal') and xtype='PK' and type='K')
ALTER TABLE ARMJournal DROP CONSTRAINT pk_ARMJournal
GO
alter table ARMJournal add constraint pk_ARMJournal primary key (ARMJournalID)

GO
/*Отчеты*/
if not exists (select * from sysobjects where id = object_id(N'ARMJRNLREP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJRNLREP/*Отчеты из журнала*/ (
ARMJournalID uniqueidentifier not null,
ARMJRNLREPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='repname' and id=object_id(N'ARMJRNLREP'))
alter table ARMJRNLREP add 
repname
 VARCHAR (255) null /* Название отчета */
go
if  not exists(select * from syscolumns where name='TheReport' and id=object_id(N'ARMJRNLREP'))
alter table ARMJRNLREP add 
TheReport
 UNIQUEIDENTIFIER null /* Отчет */
go
go
-- drop extra columns from generated table: ARMJRNLREP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJRNLREP')
and name not in('ARMJournalID','ARMJRNLREPID','repname','TheReport')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJRNLREP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJRNLREP') and xtype='PK' and type='K')
ALTER TABLE ARMJRNLREP DROP CONSTRAINT pk_ARMJRNLREP
GO
alter table ARMJRNLREP add constraint pk_ARMJRNLREP primary key (ARMJRNLREPID)

GO
/*Действия*/
if not exists (select * from sysobjects where id = object_id(N'ARMJRNLRUN') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJRNLRUN/*Дополнительные действия в журнале*/ (
ARMJournalID uniqueidentifier not null,
ARMJRNLRUNid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ARMJRNLRUN'))
alter table ARMJRNLRUN add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TheExtention' and id=object_id(N'ARMJRNLRUN'))
alter table ARMJRNLRUN add 
TheExtention
 UNIQUEIDENTIFIER null /* Расширение */
go
go
-- drop extra columns from generated table: ARMJRNLRUN
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJRNLRUN')
and name not in('ARMJournalID','ARMJRNLRUNID','Name','TheExtention')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJRNLRUN drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJRNLRUN') and xtype='PK' and type='K')
ALTER TABLE ARMJRNLRUN DROP CONSTRAINT pk_ARMJRNLRUN
GO
alter table ARMJRNLRUN add constraint pk_ARMJRNLRUN primary key (ARMJRNLRUNID)

GO
/*Добавление*/
if not exists (select * from sysobjects where id = object_id(N'ARMJRNLADD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMJRNLADD/*Варианты обработки добавления*/ (
ARMJournalID uniqueidentifier not null,
ARMJRNLADDid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ARMJRNLADD'))
alter table ARMJRNLADD add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TheExtention' and id=object_id(N'ARMJRNLADD'))
alter table ARMJRNLADD add 
TheExtention
 UNIQUEIDENTIFIER null /* Расширение */
go
go
-- drop extra columns from generated table: ARMJRNLADD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMJRNLADD')
and name not in('ARMJournalID','ARMJRNLADDID','Name','TheExtention')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMJRNLADD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMJRNLADD') and xtype='PK' and type='K')
ALTER TABLE ARMJRNLADD DROP CONSTRAINT pk_ARMJRNLADD
GO
alter table ARMJRNLADD add constraint pk_ARMJRNLADD primary key (ARMJRNLADDID)

GO
/*Меню*/
if not exists (select * from sysobjects where id = object_id(N'EntryPoints') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table EntryPoints/*Меню*/ (
EntryPointsid uniqueidentifier not null rowguidcol default ( newid())  
,ParentRowid uniqueidentifier 
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Name
 VARCHAR (38) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='AsToolbarItem' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AsToolbarItem
 INTEGER null 
 check (AsToolbarItem in ( -1/* Да */
, 0/* Нет */ )) /* Включить в тулбар */
go
if  not exists(select * from syscolumns where name='ActionType' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
ActionType
 INTEGER null 
 check (ActionType in ( 4/* Запустить АРМ */
, 2/* Выполнить метод */
, 5/* Открыть отчет */
, 0/* Ничего не делать */
, 1/* Открыть документ */
, 3/* Открыть журнал */ )) /* Вариант действия */
go
if  not exists(select * from syscolumns where name='TheFilter' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
TheFilter
 UNIQUEIDENTIFIER null /* Фильтр */
go
if  not exists(select * from syscolumns where name='Journal' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Journal
 UNIQUEIDENTIFIER null /* Журнал */
go
if  not exists(select * from syscolumns where name='Report' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Report
 UNIQUEIDENTIFIER null /* Отчет */
go
if  not exists(select * from syscolumns where name='Document' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Document
 UNIQUEIDENTIFIER null /* Документ */
go
if  not exists(select * from syscolumns where name='Method' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
Method
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IconFile' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
IconFile
 VARCHAR (2000) null /* Файл картинки */
go
if  not exists(select * from syscolumns where name='TheExtention' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
TheExtention
 UNIQUEIDENTIFIER null /* Расширение */
go
if  not exists(select * from syscolumns where name='ARM' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
ARM
 UNIQUEIDENTIFIER null /* АРМ */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
TheComment
 TEXT null /* Примечание */
go
if  not exists(select * from syscolumns where name='ObjectType' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
ObjectType
 UNIQUEIDENTIFIER null /* Тип документа */
go
if  not exists(select * from syscolumns where name='JournalFixedQuery' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
JournalFixedQuery
 TEXT null /* Ограничения к журналу */
go
if  not exists(select * from syscolumns where name='AllowAdd' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowAdd
 INTEGER null 
 check (AllowAdd in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено добавление */
go
if  not exists(select * from syscolumns where name='AllowEdit' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowEdit
 INTEGER null 
 check (AllowEdit in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено редактирование */
go
if  not exists(select * from syscolumns where name='AllowDel' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowDel
 INTEGER null 
 check (AllowDel in ( -1/* Да */
, 0/* Нет */ )) /* Рарешено удаление */
go
if  not exists(select * from syscolumns where name='AllowFilter' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowFilter
 INTEGER null 
 check (AllowFilter in ( -1/* Да */
, 0/* Нет */ )) /* Разрешен фильтр */
go
if  not exists(select * from syscolumns where name='AllowPrint' and id=object_id(N'EntryPoints'))
alter table EntryPoints add 
AllowPrint
 INTEGER null 
 check (AllowPrint in ( -1/* Да */
, 0/* Нет */ )) /* Разрешена печать */
go
go
-- drop extra columns from generated table: EntryPoints
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('EntryPoints')
and name not in('EntryPointsID','ParentRowid','sequence','Name','Caption','AsToolbarItem','ActionType','TheFilter','Journal','Report','Document','Method','IconFile','TheExtention','ARM','TheComment','ObjectType','JournalFixedQuery','AllowAdd','AllowEdit','AllowDel','AllowFilter','AllowPrint')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table EntryPoints drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_EntryPoints') and xtype='PK' and type='K')
ALTER TABLE EntryPoints DROP CONSTRAINT pk_EntryPoints
GO
alter table EntryPoints add constraint pk_EntryPoints primary key (EntryPointsID)

GO
/*Привязка фильтра*/
if not exists (select * from sysobjects where id = object_id(N'EPFilterLink') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table EPFilterLink/*Привязка фильтра к журналу*/ (
EntryPointsID uniqueidentifier not null,
EPFilterLinkid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='RowSource' and id=object_id(N'EPFilterLink'))
alter table EPFilterLink add 
RowSource
 VARCHAR (255) null /* Источник */
go
if  not exists(select * from syscolumns where name='TheExpression' and id=object_id(N'EPFilterLink'))
alter table EPFilterLink add 
TheExpression
 TEXT null /* Выражение */
go
if  not exists(select * from syscolumns where name='FilterField' and id=object_id(N'EPFilterLink'))
alter table EPFilterLink add 
FilterField
 VARCHAR (255) null /* Поле фильтра */
go
go
-- drop extra columns from generated table: EPFilterLink
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('EPFilterLink')
and name not in('EntryPointsID','EPFilterLinkID','RowSource','TheExpression','FilterField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table EPFilterLink drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_EPFilterLink') and xtype='PK' and type='K')
ALTER TABLE EPFilterLink DROP CONSTRAINT pk_EPFilterLink
GO
alter table EPFilterLink add constraint pk_EPFilterLink primary key (EPFilterLinkID)

GO
/*Арм*/
if not exists (select * from sysobjects where id = object_id(N'WorkPlace') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table WorkPlace/*Арм*/ (
WorkPlaceid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='TheVersion' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
TheVersion
 VARCHAR (30) null /* Версия */
go
if  not exists(select * from syscolumns where name='ThePlatform' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
ThePlatform
 INTEGER null 
 check (ThePlatform in ( 3/* OTHER */
, 1/* DOTNET */
, 2/* JAVA */
, 0/* VB6 */ )) /* Платформа реализации */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'WorkPlace'))
alter table WorkPlace add 
TheComment
 TEXT null /* Примечание */
go
go
-- drop extra columns from generated table: WorkPlace
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('WorkPlace')
and name not in('WorkPlaceID','Name','Caption','TheVersion','ThePlatform','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table WorkPlace drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_WorkPlace') and xtype='PK' and type='K')
ALTER TABLE WorkPlace DROP CONSTRAINT pk_WorkPlace
GO
alter table WorkPlace add constraint pk_WorkPlace primary key (WorkPlaceID)

GO
/*Список типов*/
if not exists (select * from sysobjects where id = object_id(N'ARMTypes') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ARMTypes/*Типы документов, которые подключаются в MDI режиме*/ (
ARMTypesid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheDocumentType' and id=object_id(N'ARMTypes'))
alter table ARMTypes add 
TheDocumentType
 UNIQUEIDENTIFIER null /* Тип документа */
go
go
-- drop extra columns from generated table: ARMTypes
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ARMTypes')
and name not in('ARMTypesID','TheDocumentType')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ARMTypes drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ARMTypes') and xtype='PK' and type='K')
ALTER TABLE ARMTypes DROP CONSTRAINT pk_ARMTypes
GO
alter table ARMTypes add constraint pk_ARMTypes primary key (ARMTypesID)

GO
/* TYPE=MTZJrnl (Описание журнала) */
GO
/*Колонки журнала*/
if not exists (select * from sysobjects where id = object_id(N'JournalColumn') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table JournalColumn/*Колонки журнала*/ (
JournalColumnid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='ColumnAlignment' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
ColumnAlignment
 integer null 
 check (ColumnAlignment in ( 6/* Right Top */
, 7/* Right Center */
, 8/* Right Bottom */
, 3/* Center Top */
, 0/* Left Top */
, 4/* Center Center */
, 1/* Left Center */
, 5/* Center Bottom */
, 2/* Left Bottom */ )) /* Выравнивание */
go
if  not exists(select * from syscolumns where name='ColSort' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
ColSort
 INTEGER null 
 check (ColSort in ( 0/* As String */
, 1/* As Numeric */
, 2/* As Date */ )) /* Сортировка колонки */
go
if  not exists(select * from syscolumns where name='GroupAggregation' and id=object_id(N'JournalColumn'))
alter table JournalColumn add 
GroupAggregation
 INTEGER null 
 check (GroupAggregation in ( 3/* SUM */
, 1/* AVG */
, 6/* CUSTOM */
, 0/* none */
, 2/* COUNT */
, 5/* MAX */
, 4/* MIN */ )) /* Аггрегация при группировке */
go
go
-- drop extra columns from generated table: JournalColumn
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('JournalColumn')
and name not in('JournalColumnID','sequence','name','ColumnAlignment','ColSort','GroupAggregation')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table JournalColumn drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_JournalColumn') and xtype='PK' and type='K')
ALTER TABLE JournalColumn DROP CONSTRAINT pk_JournalColumn
GO
alter table JournalColumn add constraint pk_JournalColumn primary key (JournalColumnID)

GO
/*Состав колонки*/
if not exists (select * from sysobjects where id = object_id(N'JColumnSource') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table JColumnSource/*Состав колонки*/ (
JournalColumnID uniqueidentifier not null,
JColumnSourceid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='SrcPartView' and id=object_id(N'JColumnSource'))
alter table JColumnSource add 
SrcPartView
 UNIQUEIDENTIFIER null /* Представление */
go
if  not exists(select * from syscolumns where name='ViewField' and id=object_id(N'JColumnSource'))
alter table JColumnSource add 
ViewField
 VARCHAR (255) null /* Поле представления */
go
go
-- drop extra columns from generated table: JColumnSource
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('JColumnSource')
and name not in('JournalColumnID','JColumnSourceID','SrcPartView','ViewField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table JColumnSource drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_JColumnSource') and xtype='PK' and type='K')
ALTER TABLE JColumnSource DROP CONSTRAINT pk_JColumnSource
GO
alter table JColumnSource add constraint pk_JColumnSource primary key (JColumnSourceID)

GO
/*Источники журнала*/
if not exists (select * from sysobjects where id = object_id(N'JournalSrc') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table JournalSrc/*Источники журнала*/ (
JournalSrcid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='spartview' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
spartview
 VARCHAR (38) null /* Представление */
go
if  not exists(select * from syscolumns where name='OnRun' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
OnRun
 INTEGER null 
 check (OnRun in ( 2/* Открыть документ */
, 0/* Ничего не делать */
, 1/* Открыть строку */ )) /* При открытии */
go
if  not exists(select * from syscolumns where name='OpenMode' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
OpenMode
 VARCHAR (64) null /* Режим открытия */
go
if  not exists(select * from syscolumns where name='ViewAlias' and id=object_id(N'JournalSrc'))
alter table JournalSrc add 
ViewAlias
 VARCHAR (255) null /* Псевдоним представления */
go
go
-- drop extra columns from generated table: JournalSrc
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('JournalSrc')
and name not in('JournalSrcID','spartview','OnRun','OpenMode','ViewAlias')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table JournalSrc drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_JournalSrc') and xtype='PK' and type='K')
ALTER TABLE JournalSrc DROP CONSTRAINT pk_JournalSrc
GO
alter table JournalSrc add constraint pk_JournalSrc primary key (JournalSrcID)

GO
/*Журнал*/
if not exists (select * from sysobjects where id = object_id(N'Journal') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Journal/*Журнал*/ (
Journalid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Journal'))
alter table Journal add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'Journal'))
alter table Journal add 
the_Alias
 VARCHAR (32) null /* Псевдоним */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'Journal'))
alter table Journal add 
TheComment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='jrnlIconCls' and id=object_id(N'Journal'))
alter table Journal add 
jrnlIconCls
 VARCHAR (80) null /* Иконка журнала */
go
if  not exists(select * from syscolumns where name='UseFavorites' and id=object_id(N'Journal'))
alter table Journal add 
UseFavorites
 INTEGER null 
 check (UseFavorites in ( -1/* Да */
, 0/* Нет */ )) /* Массовое выделение */
go
go
-- drop extra columns from generated table: Journal
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Journal')
and name not in('JournalID','Name','the_Alias','TheComment','jrnlIconCls','UseFavorites')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Journal drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Journal') and xtype='PK' and type='K')
ALTER TABLE Journal DROP CONSTRAINT pk_Journal
GO
alter table Journal add constraint pk_Journal primary key (JournalID)

GO
/* TYPE=MTZRprt (Описание отчета) */
GO
/*Секции*/
if not exists (select * from sysobjects where id = object_id(N'RPTStruct') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table RPTStruct/*Секции*/ (
RPTStructid uniqueidentifier not null rowguidcol default ( newid())  
,ParentRowid uniqueidentifier 
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'RPTStruct'))
alter table RPTStruct add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'RPTStruct'))
alter table RPTStruct add 
Caption
 VARCHAR (255) null /* Заголовок */
go
go
-- drop extra columns from generated table: RPTStruct
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('RPTStruct')
and name not in('RPTStructID','ParentRowid','Name','Caption')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table RPTStruct drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_RPTStruct') and xtype='PK' and type='K')
ALTER TABLE RPTStruct DROP CONSTRAINT pk_RPTStruct
GO
alter table RPTStruct add constraint pk_RPTStruct primary key (RPTStructID)

GO
/*Поля секции*/
if not exists (select * from sysobjects where id = object_id(N'RPTFields') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table RPTFields/*Поля секции*/ (
RPTStructID uniqueidentifier not null,
RPTFieldsid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'RPTFields'))
alter table RPTFields add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='FieldType' and id=object_id(N'RPTFields'))
alter table RPTFields add 
FieldType
 UNIQUEIDENTIFIER null /* Тип поля */
go
if  not exists(select * from syscolumns where name='FieldSize' and id=object_id(N'RPTFields'))
alter table RPTFields add 
FieldSize
 integer null /* Размер */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'RPTFields'))
alter table RPTFields add 
Caption
 VARCHAR (255) null /* Заголовок */
go
go
-- drop extra columns from generated table: RPTFields
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('RPTFields')
and name not in('RPTStructID','RPTFieldsID','Name','FieldType','FieldSize','Caption')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table RPTFields drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_RPTFields') and xtype='PK' and type='K')
ALTER TABLE RPTFields DROP CONSTRAINT pk_RPTFields
GO
alter table RPTFields add constraint pk_RPTFields primary key (RPTFieldsID)

GO
/*Формулы*/
if not exists (select * from sysobjects where id = object_id(N'RPTFormula') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table RPTFormula/*Формулы*/ (
RPTFormulaid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'RPTFormula'))
alter table RPTFormula add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'RPTFormula'))
alter table RPTFormula add 
Code
 TEXT null /* Выражение */
go
if  not exists(select * from syscolumns where name='Platform' and id=object_id(N'RPTFormula'))
alter table RPTFormula add 
Platform
 UNIQUEIDENTIFIER null /* Платформа */
go
go
-- drop extra columns from generated table: RPTFormula
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('RPTFormula')
and name not in('RPTFormulaID','Name','Code','Platform')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table RPTFormula drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_RPTFormula') and xtype='PK' and type='K')
ALTER TABLE RPTFormula DROP CONSTRAINT pk_RPTFormula
GO
alter table RPTFormula add constraint pk_RPTFormula primary key (RPTFormulaID)

GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'Reports') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Reports/*Описание*/ (
Reportsid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Reports'))
alter table Reports add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='ReportFile' and id=object_id(N'Reports'))
alter table Reports add 
ReportFile
 IMAGE null /* Файл отчета */
if  not exists(select * from syscolumns where name='ReportFile_EXT' and id=object_id(N'Reports'))
alter table Reports add 
 ReportFile_EXT nvarchar(4) null
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'Reports'))
alter table Reports add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='PrepareMethod' and id=object_id(N'Reports'))
alter table Reports add 
PrepareMethod
 UNIQUEIDENTIFIER null /* Метод для формирования */
go
if  not exists(select * from syscolumns where name='ReportType' and id=object_id(N'Reports'))
alter table Reports add 
ReportType
 INTEGER null 
 check (ReportType in ( 4/* Экспорт по Excel шаблону */
, 0/* Таблица */
, 3/* Экспорт по WORD шаблону */
, 1/* Двумерная матрица */
, 2/* Только расчет */ )) /* Тип отчета */
go
if  not exists(select * from syscolumns where name='TheReportExt' and id=object_id(N'Reports'))
alter table Reports add 
TheReportExt
 UNIQUEIDENTIFIER null /* Расширение для создания отчета */
go
if  not exists(select * from syscolumns where name='ReportView' and id=object_id(N'Reports'))
alter table Reports add 
ReportView
 VARCHAR (255) null /* Базовый запрос */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'Reports'))
alter table Reports add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: Reports
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Reports')
and name not in('ReportsID','Name','ReportFile_EXT','ReportFile','Caption','PrepareMethod','ReportType','TheReportExt','ReportView','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Reports drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Reports') and xtype='PK' and type='K')
ALTER TABLE Reports DROP CONSTRAINT pk_Reports
GO
alter table Reports add constraint pk_Reports primary key (ReportsID)

GO
/* TYPE=MTZFltr (Описание фильтра) */
GO
/*Группа полей фильтра*/
if not exists (select * from sysobjects where id = object_id(N'FilterFieldGroup') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FilterFieldGroup/*Группа полей фильтра*/ (
FilterFieldGroupid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='AllowIgnore' and id=object_id(N'FilterFieldGroup'))
alter table FilterFieldGroup add 
AllowIgnore
 INTEGER null 
 check (AllowIgnore in ( -1/* Да */
, 0/* Нет */ )) /* Можно отключать */
go
go
-- drop extra columns from generated table: FilterFieldGroup
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FilterFieldGroup')
and name not in('FilterFieldGroupID','sequence','Name','Caption','AllowIgnore')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FilterFieldGroup drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FilterFieldGroup') and xtype='PK' and type='K')
ALTER TABLE FilterFieldGroup DROP CONSTRAINT pk_FilterFieldGroup
GO
alter table FilterFieldGroup add constraint pk_FilterFieldGroup primary key (FilterFieldGroupID)

GO
/*Поле фильтра*/
if not exists (select * from sysobjects where id = object_id(N'FileterField') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FileterField/*Поле фильтра*/ (
FilterFieldGroupID uniqueidentifier not null,
FileterFieldid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'FileterField'))
alter table FileterField add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FileterField'))
alter table FileterField add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FileterField'))
alter table FileterField add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='FieldType' and id=object_id(N'FileterField'))
alter table FileterField add 
FieldType
 UNIQUEIDENTIFIER null /* Тип поля */
go
if  not exists(select * from syscolumns where name='FieldSize' and id=object_id(N'FileterField'))
alter table FileterField add 
FieldSize
 integer null /* Размер */
go
if  not exists(select * from syscolumns where name='RefType' and id=object_id(N'FileterField'))
alter table FileterField add 
RefType
 INTEGER null 
 check (RefType in ( 3/* На источник данных */
, 0/* Скалярное поле ( не ссылка) */
, 2/* На строку раздела */
, 1/* На объект  */ )) /* Тип ссылки */
go
if  not exists(select * from syscolumns where name='RefToType' and id=object_id(N'FileterField'))
alter table FileterField add 
RefToType
 UNIQUEIDENTIFIER null /* Тип, куда ссылаемся */
go
if  not exists(select * from syscolumns where name='RefToPart' and id=object_id(N'FileterField'))
alter table FileterField add 
RefToPart
 UNIQUEIDENTIFIER null /* Раздел, куда ссылаемся */
go
if  not exists(select * from syscolumns where name='ValueArray' and id=object_id(N'FileterField'))
alter table FileterField add 
ValueArray
 INTEGER null 
 check (ValueArray in ( -1/* Да */
, 0/* Нет */ )) /* Массив значений */
go
go
-- drop extra columns from generated table: FileterField
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FileterField')
and name not in('FilterFieldGroupID','FileterFieldID','sequence','Name','Caption','FieldType','FieldSize','RefType','RefToType','RefToPart','ValueArray')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FileterField drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FileterField') and xtype='PK' and type='K')
ALTER TABLE FileterField DROP CONSTRAINT pk_FileterField
GO
alter table FileterField add constraint pk_FileterField primary key (FileterFieldID)

GO
/*Фильтр*/
if not exists (select * from sysobjects where id = object_id(N'Filters') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Filters/*Фильтр*/ (
Filtersid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Filters'))
alter table Filters add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TheCaption' and id=object_id(N'Filters'))
alter table Filters add 
TheCaption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'Filters'))
alter table Filters add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: Filters
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Filters')
and name not in('FiltersID','Name','TheCaption','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Filters drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Filters') and xtype='PK' and type='K')
ALTER TABLE Filters DROP CONSTRAINT pk_Filters
GO
alter table Filters add constraint pk_Filters primary key (FiltersID)

GO
/* TYPE=MTZExt (Расширения функциональности) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'MTZExt_def') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table MTZExt_def/*Список зарегистрированных расширений*/ (
MTZExt_defid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'MTZExt_def'))
alter table MTZExt_def add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='ExtType' and id=object_id(N'MTZExt_def'))
alter table MTZExt_def add 
ExtType
 INTEGER null 
 check (ExtType in ( 6/* VerifyRowExt */
, 7/* CodeGenerator */
, 5/* DefaultExt */
, 0/* StatusExt */
, 4/* JrnlRunExt */
, 2/* CustomExt */
, 8/* ARMGenerator */
, 1/* OnFormExt */
, 3/* JrnlAddExt */ )) /* Тип расширения */
go
if  not exists(select * from syscolumns where name='TheDescription' and id=object_id(N'MTZExt_def'))
alter table MTZExt_def add 
TheDescription
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: MTZExt_def
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('MTZExt_def')
and name not in('MTZExt_defID','Name','ExtType','TheDescription')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table MTZExt_def drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_MTZExt_def') and xtype='PK' and type='K')
ALTER TABLE MTZExt_def DROP CONSTRAINT pk_MTZExt_def
GO
alter table MTZExt_def add constraint pk_MTZExt_def primary key (MTZExt_defID)

GO
/*Реализации расширения*/
if not exists (select * from sysobjects where id = object_id(N'MTZExtRel') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table MTZExtRel/*Реализации расширения для разных разработческих плаформ*/ (
MTZExtRelid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ThePlatform' and id=object_id(N'MTZExtRel'))
alter table MTZExtRel add 
ThePlatform
 INTEGER null 
 check (ThePlatform in ( 3/* OTHER */
, 1/* DOTNET */
, 2/* JAVA */
, 0/* VB6 */ )) /* Реализация */
go
if  not exists(select * from syscolumns where name='TheClassName' and id=object_id(N'MTZExtRel'))
alter table MTZExtRel add 
TheClassName
 VARCHAR (255) null /* Название класса */
go
if  not exists(select * from syscolumns where name='TheLibraryName' and id=object_id(N'MTZExtRel'))
alter table MTZExtRel add 
TheLibraryName
 VARCHAR (255) null /* Название библиотеки */
go
go
-- drop extra columns from generated table: MTZExtRel
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('MTZExtRel')
and name not in('MTZExtRelID','ThePlatform','TheClassName','TheLibraryName')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table MTZExtRel drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_MTZExtRel') and xtype='PK' and type='K')
ALTER TABLE MTZExtRel DROP CONSTRAINT pk_MTZExtRel
GO
alter table MTZExtRel add constraint pk_MTZExtRel primary key (MTZExtRelID)

GO
/* TYPE=bpdr (Роль сотрудника) */
GO
/*Роль*/
if not exists (select * from sysobjects where id = object_id(N'iu_crole') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table iu_crole/*Роль */ (
iu_croleid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'iu_crole'))
alter table iu_crole add 
name
 VARCHAR (120) null /* Название */
go
if  not exists(select * from syscolumns where name='allowSetUser' and id=object_id(N'iu_crole'))
alter table iu_crole add 
allowSetUser
 INTEGER null 
 check (allowSetUser in ( -1/* Да */
, 0/* Нет */ )) /* Требует явного назначения */
go
go
-- drop extra columns from generated table: iu_crole
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('iu_crole')
and name not in('iu_croleID','name','allowSetUser')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table iu_crole drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_iu_crole') and xtype='PK' and type='K')
ALTER TABLE iu_crole DROP CONSTRAINT pk_iu_crole
GO
alter table iu_crole add constraint pk_iu_crole primary key (iu_croleID)

GO
/* TYPE=bpu (Сотрудник) */
GO
/*Данные сотрудника*/
if not exists (select * from sysobjects where id = object_id(N'iu_u_def') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table iu_u_def/*Данные сотрудника*/ (
iu_u_defid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theClient' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
theClient
 UNIQUEIDENTIFIER null /* Клиент */
go
if  not exists(select * from syscolumns where name='lastname' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
lastname
 VARCHAR (120) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
name
 VARCHAR (120) null /* Имя */
go
if  not exists(select * from syscolumns where name='surname' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
surname
 VARCHAR (120) null /* Отчество */
go
if  not exists(select * from syscolumns where name='curRole' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
curRole
 UNIQUEIDENTIFIER null /* Роль в производстве */
go
if  not exists(select * from syscolumns where name='sendtomail' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
sendtomail
 INTEGER null 
 check (sendtomail in ( -1/* Да */
, 0/* Нет */ )) /* Оповещать по почте */
go
if  not exists(select * from syscolumns where name='freelancer' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
freelancer
 INTEGER null 
 check (freelancer in ( -1/* Да */
, 0/* Нет */ )) /* Удаленная работа */
go
if  not exists(select * from syscolumns where name='email' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
email
 VARCHAR (60) null /* e-mail */
go
if  not exists(select * from syscolumns where name='thephone' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
thephone
 VARCHAR (40) null /* Телефон */
go
if  not exists(select * from syscolumns where name='login' and id=object_id(N'iu_u_def'))
alter table iu_u_def add 
login
 VARCHAR (64) null /* Имя для входа */
go
go
-- drop extra columns from generated table: iu_u_def
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('iu_u_def')
and name not in('iu_u_defID','theClient','lastname','name','surname','curRole','sendtomail','freelancer','email','thephone','login')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table iu_u_def drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_iu_u_def') and xtype='PK' and type='K')
ALTER TABLE iu_u_def DROP CONSTRAINT pk_iu_u_def
GO
alter table iu_u_def add constraint pk_iu_u_def primary key (iu_u_defID)

GO
/* TYPE=MTZMetaModel (Спец.: Метамодель системы) */
GO
/*Пакет генерации*/
if not exists (select * from sysobjects where id = object_id(N'GENPACKAGE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENPACKAGE/*Пакет генерации*/ (
GENPACKAGEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENPACKAGE'))
alter table GENPACKAGE add 
Name
 VARCHAR (255) null /* Название */
go
go
-- drop extra columns from generated table: GENPACKAGE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENPACKAGE')
and name not in('GENPACKAGEID','Name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENPACKAGE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENPACKAGE') and xtype='PK' and type='K')
ALTER TABLE GENPACKAGE DROP CONSTRAINT pk_GENPACKAGE
GO
alter table GENPACKAGE add constraint pk_GENPACKAGE primary key (GENPACKAGEID)

GO
/*Генераторы*/
if not exists (select * from sysobjects where id = object_id(N'GENERATOR_TARGET') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENERATOR_TARGET/*Генераторы*/ (
GENPACKAGEID uniqueidentifier not null,
GENERATOR_TARGETid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TargetType' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
TargetType
 integer null 
 check (TargetType in ( 0/* СУБД */
, 3/* Документация */
, 1/* МОДЕЛЬ */
, 2/* Приложение */
, 4/* АРМ */ )) /* Тип платформы */
go
if  not exists(select * from syscolumns where name='QueueName' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
QueueName
 VARCHAR (255) null /* Очередь */
go
if  not exists(select * from syscolumns where name='GeneratorProgID' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
GeneratorProgID
 VARCHAR (255) null /* COM класс */
go
if  not exists(select * from syscolumns where name='GeneratorStyle' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
GeneratorStyle
 INTEGER null 
 check (GeneratorStyle in ( 0/* Один тип */
, 1/* Все типы сразу */ )) /* Вариант */
go
if  not exists(select * from syscolumns where name='TheDevelopmentEnv' and id=object_id(N'GENERATOR_TARGET'))
alter table GENERATOR_TARGET add 
TheDevelopmentEnv
 INTEGER null 
 check (TheDevelopmentEnv in ( 3/* OTHER */
, 1/* DOTNET */
, 2/* JAVA */
, 0/* VB6 */ )) /* Среда разработки */
go
go
-- drop extra columns from generated table: GENERATOR_TARGET
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENERATOR_TARGET')
and name not in('GENPACKAGEID','GENERATOR_TARGETID','Name','TargetType','QueueName','GeneratorProgID','GeneratorStyle','TheDevelopmentEnv')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENERATOR_TARGET drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENERATOR_TARGET') and xtype='PK' and type='K')
ALTER TABLE GENERATOR_TARGET DROP CONSTRAINT pk_GENERATOR_TARGET
GO
alter table GENERATOR_TARGET add constraint pk_GENERATOR_TARGET primary key (GENERATOR_TARGETID)

GO
/*Библиотеки*/
if not exists (select * from sysobjects where id = object_id(N'GENREFERENCE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENREFERENCE/*Библиотеки, которые используются при генерации*/ (
GENERATOR_TARGETID uniqueidentifier not null,
GENREFERENCEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='RefClassID' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
RefClassID
 VARCHAR (40) null /* Класс ссылки */
go
if  not exists(select * from syscolumns where name='VersionMajor' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
VersionMajor
 integer null /* Номер версии */
go
if  not exists(select * from syscolumns where name='VersionMinor' and id=object_id(N'GENREFERENCE'))
alter table GENREFERENCE add 
VersionMinor
 integer null /* Подверсия */
go
go
-- drop extra columns from generated table: GENREFERENCE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENREFERENCE')
and name not in('GENERATOR_TARGETID','GENREFERENCEID','Name','RefClassID','VersionMajor','VersionMinor')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENREFERENCE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENREFERENCE') and xtype='PK' and type='K')
ALTER TABLE GENREFERENCE DROP CONSTRAINT pk_GENREFERENCE
GO
alter table GENREFERENCE add constraint pk_GENREFERENCE primary key (GENREFERENCEID)

GO
/*Ручной код*/
if not exists (select * from sysobjects where id = object_id(N'GENMANUALCODE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENMANUALCODE/*Код, который не укладывается в описание модели*/ (
GENERATOR_TARGETID uniqueidentifier not null,
GENMANUALCODEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'GENMANUALCODE'))
alter table GENMANUALCODE add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'GENMANUALCODE'))
alter table GENMANUALCODE add 
the_Alias
 VARCHAR (80) null /* Псевдоним */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'GENMANUALCODE'))
alter table GENMANUALCODE add 
Code
 TEXT null /* Код */
go
go
-- drop extra columns from generated table: GENMANUALCODE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENMANUALCODE')
and name not in('GENERATOR_TARGETID','GENMANUALCODEID','Name','the_Alias','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENMANUALCODE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENMANUALCODE') and xtype='PK' and type='K')
ALTER TABLE GENMANUALCODE DROP CONSTRAINT pk_GENMANUALCODE
GO
alter table GENMANUALCODE add constraint pk_GENMANUALCODE primary key (GENMANUALCODEID)

GO
/*Контрольные элементы*/
if not exists (select * from sysobjects where id = object_id(N'GENCONTROLS') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GENCONTROLS/*Контрольные элементы, которые используются при генерации*/ (
GENERATOR_TARGETID uniqueidentifier not null,
GENCONTROLSid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ControlProgID' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
ControlProgID
 VARCHAR (255) null /* ProgID контрольконо элемента */
go
if  not exists(select * from syscolumns where name='ControlClassID' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
ControlClassID
 VARCHAR (40) null /* Класс контрольногоэлемента */
go
if  not exists(select * from syscolumns where name='VersionMajor' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
VersionMajor
 integer null /* Версия */
go
if  not exists(select * from syscolumns where name='VersionMinor' and id=object_id(N'GENCONTROLS'))
alter table GENCONTROLS add 
VersionMinor
 integer null /* Подверсия */
go
go
-- drop extra columns from generated table: GENCONTROLS
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GENCONTROLS')
and name not in('GENERATOR_TARGETID','GENCONTROLSID','ControlProgID','ControlClassID','VersionMajor','VersionMinor')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GENCONTROLS drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GENCONTROLS') and xtype='PK' and type='K')
ALTER TABLE GENCONTROLS DROP CONSTRAINT pk_GENCONTROLS
GO
alter table GENCONTROLS add constraint pk_GENCONTROLS primary key (GENCONTROLSID)

GO
/*Локализация*/
if not exists (select * from sysobjects where id = object_id(N'LocalizeInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table LocalizeInfo/**/ (
LocalizeInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='LangFull' and id=object_id(N'LocalizeInfo'))
alter table LocalizeInfo add 
LangFull
 VARCHAR (255) null /* Язык - название */
go
if  not exists(select * from syscolumns where name='LangShort' and id=object_id(N'LocalizeInfo'))
alter table LocalizeInfo add 
LangShort
 VARCHAR (255) null /* Код языка */
go
go
-- drop extra columns from generated table: LocalizeInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('LocalizeInfo')
and name not in('LocalizeInfoID','LangFull','LangShort')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table LocalizeInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_LocalizeInfo') and xtype='PK' and type='K')
ALTER TABLE LocalizeInfo DROP CONSTRAINT pk_LocalizeInfo
GO
alter table LocalizeInfo add constraint pk_LocalizeInfo primary key (LocalizeInfoID)

GO
/*Тип поля*/
if not exists (select * from sysobjects where id = object_id(N'FIELDTYPE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDTYPE/*Типы полей, перечисления, интервалы*/ (
FIELDTYPEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TypeStyle' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
TypeStyle
 INTEGER null 
 check (TypeStyle in ( 4/* Ссылка */
, 1/* Выражение */
, 5/* Элемент оформления */
, 3/* Интервал */
, 2/* Перечисление */
, 0/* Скалярный тип */ )) /* Трактовка */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
the_Comment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='AllowSize' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
AllowSize
 INTEGER null 
 check (AllowSize in ( -1/* Да */
, 0/* Нет */ )) /* Нужен размер */
go
if  not exists(select * from syscolumns where name='Minimum' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
Minimum
 VARCHAR (64) null /* Минимум */
go
if  not exists(select * from syscolumns where name='Maximum' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
Maximum
 VARCHAR (64) null /* Максимум */
go
if  not exists(select * from syscolumns where name='AllowLikeSearch' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
AllowLikeSearch
 INTEGER null 
 check (AllowLikeSearch in ( -1/* Да */
, 0/* Нет */ )) /* Поиск текста */
go
if  not exists(select * from syscolumns where name='GridSortType' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
GridSortType
 INTEGER null 
 check (GridSortType in ( 0/* As String */
, 1/* As Numeric */
, 2/* As Date */ )) /* Вариант сортировки в табличном представлении */
go
if  not exists(select * from syscolumns where name='DelayedSave' and id=object_id(N'FIELDTYPE'))
alter table FIELDTYPE add 
DelayedSave
 INTEGER null 
 check (DelayedSave in ( -1/* Да */
, 0/* Нет */ )) /* Отложенное сохранение */
go
go
-- drop extra columns from generated table: FIELDTYPE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDTYPE')
and name not in('FIELDTYPEID','Name','TypeStyle','the_Comment','AllowSize','Minimum','Maximum','AllowLikeSearch','GridSortType','DelayedSave')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDTYPE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDTYPE') and xtype='PK' and type='K')
ALTER TABLE FIELDTYPE DROP CONSTRAINT pk_FIELDTYPE
GO
alter table FIELDTYPE add constraint pk_FIELDTYPE primary key (FIELDTYPEID)

GO
/*Зачения*/
if not exists (select * from sysobjects where id = object_id(N'ENUMITEM') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ENUMITEM/*Для описания Enum типов*/ (
FIELDTYPEID uniqueidentifier not null,
ENUMITEMid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ENUMITEM'))
alter table ENUMITEM add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='NameValue' and id=object_id(N'ENUMITEM'))
alter table ENUMITEM add 
NameValue
 integer null /* Значение */
go
if  not exists(select * from syscolumns where name='NameInCode' and id=object_id(N'ENUMITEM'))
alter table ENUMITEM add 
NameInCode
 VARCHAR (100) null /* Название в коде */
go
go
-- drop extra columns from generated table: ENUMITEM
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ENUMITEM')
and name not in('FIELDTYPEID','ENUMITEMID','Name','NameValue','NameInCode')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ENUMITEM drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ENUMITEM') and xtype='PK' and type='K')
ALTER TABLE ENUMITEM DROP CONSTRAINT pk_ENUMITEM
GO
alter table ENUMITEM add constraint pk_ENUMITEM primary key (ENUMITEMID)

GO
/*Отображение*/
if not exists (select * from sysobjects where id = object_id(N'FIELDTYPEMAP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDTYPEMAP/*Отображение типа поля на физический тип хранения*/ (
FIELDTYPEID uniqueidentifier not null,
FIELDTYPEMAPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'FIELDTYPEMAP'))
alter table FIELDTYPEMAP add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='StoageType' and id=object_id(N'FIELDTYPEMAP'))
alter table FIELDTYPEMAP add 
StoageType
 VARCHAR (255) null /* Тип хранения */
go
if  not exists(select * from syscolumns where name='FixedSize' and id=object_id(N'FIELDTYPEMAP'))
alter table FIELDTYPEMAP add 
FixedSize
 integer null /* Размер */
go
go
-- drop extra columns from generated table: FIELDTYPEMAP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDTYPEMAP')
and name not in('FIELDTYPEID','FIELDTYPEMAPID','Target','StoageType','FixedSize')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDTYPEMAP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDTYPEMAP') and xtype='PK' and type='K')
ALTER TABLE FIELDTYPEMAP DROP CONSTRAINT pk_FIELDTYPEMAP
GO
alter table FIELDTYPEMAP add constraint pk_FIELDTYPEMAP primary key (FIELDTYPEMAPID)

GO
/*Методы и процедуры*/
if not exists (select * from sysobjects where id = object_id(N'SHAREDMETHOD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SHAREDMETHOD/*Методы и процедуры*/ (
SHAREDMETHODid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'SHAREDMETHOD'))
alter table SHAREDMETHOD add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'SHAREDMETHOD'))
alter table SHAREDMETHOD add 
the_Comment
 TEXT null /* Описание метода */
go
if  not exists(select * from syscolumns where name='ReturnType' and id=object_id(N'SHAREDMETHOD'))
alter table SHAREDMETHOD add 
ReturnType
 UNIQUEIDENTIFIER null /* Возвращаемый тип */
go
go
-- drop extra columns from generated table: SHAREDMETHOD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SHAREDMETHOD')
and name not in('SHAREDMETHODID','Name','the_Comment','ReturnType')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SHAREDMETHOD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SHAREDMETHOD') and xtype='PK' and type='K')
ALTER TABLE SHAREDMETHOD DROP CONSTRAINT pk_SHAREDMETHOD
GO
alter table SHAREDMETHOD add constraint pk_SHAREDMETHOD primary key (SHAREDMETHODID)

GO
/*Реализация*/
if not exists (select * from sysobjects where id = object_id(N'SCRIPT') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SCRIPT/*Код метода на понятном конкретному генератору языке*/ (
SHAREDMETHODID uniqueidentifier not null,
SCRIPTid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'SCRIPT'))
alter table SCRIPT add 
Target
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'SCRIPT'))
alter table SCRIPT add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: SCRIPT
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SCRIPT')
and name not in('SHAREDMETHODID','SCRIPTID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SCRIPT drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SCRIPT') and xtype='PK' and type='K')
ALTER TABLE SCRIPT DROP CONSTRAINT pk_SCRIPT
GO
alter table SCRIPT add constraint pk_SCRIPT primary key (SCRIPTID)

GO
/*Параметры*/
if not exists (select * from sysobjects where id = object_id(N'PARAMETERS') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARAMETERS/*Параметры метода*/ (
SCRIPTID uniqueidentifier not null,
PARAMETERSid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
sequence
 integer null /* Последовательность */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
Name
 VARCHAR (80) null /* Имя */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='TypeOfParm' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
TypeOfParm
 UNIQUEIDENTIFIER null /* Тип данных */
go
if  not exists(select * from syscolumns where name='DataSize' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
DataSize
 integer null /* Размер */
go
if  not exists(select * from syscolumns where name='AllowNull' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
AllowNull
 INTEGER null 
 check (AllowNull in ( -1/* Да */
, 0/* Нет */ )) /* Можно не задавать */
go
if  not exists(select * from syscolumns where name='OutParam' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
OutParam
 INTEGER null 
 check (OutParam in ( -1/* Да */
, 0/* Нет */ )) /* Возвращает значение */
go
if  not exists(select * from syscolumns where name='ReferenceType' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
ReferenceType
 INTEGER null 
 check (ReferenceType in ( 3/* На источник данных */
, 0/* Скалярное поле ( не ссылка) */
, 2/* На строку раздела */
, 1/* На объект  */ )) /* Тип ссылки */
go
if  not exists(select * from syscolumns where name='RefToType' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
RefToType
 UNIQUEIDENTIFIER null /* Ссылка на тип */
go
if  not exists(select * from syscolumns where name='RefToPart' and id=object_id(N'PARAMETERS'))
alter table PARAMETERS add 
RefToPart
 UNIQUEIDENTIFIER null /* Ссылка на раздел */
go
go
-- drop extra columns from generated table: PARAMETERS
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARAMETERS')
and name not in('SCRIPTID','PARAMETERSID','sequence','Name','Caption','TypeOfParm','DataSize','AllowNull','OutParam','ReferenceType','RefToType','RefToPart')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARAMETERS drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARAMETERS') and xtype='PK' and type='K')
ALTER TABLE PARAMETERS DROP CONSTRAINT pk_PARAMETERS
GO
alter table PARAMETERS add constraint pk_PARAMETERS primary key (PARAMETERSID)

GO
/*Тип объекта*/
if not exists (select * from sysobjects where id = object_id(N'OBJECTTYPE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table OBJECTTYPE/*Тип объекта (карточки)*/ (
OBJECTTYPEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Package' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
Package
 UNIQUEIDENTIFIER null /* Приложение */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
the_Comment
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
Name
 VARCHAR (14) null /* Код */
go
if  not exists(select * from syscolumns where name='IsSingleInstance' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
IsSingleInstance
 INTEGER null 
 check (IsSingleInstance in ( -1/* Да */
, 0/* Нет */ )) /* Допускается только один объект */
go
if  not exists(select * from syscolumns where name='ChooseView' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
ChooseView
 UNIQUEIDENTIFIER null /* Представление для выбора */
go
if  not exists(select * from syscolumns where name='OnRun' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
OnRun
 UNIQUEIDENTIFIER null /* При запуске */
go
if  not exists(select * from syscolumns where name='OnCreate' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
OnCreate
 UNIQUEIDENTIFIER null /* При создании */
go
if  not exists(select * from syscolumns where name='OnDelete' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
OnDelete
 UNIQUEIDENTIFIER null /* При удалении */
go
if  not exists(select * from syscolumns where name='AllowRefToObject' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
AllowRefToObject
 INTEGER null 
 check (AllowRefToObject in ( -1/* Да */
, 0/* Нет */ )) /* Отображать при выборе ссылки */
go
if  not exists(select * from syscolumns where name='AllowSearch' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
AllowSearch
 INTEGER null 
 check (AllowSearch in ( -1/* Да */
, 0/* Нет */ )) /* Отображать при поиске */
go
if  not exists(select * from syscolumns where name='ReplicaType' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
ReplicaType
 INTEGER null 
 check (ReplicaType in ( 1/* Построчно */
, 0/* Весь документ */
, 2/* Локальный */ )) /* Тип репликации */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
TheComment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='UseOwnership' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
UseOwnership
 INTEGER null 
 check (UseOwnership in ( -1/* Да */
, 0/* Нет */ )) /* Видмость зависит от пользователя */
go
if  not exists(select * from syscolumns where name='UseArchiving' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
UseArchiving
 INTEGER null 
 check (UseArchiving in ( -1/* Да */
, 0/* Нет */ )) /* Архивировать вместо удаления */
go
if  not exists(select * from syscolumns where name='CommitFullObject' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
CommitFullObject
 INTEGER null 
 check (CommitFullObject in ( -1/* Да */
, 0/* Нет */ )) /* Сохранять объект целиком */
go
if  not exists(select * from syscolumns where name='objIconCls' and id=object_id(N'OBJECTTYPE'))
alter table OBJECTTYPE add 
objIconCls
 VARCHAR (80) null /* Иконка объекта */
go
go
-- drop extra columns from generated table: OBJECTTYPE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('OBJECTTYPE')
and name not in('OBJECTTYPEID','Package','the_Comment','Name','IsSingleInstance','ChooseView','OnRun','OnCreate','OnDelete','AllowRefToObject','AllowSearch','ReplicaType','TheComment','UseOwnership','UseArchiving','CommitFullObject','objIconCls')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table OBJECTTYPE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_OBJECTTYPE') and xtype='PK' and type='K')
ALTER TABLE OBJECTTYPE DROP CONSTRAINT pk_OBJECTTYPE
GO
alter table OBJECTTYPE add constraint pk_OBJECTTYPE primary key (OBJECTTYPEID)

GO
/*Состояния*/
if not exists (select * from sysobjects where id = object_id(N'OBJSTATUS') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table OBJSTATUS/*Возможные логические состояния документа*/ (
OBJECTTYPEID uniqueidentifier not null,
OBJSTATUSid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='isStartup' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
isStartup
 INTEGER null 
 check (isStartup in ( -1/* Да */
, 0/* Нет */ )) /* Начальное */
go
if  not exists(select * from syscolumns where name='IsArchive' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
IsArchive
 INTEGER null 
 check (IsArchive in ( -1/* Да */
, 0/* Нет */ )) /* Архивное */
go
if  not exists(select * from syscolumns where name='the_comment' and id=object_id(N'OBJSTATUS'))
alter table OBJSTATUS add 
the_comment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: OBJSTATUS
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('OBJSTATUS')
and name not in('OBJECTTYPEID','OBJSTATUSID','name','isStartup','IsArchive','the_comment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table OBJSTATUS drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_OBJSTATUS') and xtype='PK' and type='K')
ALTER TABLE OBJSTATUS DROP CONSTRAINT pk_OBJSTATUS
GO
alter table OBJSTATUS add constraint pk_OBJSTATUS primary key (OBJSTATUSID)

GO
/*Разрешенные переходы*/
if not exists (select * from sysobjects where id = object_id(N'NEXTSTATE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table NEXTSTATE/*Матрица переходов */ (
OBJSTATUSID uniqueidentifier not null,
NEXTSTATEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheState' and id=object_id(N'NEXTSTATE'))
alter table NEXTSTATE add 
TheState
 UNIQUEIDENTIFIER null /* Разрешенное состояние */
go
go
-- drop extra columns from generated table: NEXTSTATE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('NEXTSTATE')
and name not in('OBJSTATUSID','NEXTSTATEID','TheState')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table NEXTSTATE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_NEXTSTATE') and xtype='PK' and type='K')
ALTER TABLE NEXTSTATE DROP CONSTRAINT pk_NEXTSTATE
GO
alter table NEXTSTATE add constraint pk_NEXTSTATE primary key (NEXTSTATEID)

GO
/*Режим работы*/
if not exists (select * from sysobjects where id = object_id(N'OBJECTMODE') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table OBJECTMODE/*Режим работы*/ (
OBJECTTYPEID uniqueidentifier not null,
OBJECTMODEid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'OBJECTMODE'))
alter table OBJECTMODE add 
Name
 VARCHAR (5) null /* Название режима */
go
if  not exists(select * from syscolumns where name='DefaultMode' and id=object_id(N'OBJECTMODE'))
alter table OBJECTMODE add 
DefaultMode
 INTEGER null 
 check (DefaultMode in ( -1/* Да */
, 0/* Нет */ )) /* Этот режим является основным режимом работы объекта */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'OBJECTMODE'))
alter table OBJECTMODE add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: OBJECTMODE
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('OBJECTMODE')
and name not in('OBJECTTYPEID','OBJECTMODEID','Name','DefaultMode','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table OBJECTMODE drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_OBJECTMODE') and xtype='PK' and type='K')
ALTER TABLE OBJECTMODE DROP CONSTRAINT pk_OBJECTMODE
GO
alter table OBJECTMODE add constraint pk_OBJECTMODE primary key (OBJECTMODEID)

GO
/*Органичения разделов*/
if not exists (select * from sysobjects where id = object_id(N'STRUCTRESTRICTION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table STRUCTRESTRICTION/*Ораничения на доступ к разделу документа*/ (
OBJECTMODEID uniqueidentifier not null,
STRUCTRESTRICTIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Struct' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
Struct
 UNIQUEIDENTIFIER null /* структура, доступ к которой ограничен */
go
if  not exists(select * from syscolumns where name='AllowRead' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowRead
 INTEGER null 
 check (AllowRead in ( -1/* Да */
, 0/* Нет */ )) /* Разрешен просмотр */
go
if  not exists(select * from syscolumns where name='AllowAdd' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowAdd
 INTEGER null 
 check (AllowAdd in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено добавлять */
go
if  not exists(select * from syscolumns where name='AllowEdit' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowEdit
 INTEGER null 
 check (AllowEdit in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено изменять */
go
if  not exists(select * from syscolumns where name='AllowDelete' and id=object_id(N'STRUCTRESTRICTION'))
alter table STRUCTRESTRICTION add 
AllowDelete
 INTEGER null 
 check (AllowDelete in ( -1/* Да */
, 0/* Нет */ )) /* Разрешено удалять */
go
go
-- drop extra columns from generated table: STRUCTRESTRICTION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('STRUCTRESTRICTION')
and name not in('OBJECTMODEID','STRUCTRESTRICTIONID','Struct','AllowRead','AllowAdd','AllowEdit','AllowDelete')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table STRUCTRESTRICTION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_STRUCTRESTRICTION') and xtype='PK' and type='K')
ALTER TABLE STRUCTRESTRICTION DROP CONSTRAINT pk_STRUCTRESTRICTION
GO
alter table STRUCTRESTRICTION add constraint pk_STRUCTRESTRICTION primary key (STRUCTRESTRICTIONID)

GO
/*Ограничения методов*/
if not exists (select * from sysobjects where id = object_id(N'METHODRESTRICTION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table METHODRESTRICTION/*Ограничение на использование методов раздела*/ (
OBJECTMODEID uniqueidentifier not null,
METHODRESTRICTIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Part' and id=object_id(N'METHODRESTRICTION'))
alter table METHODRESTRICTION add 
Part
 UNIQUEIDENTIFIER null /* Структура, которой принадлежит метод */
go
if  not exists(select * from syscolumns where name='Method' and id=object_id(N'METHODRESTRICTION'))
alter table METHODRESTRICTION add 
Method
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IsRestricted' and id=object_id(N'METHODRESTRICTION'))
alter table METHODRESTRICTION add 
IsRestricted
 INTEGER null 
 check (IsRestricted in ( -1/* Да */
, 0/* Нет */ )) /* Запрещено использовать */
go
go
-- drop extra columns from generated table: METHODRESTRICTION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('METHODRESTRICTION')
and name not in('OBJECTMODEID','METHODRESTRICTIONID','Part','Method','IsRestricted')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table METHODRESTRICTION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_METHODRESTRICTION') and xtype='PK' and type='K')
ALTER TABLE METHODRESTRICTION DROP CONSTRAINT pk_METHODRESTRICTION
GO
alter table METHODRESTRICTION add constraint pk_METHODRESTRICTION primary key (METHODRESTRICTIONID)

GO
/*Ограничения полей*/
if not exists (select * from sysobjects where id = object_id(N'FIELDRESTRICTION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDRESTRICTION/*Ограничения на доступ к полям раздела*/ (
OBJECTMODEID uniqueidentifier not null,
FIELDRESTRICTIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ThePart' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
ThePart
 UNIQUEIDENTIFIER null /* Структура, которой принадлежит поле */
go
if  not exists(select * from syscolumns where name='TheField' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
TheField
 UNIQUEIDENTIFIER null /* Поле, на которое накладывается ограничение */
go
if  not exists(select * from syscolumns where name='AllowRead' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
AllowRead
 INTEGER null 
 check (AllowRead in ( -1/* Да */
, 0/* Нет */ )) /* Разрешен просмотр */
go
if  not exists(select * from syscolumns where name='AllowModify' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
AllowModify
 INTEGER null 
 check (AllowModify in ( -1/* Да */
, 0/* Нет */ )) /* Разрешена модификация */
go
if  not exists(select * from syscolumns where name='MandatoryField' and id=object_id(N'FIELDRESTRICTION'))
alter table FIELDRESTRICTION add 
MandatoryField
 integer null 
 check (MandatoryField in ( -1/* Не существенно */
, 1/* Да */
, 0/* Нет */ )) /* Обязательное поле */
go
go
-- drop extra columns from generated table: FIELDRESTRICTION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDRESTRICTION')
and name not in('OBJECTMODEID','FIELDRESTRICTIONID','ThePart','TheField','AllowRead','AllowModify','MandatoryField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDRESTRICTION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDRESTRICTION') and xtype='PK' and type='K')
ALTER TABLE FIELDRESTRICTION DROP CONSTRAINT pk_FIELDRESTRICTION
GO
alter table FIELDRESTRICTION add constraint pk_FIELDRESTRICTION primary key (FIELDRESTRICTIONID)

GO
/*Методы типа*/
if not exists (select * from sysobjects where id = object_id(N'TYPEMENU') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table TYPEMENU/*Методы уровня типа*/ (
OBJECTTYPEID uniqueidentifier not null,
TYPEMENUid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='ToolTip' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
ToolTip
 VARCHAR (80) null /* Подсказка */
go
if  not exists(select * from syscolumns where name='the_Action' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
the_Action
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IsMenuItem' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
IsMenuItem
 INTEGER null 
 check (IsMenuItem in ( -1/* Да */
, 0/* Нет */ )) /* Включать в меню */
go
if  not exists(select * from syscolumns where name='IsToolBarButton' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
IsToolBarButton
 INTEGER null 
 check (IsToolBarButton in ( -1/* Да */
, 0/* Нет */ )) /* Включать в тулбар */
go
if  not exists(select * from syscolumns where name='HotKey' and id=object_id(N'TYPEMENU'))
alter table TYPEMENU add 
HotKey
 VARCHAR (20) null /* Горячая клавиша */
go
go
-- drop extra columns from generated table: TYPEMENU
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('TYPEMENU')
and name not in('OBJECTTYPEID','TYPEMENUID','Name','Caption','ToolTip','the_Action','IsMenuItem','IsToolBarButton','HotKey')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table TYPEMENU drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_TYPEMENU') and xtype='PK' and type='K')
ALTER TABLE TYPEMENU DROP CONSTRAINT pk_TYPEMENU
GO
alter table TYPEMENU add constraint pk_TYPEMENU primary key (TYPEMENUID)

GO
/*Проверка правильности*/
if not exists (select * from sysobjects where id = object_id(N'INSTANCEVALIDATOR') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table INSTANCEVALIDATOR/*Проверка правильности для объекта в целом*/ (
OBJECTTYPEID uniqueidentifier not null,
INSTANCEVALIDATORid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'INSTANCEVALIDATOR'))
alter table INSTANCEVALIDATOR add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'INSTANCEVALIDATOR'))
alter table INSTANCEVALIDATOR add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: INSTANCEVALIDATOR
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('INSTANCEVALIDATOR')
and name not in('OBJECTTYPEID','INSTANCEVALIDATORID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table INSTANCEVALIDATOR drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_INSTANCEVALIDATOR') and xtype='PK' and type='K')
ALTER TABLE INSTANCEVALIDATOR DROP CONSTRAINT pk_INSTANCEVALIDATOR
GO
alter table INSTANCEVALIDATOR add constraint pk_INSTANCEVALIDATOR primary key (INSTANCEVALIDATORID)

GO
/*Раздел*/
if not exists (select * from sysobjects where id = object_id(N'PART') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PART/*Раздел объекта*/ (
OBJECTTYPEID uniqueidentifier not null,
PARTid uniqueidentifier not null rowguidcol default ( newid())  
,ParentRowid uniqueidentifier 
)
END
go
if  not exists(select * from syscolumns where name='Sequence' and id=object_id(N'PART'))
alter table PART add 
Sequence
 integer null /* № п/п */
go
if  not exists(select * from syscolumns where name='PartType' and id=object_id(N'PART'))
alter table PART add 
PartType
 INTEGER null 
 check (PartType in ( 1/* Коллекция */
, 2/* Дерево */
, 0/* Строка */
, 4/* Расширение с данными */
, 3/* Расширение */ )) /* Тип структры */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'PART'))
alter table PART add 
Caption
 VARCHAR (255) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PART'))
alter table PART add 
Name
 VARCHAR (20) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Comment' and id=object_id(N'PART'))
alter table PART add 
the_Comment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='NoLog' and id=object_id(N'PART'))
alter table PART add 
NoLog
 INTEGER null 
 check (NoLog in ( -1/* Да */
, 0/* Нет */ )) /* Не записывать в журнал */
go
if  not exists(select * from syscolumns where name='ManualRegister' and id=object_id(N'PART'))
alter table PART add 
ManualRegister
 INTEGER null 
 check (ManualRegister in ( -1/* Да */
, 0/* Нет */ )) /* Исключить из индексирования */
go
if  not exists(select * from syscolumns where name='OnCreate' and id=object_id(N'PART'))
alter table PART add 
OnCreate
 UNIQUEIDENTIFIER null /* При создании */
go
if  not exists(select * from syscolumns where name='OnSave' and id=object_id(N'PART'))
alter table PART add 
OnSave
 UNIQUEIDENTIFIER null /* При сохранении */
go
if  not exists(select * from syscolumns where name='OnRun' and id=object_id(N'PART'))
alter table PART add 
OnRun
 UNIQUEIDENTIFIER null /* При открытии */
go
if  not exists(select * from syscolumns where name='OnDelete' and id=object_id(N'PART'))
alter table PART add 
OnDelete
 UNIQUEIDENTIFIER null /* При удалении */
go
if  not exists(select * from syscolumns where name='AddBehaivor' and id=object_id(N'PART'))
alter table PART add 
AddBehaivor
 INTEGER null 
 check (AddBehaivor in ( 0/* AddForm */
, 2/* RunAction */
, 1/* RefreshOnly */ )) /* Поведение при добавлении */
go
if  not exists(select * from syscolumns where name='ExtenderObject' and id=object_id(N'PART'))
alter table PART add 
ExtenderObject
 UNIQUEIDENTIFIER null /* Объект расширения */
go
if  not exists(select * from syscolumns where name='shablonBrief' and id=object_id(N'PART'))
alter table PART add 
shablonBrief
 VARCHAR (100) null /* Шаблон для краткого отображения */
go
if  not exists(select * from syscolumns where name='ruleBrief' and id=object_id(N'PART'))
alter table PART add 
ruleBrief
 VARCHAR (500) null /* Правило составления BRIEF поля */
go
if  not exists(select * from syscolumns where name='IsJormalChange' and id=object_id(N'PART'))
alter table PART add 
IsJormalChange
 INTEGER null 
 check (IsJormalChange in ( -1/* Да */
, 0/* Нет */ )) /* Вести журнал изменений */
go
if  not exists(select * from syscolumns where name='UseArchiving' and id=object_id(N'PART'))
alter table PART add 
UseArchiving
 INTEGER null 
 check (UseArchiving in ( -1/* Да */
, 0/* Нет */ )) /* Архивировать вместо удаления */
go
if  not exists(select * from syscolumns where name='integerpkey' and id=object_id(N'PART'))
alter table PART add 
integerpkey
 INTEGER null 
 check (integerpkey in ( -1/* Да */
, 0/* Нет */ )) /* Целочисленный ключ */
go
if  not exists(select * from syscolumns where name='partIconCls' and id=object_id(N'PART'))
alter table PART add 
partIconCls
 VARCHAR (80) null /* Иконка раздела */
go
go
-- drop extra columns from generated table: PART
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PART')
and name not in('OBJECTTYPEID','PARTID','ParentRowid','Sequence','PartType','Caption','Name','the_Comment','NoLog','ManualRegister','OnCreate','OnSave','OnRun','OnDelete','AddBehaivor','ExtenderObject','shablonBrief','ruleBrief','IsJormalChange','UseArchiving','integerpkey','partIconCls')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PART drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PART') and xtype='PK' and type='K')
ALTER TABLE PART DROP CONSTRAINT pk_PART
GO
alter table PART add constraint pk_PART primary key (PARTID)

GO
/*Методы раздела*/
if not exists (select * from sysobjects where id = object_id(N'PARTMENU') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTMENU/*Методы уровня раздела*/ (
PARTID uniqueidentifier not null,
PARTMENUid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='ToolTip' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
ToolTip
 VARCHAR (80) null /* Подсказка */
go
if  not exists(select * from syscolumns where name='the_Action' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
the_Action
 UNIQUEIDENTIFIER null /* Метод */
go
if  not exists(select * from syscolumns where name='IsMenuItem' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
IsMenuItem
 INTEGER null 
 check (IsMenuItem in ( -1/* Да */
, 0/* Нет */ )) /* Включать в меню */
go
if  not exists(select * from syscolumns where name='IsToolBarButton' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
IsToolBarButton
 INTEGER null 
 check (IsToolBarButton in ( -1/* Да */
, 0/* Нет */ )) /* В тулбар */
go
if  not exists(select * from syscolumns where name='HotKey' and id=object_id(N'PARTMENU'))
alter table PARTMENU add 
HotKey
 VARCHAR (20) null /* Горячая клавиша */
go
go
-- drop extra columns from generated table: PARTMENU
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTMENU')
and name not in('PARTID','PARTMENUID','Name','Caption','ToolTip','the_Action','IsMenuItem','IsToolBarButton','HotKey')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTMENU drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTMENU') and xtype='PK' and type='K')
ALTER TABLE PARTMENU DROP CONSTRAINT pk_PARTMENU
GO
alter table PARTMENU add constraint pk_PARTMENU primary key (PARTMENUID)

GO
/*Отображение параметров*/
if not exists (select * from sysobjects where id = object_id(N'PARTPARAMMAP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTPARAMMAP/*отображение значений полей раздела на параметры метода*/ (
PARTMENUID uniqueidentifier not null,
PARTPARAMMAPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='FieldName' and id=object_id(N'PARTPARAMMAP'))
alter table PARTPARAMMAP add 
FieldName
 VARCHAR (255) null /* Поле (значение) */
go
if  not exists(select * from syscolumns where name='ParamName' and id=object_id(N'PARTPARAMMAP'))
alter table PARTPARAMMAP add 
ParamName
 VARCHAR (80) null /* Параметр */
go
if  not exists(select * from syscolumns where name='NoEdit' and id=object_id(N'PARTPARAMMAP'))
alter table PARTPARAMMAP add 
NoEdit
 INTEGER null 
 check (NoEdit in ( -1/* Да */
, 0/* Нет */ )) /* Редактировать параметр нельзя */
go
go
-- drop extra columns from generated table: PARTPARAMMAP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTPARAMMAP')
and name not in('PARTMENUID','PARTPARAMMAPID','FieldName','ParamName','NoEdit')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTPARAMMAP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTPARAMMAP') and xtype='PK' and type='K')
ALTER TABLE PARTPARAMMAP DROP CONSTRAINT pk_PARTPARAMMAP
GO
alter table PARTPARAMMAP add constraint pk_PARTPARAMMAP primary key (PARTPARAMMAPID)

GO
/*Представление*/
if not exists (select * from sysobjects where id = object_id(N'PARTVIEW') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTVIEW/*Вариант представления, который может использоваться для создания журнала*/ (
PARTID uniqueidentifier not null,
PARTVIEWid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
the_Alias
 VARCHAR (64) null /* Псевдоним */
go
if  not exists(select * from syscolumns where name='ForChoose' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
ForChoose
 INTEGER null 
 check (ForChoose in ( -1/* Да */
, 0/* Нет */ )) /* Для поиска */
go
if  not exists(select * from syscolumns where name='FilterField0' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField0
 VARCHAR (255) null /* Поле - фильтр 0 */
go
if  not exists(select * from syscolumns where name='FilterField1' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField1
 VARCHAR (255) null /* Поле - фильтр 1 */
go
if  not exists(select * from syscolumns where name='FilterField2' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField2
 VARCHAR (255) null /* Поле - фильтр 2 */
go
if  not exists(select * from syscolumns where name='FilterField3' and id=object_id(N'PARTVIEW'))
alter table PARTVIEW add 
FilterField3
 VARCHAR (255) null /* Поле - фильтр 3 */
go
go
-- drop extra columns from generated table: PARTVIEW
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTVIEW')
and name not in('PARTID','PARTVIEWID','Name','the_Alias','ForChoose','FilterField0','FilterField1','FilterField2','FilterField3')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTVIEW drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTVIEW') and xtype='PK' and type='K')
ALTER TABLE PARTVIEW DROP CONSTRAINT pk_PARTVIEW
GO
alter table PARTVIEW add constraint pk_PARTVIEW primary key (PARTVIEWID)

GO
/*Колонка*/
if not exists (select * from sysobjects where id = object_id(N'ViewColumn') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ViewColumn/*Колонка пердставления*/ (
PARTVIEWID uniqueidentifier not null,
ViewColumnid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='sequence' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
sequence
 integer null /* № */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='the_Alias' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
the_Alias
 VARCHAR (64) null /* Псвдоним */
go
if  not exists(select * from syscolumns where name='FromPart' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
FromPart
 UNIQUEIDENTIFIER null /* Раздел */
go
if  not exists(select * from syscolumns where name='Field' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Field
 UNIQUEIDENTIFIER null /* Поле */
go
if  not exists(select * from syscolumns where name='Aggregation' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Aggregation
 INTEGER null 
 check (Aggregation in ( 3/* SUM */
, 1/* AVG */
, 6/* CUSTOM */
, 0/* none */
, 2/* COUNT */
, 5/* MAX */
, 4/* MIN */ )) /* Агрегация */
go
if  not exists(select * from syscolumns where name='Expression' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
Expression
 TEXT null /* Формула */
go
if  not exists(select * from syscolumns where name='ForCombo' and id=object_id(N'ViewColumn'))
alter table ViewColumn add 
ForCombo
 INTEGER null 
 check (ForCombo in ( -1/* Да */
, 0/* Нет */ )) /* Для комбо */
go
go
-- drop extra columns from generated table: ViewColumn
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ViewColumn')
and name not in('PARTVIEWID','ViewColumnID','sequence','Name','the_Alias','FromPart','Field','Aggregation','Expression','ForCombo')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ViewColumn drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ViewColumn') and xtype='PK' and type='K')
ALTER TABLE ViewColumn DROP CONSTRAINT pk_ViewColumn
GO
alter table ViewColumn add constraint pk_ViewColumn primary key (ViewColumnID)

GO
/*Связанные представления*/
if not exists (select * from sysobjects where id = object_id(N'PARTVIEW_LNK') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table PARTVIEW_LNK/**/ (
PARTVIEWID uniqueidentifier not null,
PARTVIEW_LNKid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheView' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
TheView
 UNIQUEIDENTIFIER null /* Представление */
go
if  not exists(select * from syscolumns where name='TheJoinSource' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
TheJoinSource
 UNIQUEIDENTIFIER null /* Связь: Поле для join источник */
go
if  not exists(select * from syscolumns where name='RefType' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
RefType
 integer null 
 check (RefType in ( 0/* Нет */
, 4/* Связка ParentStructRowID  (в передлах объекта) */
, 3/* Связка InstanceID (в передлах объекта) */
, 1/* Ссылка на объект */
, 2/* Ссылка на строку */ )) /* Связывать как */
go
if  not exists(select * from syscolumns where name='TheJoinDestination' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
TheJoinDestination
 UNIQUEIDENTIFIER null /* Свзяь: Поле для join приемник */
go
if  not exists(select * from syscolumns where name='HandJoin' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
HandJoin
 VARCHAR (255) null /* Ручной join */
go
if  not exists(select * from syscolumns where name='SEQ' and id=object_id(N'PARTVIEW_LNK'))
alter table PARTVIEW_LNK add 
SEQ
 integer null /* Порядок */
go
go
-- drop extra columns from generated table: PARTVIEW_LNK
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('PARTVIEW_LNK')
and name not in('PARTVIEWID','PARTVIEW_LNKID','TheView','TheJoinSource','RefType','TheJoinDestination','HandJoin','SEQ')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table PARTVIEW_LNK drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_PARTVIEW_LNK') and xtype='PK' and type='K')
ALTER TABLE PARTVIEW_LNK DROP CONSTRAINT pk_PARTVIEW_LNK
GO
alter table PARTVIEW_LNK add constraint pk_PARTVIEW_LNK primary key (PARTVIEW_LNKID)

GO
/*Логика на форме*/
if not exists (select * from sysobjects where id = object_id(N'VALIDATOR') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table VALIDATOR/*Действия в впроцессе редактирования*/ (
PARTID uniqueidentifier not null,
VALIDATORid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'VALIDATOR'))
alter table VALIDATOR add 
Target
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'VALIDATOR'))
alter table VALIDATOR add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: VALIDATOR
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('VALIDATOR')
and name not in('PARTID','VALIDATORID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table VALIDATOR drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_VALIDATOR') and xtype='PK' and type='K')
ALTER TABLE VALIDATOR DROP CONSTRAINT pk_VALIDATOR
GO
alter table VALIDATOR add constraint pk_VALIDATOR primary key (VALIDATORID)

GO
/*Ограничение уникальности*/
if not exists (select * from sysobjects where id = object_id(N'UNIQUECONSTRAINT') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table UNIQUECONSTRAINT/*Ограничение уникальности*/ (
PARTID uniqueidentifier not null,
UNIQUECONSTRAINTid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'UNIQUECONSTRAINT'))
alter table UNIQUECONSTRAINT add 
Name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='PerParent' and id=object_id(N'UNIQUECONSTRAINT'))
alter table UNIQUECONSTRAINT add 
PerParent
 INTEGER null 
 check (PerParent in ( -1/* Да */
, 0/* Нет */ )) /* По родителю */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'UNIQUECONSTRAINT'))
alter table UNIQUECONSTRAINT add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: UNIQUECONSTRAINT
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('UNIQUECONSTRAINT')
and name not in('PARTID','UNIQUECONSTRAINTID','Name','PerParent','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table UNIQUECONSTRAINT drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_UNIQUECONSTRAINT') and xtype='PK' and type='K')
ALTER TABLE UNIQUECONSTRAINT DROP CONSTRAINT pk_UNIQUECONSTRAINT
GO
alter table UNIQUECONSTRAINT add constraint pk_UNIQUECONSTRAINT primary key (UNIQUECONSTRAINTID)

GO
/*Поля ограничения*/
if not exists (select * from sysobjects where id = object_id(N'CONSTRAINTFIELD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table CONSTRAINTFIELD/*Поля ограничения*/ (
UNIQUECONSTRAINTID uniqueidentifier not null,
CONSTRAINTFIELDid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheField' and id=object_id(N'CONSTRAINTFIELD'))
alter table CONSTRAINTFIELD add 
TheField
 UNIQUEIDENTIFIER null /* Поле */
go
go
-- drop extra columns from generated table: CONSTRAINTFIELD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('CONSTRAINTFIELD')
and name not in('UNIQUECONSTRAINTID','CONSTRAINTFIELDID','TheField')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table CONSTRAINTFIELD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_CONSTRAINTFIELD') and xtype='PK' and type='K')
ALTER TABLE CONSTRAINTFIELD DROP CONSTRAINT pk_CONSTRAINTFIELD
GO
alter table CONSTRAINTFIELD add constraint pk_CONSTRAINTFIELD primary key (CONSTRAINTFIELDID)

GO
/*Интерфейсы расширения*/
if not exists (select * from sysobjects where id = object_id(N'ExtenderInterface') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ExtenderInterface/**/ (
PARTID uniqueidentifier not null,
ExtenderInterfaceid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheName' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TheName
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TargetPlatform' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TargetPlatform
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='TheObject' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TheObject
 VARCHAR (255) null /* Объект */
go
if  not exists(select * from syscolumns where name='TheConfig' and id=object_id(N'ExtenderInterface'))
alter table ExtenderInterface add 
TheConfig
 VARCHAR (512) null /* Конфиг */
go
go
-- drop extra columns from generated table: ExtenderInterface
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ExtenderInterface')
and name not in('PARTID','ExtenderInterfaceID','TheName','TargetPlatform','TheObject','TheConfig')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ExtenderInterface drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ExtenderInterface') and xtype='PK' and type='K')
ALTER TABLE ExtenderInterface DROP CONSTRAINT pk_ExtenderInterface
GO
alter table ExtenderInterface add constraint pk_ExtenderInterface primary key (ExtenderInterfaceID)

GO
/*Поле*/
if not exists (select * from sysobjects where id = object_id(N'FIELD') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELD/*Поле*/ (
PARTID uniqueidentifier not null,
FIELDid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TabName' and id=object_id(N'FIELD'))
alter table FIELD add 
TabName
 VARCHAR (60) null /* Имя вкладки */
go
if  not exists(select * from syscolumns where name='FieldGroupBox' and id=object_id(N'FIELD'))
alter table FIELD add 
FieldGroupBox
 VARCHAR (60) null /* Имя группы */
go
if  not exists(select * from syscolumns where name='Sequence' and id=object_id(N'FIELD'))
alter table FIELD add 
Sequence
 integer null /* № п/п */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FIELD'))
alter table FIELD add 
Caption
 VARCHAR (80) null /* Надпись */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FIELD'))
alter table FIELD add 
Name
 VARCHAR (64) null /* Имя поля */
go
if  not exists(select * from syscolumns where name='FieldType' and id=object_id(N'FIELD'))
alter table FIELD add 
FieldType
 UNIQUEIDENTIFIER null /* Тип поля */
go
if  not exists(select * from syscolumns where name='IsBrief' and id=object_id(N'FIELD'))
alter table FIELD add 
IsBrief
 INTEGER null 
 check (IsBrief in ( -1/* Да */
, 0/* Нет */ )) /* Краткая информация */
go
if  not exists(select * from syscolumns where name='IsTabBrief' and id=object_id(N'FIELD'))
alter table FIELD add 
IsTabBrief
 INTEGER null 
 check (IsTabBrief in ( -1/* Да */
, 0/* Нет */ )) /* Для отображения в таблице */
go
if  not exists(select * from syscolumns where name='AllowNull' and id=object_id(N'FIELD'))
alter table FIELD add 
AllowNull
 INTEGER null 
 check (AllowNull in ( -1/* Да */
, 0/* Нет */ )) /* Может быть пустым */
go
if  not exists(select * from syscolumns where name='DataSize' and id=object_id(N'FIELD'))
alter table FIELD add 
DataSize
 integer null /* Размер поля */
go
if  not exists(select * from syscolumns where name='ReferenceType' and id=object_id(N'FIELD'))
alter table FIELD add 
ReferenceType
 INTEGER null 
 check (ReferenceType in ( 3/* На источник данных */
, 0/* Скалярное поле ( не ссылка) */
, 2/* На строку раздела */
, 1/* На объект  */ )) /* Тип ссылки */
go
if  not exists(select * from syscolumns where name='RefToType' and id=object_id(N'FIELD'))
alter table FIELD add 
RefToType
 UNIQUEIDENTIFIER null /* Ссылка на тип */
go
if  not exists(select * from syscolumns where name='RefToPart' and id=object_id(N'FIELD'))
alter table FIELD add 
RefToPart
 UNIQUEIDENTIFIER null /* Ссылка на раздел */
go
if  not exists(select * from syscolumns where name='TheStyle' and id=object_id(N'FIELD'))
alter table FIELD add 
TheStyle
 VARCHAR (50) null /* Стиль */
go
if  not exists(select * from syscolumns where name='InternalReference' and id=object_id(N'FIELD'))
alter table FIELD add 
InternalReference
 INTEGER null 
 check (InternalReference in ( -1/* Да */
, 0/* Нет */ )) /* Ссылка в пределах объекта */
go
if  not exists(select * from syscolumns where name='CreateRefOnly' and id=object_id(N'FIELD'))
alter table FIELD add 
CreateRefOnly
 INTEGER null 
 check (CreateRefOnly in ( -1/* Да */
, 0/* Нет */ )) /* Только создание объекта */
go
if  not exists(select * from syscolumns where name='IsAutoNumber' and id=object_id(N'FIELD'))
alter table FIELD add 
IsAutoNumber
 INTEGER null 
 check (IsAutoNumber in ( -1/* Да */
, 0/* Нет */ )) /* Автонумерация */
go
if  not exists(select * from syscolumns where name='TheNumerator' and id=object_id(N'FIELD'))
alter table FIELD add 
TheNumerator
 UNIQUEIDENTIFIER null /* Нумератор */
go
if  not exists(select * from syscolumns where name='ZoneTemplate' and id=object_id(N'FIELD'))
alter table FIELD add 
ZoneTemplate
 VARCHAR (255) null /* Шаблон зоны нумерации */
go
if  not exists(select * from syscolumns where name='NumberDateField' and id=object_id(N'FIELD'))
alter table FIELD add 
NumberDateField
 UNIQUEIDENTIFIER null /* Поле для расчета даты */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'FIELD'))
alter table FIELD add 
TheComment
 TEXT null /* Описание */
go
if  not exists(select * from syscolumns where name='shablonBrief' and id=object_id(N'FIELD'))
alter table FIELD add 
shablonBrief
 VARCHAR (100) null /* Шаблон для краткого отображения */
go
if  not exists(select * from syscolumns where name='theNameClass' and id=object_id(N'FIELD'))
alter table FIELD add 
theNameClass
 VARCHAR (100) null /* Имя класса для мастера строк */
go
if  not exists(select * from syscolumns where name='TheMask' and id=object_id(N'FIELD'))
alter table FIELD add 
TheMask
 VARCHAR (64) null /* Маска */
go
go
-- drop extra columns from generated table: FIELD
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELD')
and name not in('PARTID','FIELDID','TabName','FieldGroupBox','Sequence','Caption','Name','FieldType','IsBrief','IsTabBrief','AllowNull','DataSize','ReferenceType','RefToType','RefToPart','TheStyle','InternalReference','CreateRefOnly','IsAutoNumber','TheNumerator','ZoneTemplate','NumberDateField','TheComment','shablonBrief','theNameClass','TheMask')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELD drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELD') and xtype='PK' and type='K')
ALTER TABLE FIELD DROP CONSTRAINT pk_FIELD
GO
alter table FIELD add constraint pk_FIELD primary key (FIELDID)

GO
/*Интерфейсы расширения*/
if not exists (select * from sysobjects where id = object_id(N'FldExtenders') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FldExtenders/**/ (
FIELDID uniqueidentifier not null,
FldExtendersid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheName' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TheName
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='TargetPlatform' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TargetPlatform
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='TheObject' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TheObject
 VARCHAR (255) null /* Объект */
go
if  not exists(select * from syscolumns where name='TheConfig' and id=object_id(N'FldExtenders'))
alter table FldExtenders add 
TheConfig
 VARCHAR (512) null /* Конфиг */
go
go
-- drop extra columns from generated table: FldExtenders
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FldExtenders')
and name not in('FIELDID','FldExtendersID','TheName','TargetPlatform','TheObject','TheConfig')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FldExtenders drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FldExtenders') and xtype='PK' and type='K')
ALTER TABLE FldExtenders DROP CONSTRAINT pk_FldExtenders
GO
alter table FldExtenders add constraint pk_FldExtenders primary key (FldExtendersID)

GO
/*Описание источника данных*/
if not exists (select * from sysobjects where id = object_id(N'FIELDSRCDEF') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDSRCDEF/*Описание источника данных для полей типа ReferenceSQL */ (
FIELDID uniqueidentifier not null,
FIELDSRCDEFid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Provider' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
Provider
 VARCHAR (128) null /* Провайдер */
go
if  not exists(select * from syscolumns where name='ConnectionString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
ConnectionString
 VARCHAR (512) null /* Строка соединения с источником */
go
if  not exists(select * from syscolumns where name='DataSource' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
DataSource
 VARCHAR (512) null /* Источник данных */
go
if  not exists(select * from syscolumns where name='IDField' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
IDField
 VARCHAR (128) null /* ID */
go
if  not exists(select * from syscolumns where name='BriefString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
BriefString
 VARCHAR (512) null /* Источник краткой информации */
go
if  not exists(select * from syscolumns where name='FilterString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
FilterString
 VARCHAR (512) null /* Фильтр источника данных */
go
if  not exists(select * from syscolumns where name='SortField' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
SortField
 VARCHAR (512) null /* Сортировка источника данных */
go
if  not exists(select * from syscolumns where name='DescriptionString' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
DescriptionString
 TEXT null /* Примечания */
go
if  not exists(select * from syscolumns where name='DontShowDialog' and id=object_id(N'FIELDSRCDEF'))
alter table FIELDSRCDEF add 
DontShowDialog
 integer null 
 check (DontShowDialog in ( 1/* Да */
, 0/* Нет */ )) /* Не показывать форму выбора */
go
go
-- drop extra columns from generated table: FIELDSRCDEF
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDSRCDEF')
and name not in('FIELDID','FIELDSRCDEFID','Provider','ConnectionString','DataSource','IDField','BriefString','FilterString','SortField','DescriptionString','DontShowDialog')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDSRCDEF drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDSRCDEF') and xtype='PK' and type='K')
ALTER TABLE FIELDSRCDEF DROP CONSTRAINT pk_FIELDSRCDEF
GO
alter table FIELDSRCDEF add constraint pk_FIELDSRCDEF primary key (FIELDSRCDEFID)

GO
/*Динамический фильтр*/
if not exists (select * from sysobjects where id = object_id(N'DINAMICFILTERSCRIPT') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table DINAMICFILTERSCRIPT/*Выражение для построения дополнительного фильтра для ссылочных полей*/ (
FIELDID uniqueidentifier not null,
DINAMICFILTERSCRIPTid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'DINAMICFILTERSCRIPT'))
alter table DINAMICFILTERSCRIPT add 
Target
 UNIQUEIDENTIFIER null /* Целевая платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'DINAMICFILTERSCRIPT'))
alter table DINAMICFILTERSCRIPT add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: DINAMICFILTERSCRIPT
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('DINAMICFILTERSCRIPT')
and name not in('FIELDID','DINAMICFILTERSCRIPTID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table DINAMICFILTERSCRIPT drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_DINAMICFILTERSCRIPT') and xtype='PK' and type='K')
ALTER TABLE DINAMICFILTERSCRIPT DROP CONSTRAINT pk_DINAMICFILTERSCRIPT
GO
alter table DINAMICFILTERSCRIPT add constraint pk_DINAMICFILTERSCRIPT primary key (DINAMICFILTERSCRIPTID)

GO
/*Значение по умолчанию*/
if not exists (select * from sysobjects where id = object_id(N'FIELDEXPRESSION') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDEXPRESSION/*Выражение для вычисления поля
или значение по умолчанию*/ (
FIELDID uniqueidentifier not null,
FIELDEXPRESSIONid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'FIELDEXPRESSION'))
alter table FIELDEXPRESSION add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'FIELDEXPRESSION'))
alter table FIELDEXPRESSION add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: FIELDEXPRESSION
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDEXPRESSION')
and name not in('FIELDID','FIELDEXPRESSIONID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDEXPRESSION drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDEXPRESSION') and xtype='PK' and type='K')
ALTER TABLE FIELDEXPRESSION DROP CONSTRAINT pk_FIELDEXPRESSION
GO
alter table FIELDEXPRESSION add constraint pk_FIELDEXPRESSION primary key (FIELDEXPRESSIONID)

GO
/*Логика поля на форме*/
if not exists (select * from sysobjects where id = object_id(N'FIELDVALIDATOR') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDVALIDATOR/*Логика взаимосвязей на форме при изменении поля*/ (
FIELDID uniqueidentifier not null,
FIELDVALIDATORid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Target' and id=object_id(N'FIELDVALIDATOR'))
alter table FIELDVALIDATOR add 
Target
 UNIQUEIDENTIFIER null /* Платформа */
go
if  not exists(select * from syscolumns where name='Code' and id=object_id(N'FIELDVALIDATOR'))
alter table FIELDVALIDATOR add 
Code
 TEXT null /* Скрипт */
go
go
-- drop extra columns from generated table: FIELDVALIDATOR
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDVALIDATOR')
and name not in('FIELDID','FIELDVALIDATORID','Target','Code')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDVALIDATOR drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDVALIDATOR') and xtype='PK' and type='K')
ALTER TABLE FIELDVALIDATOR DROP CONSTRAINT pk_FIELDVALIDATOR
GO
alter table FIELDVALIDATOR add constraint pk_FIELDVALIDATOR primary key (FIELDVALIDATORID)

GO
/*Методы поля*/
if not exists (select * from sysobjects where id = object_id(N'FIELDMENU') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDMENU/*Методы, ассоциированные с полем*/ (
FIELDID uniqueidentifier not null,
FIELDMENUid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
Name
 VARCHAR (64) null /* Название */
go
if  not exists(select * from syscolumns where name='Caption' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
Caption
 VARCHAR (80) null /* Заголовок */
go
if  not exists(select * from syscolumns where name='ToolTip' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
ToolTip
 VARCHAR (80) null /* Подсказка */
go
if  not exists(select * from syscolumns where name='ActionID' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
ActionID
 UNIQUEIDENTIFIER null /* Идентификатор вызываемого метода */
go
if  not exists(select * from syscolumns where name='IsMenuItem' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
IsMenuItem
 INTEGER null 
 check (IsMenuItem in ( -1/* Да */
, 0/* Нет */ )) /* В меню */
go
if  not exists(select * from syscolumns where name='IsToolBarButton' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
IsToolBarButton
 INTEGER null 
 check (IsToolBarButton in ( -1/* Да */
, 0/* Нет */ )) /* В тулбар */
go
if  not exists(select * from syscolumns where name='HotKey' and id=object_id(N'FIELDMENU'))
alter table FIELDMENU add 
HotKey
 VARCHAR (20) null /* Горячая клавиша */
go
go
-- drop extra columns from generated table: FIELDMENU
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDMENU')
and name not in('FIELDID','FIELDMENUID','Name','Caption','ToolTip','ActionID','IsMenuItem','IsToolBarButton','HotKey')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDMENU drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDMENU') and xtype='PK' and type='K')
ALTER TABLE FIELDMENU DROP CONSTRAINT pk_FIELDMENU
GO
alter table FIELDMENU add constraint pk_FIELDMENU primary key (FIELDMENUID)

GO
/*Отображение параметров*/
if not exists (select * from sysobjects where id = object_id(N'FIELDPARAMMAP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table FIELDPARAMMAP/*Отображение значений на параметры метода*/ (
FIELDMENUID uniqueidentifier not null,
FIELDPARAMMAPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='FieldName' and id=object_id(N'FIELDPARAMMAP'))
alter table FIELDPARAMMAP add 
FieldName
 VARCHAR (255) null /* Поле (значение) */
go
if  not exists(select * from syscolumns where name='ParamName' and id=object_id(N'FIELDPARAMMAP'))
alter table FIELDPARAMMAP add 
ParamName
 VARCHAR (80) null /* Параметр */
go
if  not exists(select * from syscolumns where name='NoEdit' and id=object_id(N'FIELDPARAMMAP'))
alter table FIELDPARAMMAP add 
NoEdit
 INTEGER null 
 check (NoEdit in ( -1/* Да */
, 0/* Нет */ )) /* Редактировать параметр нельзя */
go
go
-- drop extra columns from generated table: FIELDPARAMMAP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('FIELDPARAMMAP')
and name not in('FIELDMENUID','FIELDPARAMMAPID','FieldName','ParamName','NoEdit')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table FIELDPARAMMAP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_FIELDPARAMMAP') and xtype='PK' and type='K')
ALTER TABLE FIELDPARAMMAP DROP CONSTRAINT pk_FIELDPARAMMAP
GO
alter table FIELDPARAMMAP add constraint pk_FIELDPARAMMAP primary key (FIELDPARAMMAPID)

GO
/*Приложение*/
if not exists (select * from sysobjects where id = object_id(N'MTZAPP') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table MTZAPP/*Группа взаимосвязных документов*/ (
MTZAPPid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'MTZAPP'))
alter table MTZAPP add 
Name
 VARCHAR (255) null /* Название */
go
if  not exists(select * from syscolumns where name='DBName' and id=object_id(N'MTZAPP'))
alter table MTZAPP add 
DBName
 VARCHAR (64) null /* База данных */
go
if  not exists(select * from syscolumns where name='TheComment' and id=object_id(N'MTZAPP'))
alter table MTZAPP add 
TheComment
 TEXT null /* Описание */
go
go
-- drop extra columns from generated table: MTZAPP
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('MTZAPP')
and name not in('MTZAPPID','Name','DBName','TheComment')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table MTZAPP drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_MTZAPP') and xtype='PK' and type='K')
ALTER TABLE MTZAPP DROP CONSTRAINT pk_MTZAPP
GO
alter table MTZAPP add constraint pk_MTZAPP primary key (MTZAPPID)

GO
/*Обязательные приложения*/
if not exists (select * from sysobjects where id = object_id(N'ParentPackage') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table ParentPackage/*Приложения от которых зависит данное приложение*/ (
MTZAPPID uniqueidentifier not null,
ParentPackageid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Package' and id=object_id(N'ParentPackage'))
alter table ParentPackage add 
Package
 UNIQUEIDENTIFIER null /* Приложение */
go
go
-- drop extra columns from generated table: ParentPackage
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('ParentPackage')
and name not in('MTZAPPID','ParentPackageID','Package')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table ParentPackage drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_ParentPackage') and xtype='PK' and type='K')
ALTER TABLE ParentPackage DROP CONSTRAINT pk_ParentPackage
GO
alter table ParentPackage add constraint pk_ParentPackage primary key (ParentPackageID)

GO
/* TYPE=MTZSystem (Спец.: Системные данные) */
GO
/*Сессия пользователя*/
if not exists (select * from sysobjects where id = object_id(N'the_Session') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table the_Session/*Зарегистрированные сессии пользователей*/ (
the_Sessionid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='ApplicationID' and id=object_id(N'the_Session'))
alter table the_Session add 
ApplicationID
 UNIQUEIDENTIFIER null /* Приложение */
go
if  not exists(select * from syscolumns where name='UserRole' and id=object_id(N'the_Session'))
alter table the_Session add 
UserRole
 UNIQUEIDENTIFIER null /* Текущая роль пользователя */
go
if  not exists(select * from syscolumns where name='ClosedAt' and id=object_id(N'the_Session'))
alter table the_Session add 
ClosedAt
 DATETIME null /* Момент закрытия */
go
if  not exists(select * from syscolumns where name='Closed' and id=object_id(N'the_Session'))
alter table the_Session add 
Closed
 integer null 
 check (Closed in ( 1/* Да */
, 0/* Нет */ )) /* Закрыта */
go
if  not exists(select * from syscolumns where name='Usersid' and id=object_id(N'the_Session'))
alter table the_Session add 
Usersid
 UNIQUEIDENTIFIER null /* Пользователь */
go
if  not exists(select * from syscolumns where name='LastAccess' and id=object_id(N'the_Session'))
alter table the_Session add 
LastAccess
 DATETIME null /* Последнее подтверждение */
go
if  not exists(select * from syscolumns where name='StartAt' and id=object_id(N'the_Session'))
alter table the_Session add 
StartAt
 DATETIME null /* Момент открытия */
go
if  not exists(select * from syscolumns where name='Lang' and id=object_id(N'the_Session'))
alter table the_Session add 
Lang
 VARCHAR (25) null /* Локализация */
go
if  not exists(select * from syscolumns where name='Login' and id=object_id(N'the_Session'))
alter table the_Session add 
Login
 VARCHAR (255) null /* Login */
go
go
-- drop extra columns from generated table: the_Session
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('the_Session')
and name not in('the_SessionID','ApplicationID','UserRole','ClosedAt','Closed','Usersid','LastAccess','StartAt','Lang','Login')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table the_Session drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_the_Session') and xtype='PK' and type='K')
ALTER TABLE the_Session DROP CONSTRAINT pk_the_Session
GO
alter table the_Session add constraint pk_the_Session primary key (the_SessionID)

GO
/*Разрешенные владельцы*/
if not exists (select * from sysobjects where id = object_id(N'SysRefCache') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SysRefCache/*владельцы информации для к объектам которых
разрешен достуа для  текущей сесии*/ (
SysRefCacheid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='CacheType' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
CacheType
 integer null 
 check (CacheType in ( 4/* Space */
, 3/* Mark */
, 2/* Odd */
, 0/* None */
, 1/* Even */ )) /* Тип кеширования */
go
if  not exists(select * from syscolumns where name='ObjectOwnerID' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
ObjectOwnerID
 uniqueidentifier null /* Идентификатор владельца */
go
if  not exists(select * from syscolumns where name='SessionID' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
SessionID
 UNIQUEIDENTIFIER null /* Сессия */
go
if  not exists(select * from syscolumns where name='modulename' and id=object_id(N'SysRefCache'))
alter table SysRefCache add 
modulename
 VARCHAR (40) null /* модуль */
go
go
-- drop extra columns from generated table: SysRefCache
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SysRefCache')
and name not in('SysRefCacheID','CacheType','ObjectOwnerID','SessionID','modulename')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SysRefCache drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SysRefCache') and xtype='PK' and type='K')
ALTER TABLE SysRefCache DROP CONSTRAINT pk_SysRefCache
GO
alter table SysRefCache add constraint pk_SysRefCache primary key (SysRefCacheID)

GO
/*Журнал событий*/
if not exists (select * from sysobjects where id = object_id(N'SysLog') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table SysLog/*Журнал событий, которые произошли в системе*/ (
SysLogid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheSession' and id=object_id(N'SysLog'))
alter table SysLog add 
TheSession
 UNIQUEIDENTIFIER null /* Сессия */
go
if  not exists(select * from syscolumns where name='the_Resource' and id=object_id(N'SysLog'))
alter table SysLog add 
the_Resource
 VARCHAR (255) null /* Ресурс */
go
if  not exists(select * from syscolumns where name='LogStructID' and id=object_id(N'SysLog'))
alter table SysLog add 
LogStructID
 VARCHAR (255) null /* Раздел с которым происхоит действие */
go
if  not exists(select * from syscolumns where name='VERB' and id=object_id(N'SysLog'))
alter table SysLog add 
VERB
 VARCHAR (80) null /* Действие */
go
if  not exists(select * from syscolumns where name='LogInstanceID' and id=object_id(N'SysLog'))
alter table SysLog add 
LogInstanceID
 uniqueidentifier null /* Идентификатор документа */
go
go
-- drop extra columns from generated table: SysLog
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('SysLog')
and name not in('SysLogID','TheSession','the_Resource','LogStructID','VERB','LogInstanceID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table SysLog drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_SysLog') and xtype='PK' and type='K')
ALTER TABLE SysLog DROP CONSTRAINT pk_SysLog
GO
alter table SysLog add constraint pk_SysLog primary key (SysLogID)

GO
/* TYPE=invd (Справочник) */
GO
/*Отдел*/
if not exists (select * from sysobjects where id = object_id(N'invd_dep') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_dep/**/ (
invd_depid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_dep'))
alter table invd_dep add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_dep
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_dep')
and name not in('invd_depID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_dep drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_dep') and xtype='PK' and type='K')
ALTER TABLE invd_dep DROP CONSTRAINT pk_invd_dep
GO
alter table invd_dep add constraint pk_invd_dep primary key (invd_depID)

GO
/*Машина*/
if not exists (select * from sysobjects where id = object_id(N'invd_machine') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_machine/**/ (
invd_machineid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_machine'))
alter table invd_machine add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_machine
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_machine')
and name not in('invd_machineID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_machine drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_machine') and xtype='PK' and type='K')
ALTER TABLE invd_machine DROP CONSTRAINT pk_invd_machine
GO
alter table invd_machine add constraint pk_invd_machine primary key (invd_machineID)

GO
/*Зона склада*/
if not exists (select * from sysobjects where id = object_id(N'invd_zone') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_zone/**/ (
invd_zoneid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_zone'))
alter table invd_zone add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_zone
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_zone')
and name not in('invd_zoneID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_zone drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_zone') and xtype='PK' and type='K')
ALTER TABLE invd_zone DROP CONSTRAINT pk_invd_zone
GO
alter table invd_zone add constraint pk_invd_zone primary key (invd_zoneID)

GO
/* TYPE=MTZUsers (Справочник: пользователи) */
GO
/*Пользователи*/
if not exists (select * from sysobjects where id = object_id(N'Users') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Users/*Пользователи*/ (
Usersid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Family' and id=object_id(N'Users'))
alter table Users add 
Family
 VARCHAR (255) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Users'))
alter table Users add 
Name
 VARCHAR (64) null /* Имя */
go
if  not exists(select * from syscolumns where name='SurName' and id=object_id(N'Users'))
alter table Users add 
SurName
 VARCHAR (255) null /* Отчество */
go
if  not exists(select * from syscolumns where name='Login' and id=object_id(N'Users'))
alter table Users add 
Login
 VARCHAR (64) null /* Имя для входа */
go
if  not exists(select * from syscolumns where name='Password' and id=object_id(N'Users'))
alter table Users add 
Password varchar(80) null /* Пароль */
go
if  not exists(select * from syscolumns where name='DomaiName' and id=object_id(N'Users'))
alter table Users add 
DomaiName
 VARCHAR (255) null /* Доменное имя */
go
if  not exists(select * from syscolumns where name='EMail' and id=object_id(N'Users'))
alter table Users add 
EMail varchar(255) null /* e-mail */
go
if  not exists(select * from syscolumns where name='Phone' and id=object_id(N'Users'))
alter table Users add 
Phone
 VARCHAR (20) null /* Телефон */
go
if  not exists(select * from syscolumns where name='LocalPhone' and id=object_id(N'Users'))
alter table Users add 
LocalPhone
 VARCHAR (20) null /* Местный телефон */
go
go
-- drop extra columns from generated table: Users
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Users')
and name not in('UsersID','Family','Name','SurName','Login','Password','DomaiName','EMail','Phone','LocalPhone')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Users drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Users') and xtype='PK' and type='K')
ALTER TABLE Users DROP CONSTRAINT pk_Users
GO
alter table Users add constraint pk_Users primary key (UsersID)

GO
/*Группы*/
if not exists (select * from sysobjects where id = object_id(N'Groups') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table Groups/*Группы*/ (
Groupsid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='Name' and id=object_id(N'Groups'))
alter table Groups add 
Name
 VARCHAR (80) null /* Название */
go
if  not exists(select * from syscolumns where name='ADGroup' and id=object_id(N'Groups'))
alter table Groups add 
ADGroup
 VARCHAR (255) null /* Группа AD */
go
go
-- drop extra columns from generated table: Groups
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('Groups')
and name not in('GroupsID','Name','ADGroup')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table Groups drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_Groups') and xtype='PK' and type='K')
ALTER TABLE Groups DROP CONSTRAINT pk_Groups
GO
alter table Groups add constraint pk_Groups primary key (GroupsID)

GO
/*Состав группы*/
if not exists (select * from sysobjects where id = object_id(N'GroupUser') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table GroupUser/*Состав группы*/ (
GroupsID uniqueidentifier not null,
GroupUserid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='TheUser' and id=object_id(N'GroupUser'))
alter table GroupUser add 
TheUser
 UNIQUEIDENTIFIER null /* Пользователь */
go
go
-- drop extra columns from generated table: GroupUser
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('GroupUser')
and name not in('GroupsID','GroupUserID','TheUser')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table GroupUser drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_GroupUser') and xtype='PK' and type='K')
ALTER TABLE GroupUser DROP CONSTRAINT pk_GroupUser
GO
alter table GroupUser add constraint pk_GroupUser primary key (GroupUserID)

GO
/* TYPE=invwh (Структура склада) */
GO
/*Стеллаж*/
if not exists (select * from sysobjects where id = object_id(N'invwh_loc') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invwh_loc/**/ (
invwh_locid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invwh_loc'))
alter table invwh_loc add 
name
 VARCHAR (120) null /* Название */
go
if  not exists(select * from syscolumns where name='whZone' and id=object_id(N'invwh_loc'))
alter table invwh_loc add 
whZone
 UNIQUEIDENTIFIER null /* Зона */
go
go
-- drop extra columns from generated table: invwh_loc
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invwh_loc')
and name not in('invwh_locID','name','whZone')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invwh_loc drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invwh_loc') and xtype='PK' and type='K')
ALTER TABLE invwh_loc DROP CONSTRAINT pk_invwh_loc
GO
alter table invwh_loc add constraint pk_invwh_loc primary key (invwh_locID)

GO
/*Ячейка*/
if not exists (select * from sysobjects where id = object_id(N'invwh_cell') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invwh_cell/**/ (
invwh_cellid uniqueidentifier not null rowguidcol default ( newid())  
,invwh_locID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invwh_cell'))
alter table invwh_cell add 
name
 VARCHAR (120) null /* Название */
go
if  not exists(select * from syscolumns where name='SHCODE' and id=object_id(N'invwh_cell'))
alter table invwh_cell add 
SHCODE
 VARCHAR (64) null /* Штрихкод ячейки */
go
go
-- drop extra columns from generated table: invwh_cell
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invwh_cell')
and name not in('invwh_cellID','invwh_locID','name','SHCODE')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invwh_cell drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invwh_cell') and xtype='PK' and type='K')
ALTER TABLE invwh_cell DROP CONSTRAINT pk_invwh_cell
GO
alter table invwh_cell add constraint pk_invwh_cell primary key (invwh_cellID)

GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--ForeignKey" BlockCode=" 
if exists(select * from sysobjects where id=object_id(N'fk_833dc00be8d74d9191032dd084befc1e') and type='F')
ALTER TABLE Num_Values DROP CONSTRAINT fk_833dc00be8d74d9191032dd084befc1e
GO
alter table Num_Values add constraint fk_833dc00be8d74d9191032dd084befc1e foreign key(Num_zonesID) references Num_zones (Num_zonesID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_c2763400be344033b4b5756cd5252cea') and type='F')
ALTER TABLE ARMJRNLREP DROP CONSTRAINT fk_c2763400be344033b4b5756cd5252cea
GO
alter table ARMJRNLREP add constraint fk_c2763400be344033b4b5756cd5252cea foreign key(ARMJournalID) references ARMJournal (ARMJournalID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_4fe8318100a54b599413d06318a119d4') and type='F')
ALTER TABLE ARMJRNLRUN DROP CONSTRAINT fk_4fe8318100a54b599413d06318a119d4
GO
alter table ARMJRNLRUN add constraint fk_4fe8318100a54b599413d06318a119d4 foreign key(ARMJournalID) references ARMJournal (ARMJournalID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f837abedcae9430a9dee519dbb1b79d5') and type='F')
ALTER TABLE ARMJRNLADD DROP CONSTRAINT fk_f837abedcae9430a9dee519dbb1b79d5
GO
alter table ARMJRNLADD add constraint fk_f837abedcae9430a9dee519dbb1b79d5 foreign key(ARMJournalID) references ARMJournal (ARMJournalID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_d407359f220449699789956215e456e6') and type='F')
ALTER TABLE EPFilterLink DROP CONSTRAINT fk_d407359f220449699789956215e456e6
GO
alter table EPFilterLink add constraint fk_d407359f220449699789956215e456e6 foreign key(EntryPointsID) references EntryPoints (EntryPointsID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_8d8c85ebd15e45d7b13b0b4001eb9ac2') and type='F')
ALTER TABLE JColumnSource DROP CONSTRAINT fk_8d8c85ebd15e45d7b13b0b4001eb9ac2
GO
alter table JColumnSource add constraint fk_8d8c85ebd15e45d7b13b0b4001eb9ac2 foreign key(JournalColumnID) references JournalColumn (JournalColumnID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0c77d0de559e43fcb181156e126543f1') and type='F')
ALTER TABLE RPTFields DROP CONSTRAINT fk_0c77d0de559e43fcb181156e126543f1
GO
alter table RPTFields add constraint fk_0c77d0de559e43fcb181156e126543f1 foreign key(RPTStructID) references RPTStruct (RPTStructID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f4b3740ce6764b6ea833ede44cb9fa63') and type='F')
ALTER TABLE FileterField DROP CONSTRAINT fk_f4b3740ce6764b6ea833ede44cb9fa63
GO
alter table FileterField add constraint fk_f4b3740ce6764b6ea833ede44cb9fa63 foreign key(FilterFieldGroupID) references FilterFieldGroup (FilterFieldGroupID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efb9512711d58822204c4f4f5020') and type='F')
ALTER TABLE GENERATOR_TARGET DROP CONSTRAINT fk_0670efb9512711d58822204c4f4f5020
GO
alter table GENERATOR_TARGET add constraint fk_0670efb9512711d58822204c4f4f5020 foreign key(GENPACKAGEID) references GENPACKAGE (GENPACKAGEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_673e809bcff64309a52bfe2118ae508e') and type='F')
ALTER TABLE GENREFERENCE DROP CONSTRAINT fk_673e809bcff64309a52bfe2118ae508e
GO
alter table GENREFERENCE add constraint fk_673e809bcff64309a52bfe2118ae508e foreign key(GENERATOR_TARGETID) references GENERATOR_TARGET (GENERATOR_TARGETID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_766993ca7de64ada82168bddf2b0588e') and type='F')
ALTER TABLE GENMANUALCODE DROP CONSTRAINT fk_766993ca7de64ada82168bddf2b0588e
GO
alter table GENMANUALCODE add constraint fk_766993ca7de64ada82168bddf2b0588e foreign key(GENERATOR_TARGETID) references GENERATOR_TARGET (GENERATOR_TARGETID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_04b31cfb6525474a9f16999870d8eaaf') and type='F')
ALTER TABLE GENCONTROLS DROP CONSTRAINT fk_04b31cfb6525474a9f16999870d8eaaf
GO
alter table GENCONTROLS add constraint fk_04b31cfb6525474a9f16999870d8eaaf foreign key(GENERATOR_TARGETID) references GENERATOR_TARGET (GENERATOR_TARGETID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_35f46d2361f8413b924f83792f76e698') and type='F')
ALTER TABLE ENUMITEM DROP CONSTRAINT fk_35f46d2361f8413b924f83792f76e698
GO
alter table ENUMITEM add constraint fk_35f46d2361f8413b924f83792f76e698 foreign key(FIELDTYPEID) references FIELDTYPE (FIELDTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efa6512711d58822204c4f4f5020') and type='F')
ALTER TABLE FIELDTYPEMAP DROP CONSTRAINT fk_0670efa6512711d58822204c4f4f5020
GO
alter table FIELDTYPEMAP add constraint fk_0670efa6512711d58822204c4f4f5020 foreign key(FIELDTYPEID) references FIELDTYPE (FIELDTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efa3512711d58822204c4f4f5020') and type='F')
ALTER TABLE SCRIPT DROP CONSTRAINT fk_0670efa3512711d58822204c4f4f5020
GO
alter table SCRIPT add constraint fk_0670efa3512711d58822204c4f4f5020 foreign key(SHAREDMETHODID) references SHAREDMETHOD (SHAREDMETHODID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_e598e74ca9de404186fa972e95635600') and type='F')
ALTER TABLE PARAMETERS DROP CONSTRAINT fk_e598e74ca9de404186fa972e95635600
GO
alter table PARAMETERS add constraint fk_e598e74ca9de404186fa972e95635600 foreign key(SCRIPTID) references SCRIPT (SCRIPTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_df46c86638f84ef192e25f899d98bd16') and type='F')
ALTER TABLE OBJSTATUS DROP CONSTRAINT fk_df46c86638f84ef192e25f899d98bd16
GO
alter table OBJSTATUS add constraint fk_df46c86638f84ef192e25f899d98bd16 foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_11c1a17929b24ddcbdb71eb21d2ff878') and type='F')
ALTER TABLE NEXTSTATE DROP CONSTRAINT fk_11c1a17929b24ddcbdb71eb21d2ff878
GO
alter table NEXTSTATE add constraint fk_11c1a17929b24ddcbdb71eb21d2ff878 foreign key(OBJSTATUSID) references OBJSTATUS (OBJSTATUSID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_1168296da01c45dbb67d76a07f3ff64c') and type='F')
ALTER TABLE OBJECTMODE DROP CONSTRAINT fk_1168296da01c45dbb67d76a07f3ff64c
GO
alter table OBJECTMODE add constraint fk_1168296da01c45dbb67d76a07f3ff64c foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f448ac333b13489993ee47d3d62962ec') and type='F')
ALTER TABLE STRUCTRESTRICTION DROP CONSTRAINT fk_f448ac333b13489993ee47d3d62962ec
GO
alter table STRUCTRESTRICTION add constraint fk_f448ac333b13489993ee47d3d62962ec foreign key(OBJECTMODEID) references OBJECTMODE (OBJECTMODEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0f7b3070f7094e7d868ccc337e3075d1') and type='F')
ALTER TABLE METHODRESTRICTION DROP CONSTRAINT fk_0f7b3070f7094e7d868ccc337e3075d1
GO
alter table METHODRESTRICTION add constraint fk_0f7b3070f7094e7d868ccc337e3075d1 foreign key(OBJECTMODEID) references OBJECTMODE (OBJECTMODEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_24c5119c5dc94aacbb01b8cf8eba998e') and type='F')
ALTER TABLE FIELDRESTRICTION DROP CONSTRAINT fk_24c5119c5dc94aacbb01b8cf8eba998e
GO
alter table FIELDRESTRICTION add constraint fk_24c5119c5dc94aacbb01b8cf8eba998e foreign key(OBJECTMODEID) references OBJECTMODE (OBJECTMODEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_8776747a743d47b9af1cab00ff81154f') and type='F')
ALTER TABLE TYPEMENU DROP CONSTRAINT fk_8776747a743d47b9af1cab00ff81154f
GO
alter table TYPEMENU add constraint fk_8776747a743d47b9af1cab00ff81154f foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_42515bade23340db8f9045dcfce01be6') and type='F')
ALTER TABLE INSTANCEVALIDATOR DROP CONSTRAINT fk_42515bade23340db8f9045dcfce01be6
GO
alter table INSTANCEVALIDATOR add constraint fk_42515bade23340db8f9045dcfce01be6 foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efb1512711d58822204c4f4f5020') and type='F')
ALTER TABLE PART DROP CONSTRAINT fk_0670efb1512711d58822204c4f4f5020
GO
alter table PART add constraint fk_0670efb1512711d58822204c4f4f5020 foreign key(OBJECTTYPEID) references OBJECTTYPE (OBJECTTYPEID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_548e9e2e89f64822a312101ca4a9fe74') and type='F')
ALTER TABLE PARTMENU DROP CONSTRAINT fk_548e9e2e89f64822a312101ca4a9fe74
GO
alter table PARTMENU add constraint fk_548e9e2e89f64822a312101ca4a9fe74 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_f8be6fca595d4f46acdbfb5838a246ca') and type='F')
ALTER TABLE PARTPARAMMAP DROP CONSTRAINT fk_f8be6fca595d4f46acdbfb5838a246ca
GO
alter table PARTPARAMMAP add constraint fk_f8be6fca595d4f46acdbfb5838a246ca foreign key(PARTMENUID) references PARTMENU (PARTMENUID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_d713b64d4ce8466dbe2b448874dc0469') and type='F')
ALTER TABLE PARTVIEW DROP CONSTRAINT fk_d713b64d4ce8466dbe2b448874dc0469
GO
alter table PARTVIEW add constraint fk_d713b64d4ce8466dbe2b448874dc0469 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_3bf43d5e0eb54ddb8efa62df3261a272') and type='F')
ALTER TABLE ViewColumn DROP CONSTRAINT fk_3bf43d5e0eb54ddb8efa62df3261a272
GO
alter table ViewColumn add constraint fk_3bf43d5e0eb54ddb8efa62df3261a272 foreign key(PARTVIEWID) references PARTVIEW (PARTVIEWID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61') and type='F')
ALTER TABLE PARTVIEW_LNK DROP CONSTRAINT fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61
GO
alter table PARTVIEW_LNK add constraint fk_efad7fa2a77c4a30a0e1ff0ffe0e4a61 foreign key(PARTVIEWID) references PARTVIEW (PARTVIEWID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_7d323655bad74d12afc2e7ff3613b4a1') and type='F')
ALTER TABLE VALIDATOR DROP CONSTRAINT fk_7d323655bad74d12afc2e7ff3613b4a1
GO
alter table VALIDATOR add constraint fk_7d323655bad74d12afc2e7ff3613b4a1 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_9caa5c89f1cb4b62b1d0ff2d29a40057') and type='F')
ALTER TABLE UNIQUECONSTRAINT DROP CONSTRAINT fk_9caa5c89f1cb4b62b1d0ff2d29a40057
GO
alter table UNIQUECONSTRAINT add constraint fk_9caa5c89f1cb4b62b1d0ff2d29a40057 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_c70106b1aa9541738097614495d6ef28') and type='F')
ALTER TABLE CONSTRAINTFIELD DROP CONSTRAINT fk_c70106b1aa9541738097614495d6ef28
GO
alter table CONSTRAINTFIELD add constraint fk_c70106b1aa9541738097614495d6ef28 foreign key(UNIQUECONSTRAINTID) references UNIQUECONSTRAINT (UNIQUECONSTRAINTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0fefa9963bad4ebba9ad52ac582cd0a7') and type='F')
ALTER TABLE ExtenderInterface DROP CONSTRAINT fk_0fefa9963bad4ebba9ad52ac582cd0a7
GO
alter table ExtenderInterface add constraint fk_0fefa9963bad4ebba9ad52ac582cd0a7 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_0670efa4512711d58822204c4f4f5020') and type='F')
ALTER TABLE FIELD DROP CONSTRAINT fk_0670efa4512711d58822204c4f4f5020
GO
alter table FIELD add constraint fk_0670efa4512711d58822204c4f4f5020 foreign key(PARTID) references PART (PARTID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_5d0b0e1a80364b12b08160139558b594') and type='F')
ALTER TABLE FldExtenders DROP CONSTRAINT fk_5d0b0e1a80364b12b08160139558b594
GO
alter table FldExtenders add constraint fk_5d0b0e1a80364b12b08160139558b594 foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_d3f1af81912c4948a87ddf549ee796e2') and type='F')
ALTER TABLE FIELDSRCDEF DROP CONSTRAINT fk_d3f1af81912c4948a87ddf549ee796e2
GO
alter table FIELDSRCDEF add constraint fk_d3f1af81912c4948a87ddf549ee796e2 foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_23e26182cc8442d6b7a2d8da0026ebee') and type='F')
ALTER TABLE DINAMICFILTERSCRIPT DROP CONSTRAINT fk_23e26182cc8442d6b7a2d8da0026ebee
GO
alter table DINAMICFILTERSCRIPT add constraint fk_23e26182cc8442d6b7a2d8da0026ebee foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_34b08ed0c4b54b9cba59870a4599f52a') and type='F')
ALTER TABLE FIELDEXPRESSION DROP CONSTRAINT fk_34b08ed0c4b54b9cba59870a4599f52a
GO
alter table FIELDEXPRESSION add constraint fk_34b08ed0c4b54b9cba59870a4599f52a foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_b40bbed584c54b0b8679172aa1acdad9') and type='F')
ALTER TABLE FIELDVALIDATOR DROP CONSTRAINT fk_b40bbed584c54b0b8679172aa1acdad9
GO
alter table FIELDVALIDATOR add constraint fk_b40bbed584c54b0b8679172aa1acdad9 foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_4189c3e471c2423da56f4e71cb91b52d') and type='F')
ALTER TABLE FIELDMENU DROP CONSTRAINT fk_4189c3e471c2423da56f4e71cb91b52d
GO
alter table FIELDMENU add constraint fk_4189c3e471c2423da56f4e71cb91b52d foreign key(FIELDID) references FIELD (FIELDID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_54752ae806b04ec68daa692e52a0d36c') and type='F')
ALTER TABLE FIELDPARAMMAP DROP CONSTRAINT fk_54752ae806b04ec68daa692e52a0d36c
GO
alter table FIELDPARAMMAP add constraint fk_54752ae806b04ec68daa692e52a0d36c foreign key(FIELDMENUID) references FIELDMENU (FIELDMENUID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_6ea00756b9804d23b209202389953a13') and type='F')
ALTER TABLE ParentPackage DROP CONSTRAINT fk_6ea00756b9804d23b209202389953a13
GO
alter table ParentPackage add constraint fk_6ea00756b9804d23b209202389953a13 foreign key(MTZAPPID) references MTZAPP (MTZAPPID)

GO
if exists(select * from sysobjects where id=object_id(N'fk_fe2c9352e29a420b91343e3bdd832a6e') and type='F')
ALTER TABLE GroupUser DROP CONSTRAINT fk_fe2c9352e29a420b91343e3bdd832a6e
GO
alter table GroupUser add constraint fk_fe2c9352e29a420b91343e3bdd832a6e foreign key(GroupsID) references Groups (GroupsID)

GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--Index" BlockCode=" 
if exists (select * from sysindexes where name = N'parent_Num_Values' and id = object_id(N'Num_Values'))
drop index Num_Values.parent_Num_Values
GO
create index parent_Num_Values on Num_Values(Num_zonesID)

GO
if exists (select * from sysindexes where name = N'parent_ARMJRNLREP' and id = object_id(N'ARMJRNLREP'))
drop index ARMJRNLREP.parent_ARMJRNLREP
GO
create index parent_ARMJRNLREP on ARMJRNLREP(ARMJournalID)

GO
if exists (select * from sysindexes where name = N'parent_ARMJRNLRUN' and id = object_id(N'ARMJRNLRUN'))
drop index ARMJRNLRUN.parent_ARMJRNLRUN
GO
create index parent_ARMJRNLRUN on ARMJRNLRUN(ARMJournalID)

GO
if exists (select * from sysindexes where name = N'parent_ARMJRNLADD' and id = object_id(N'ARMJRNLADD'))
drop index ARMJRNLADD.parent_ARMJRNLADD
GO
create index parent_ARMJRNLADD on ARMJRNLADD(ARMJournalID)

GO
if exists (select * from sysindexes where name = N'parent_EPFilterLink' and id = object_id(N'EPFilterLink'))
drop index EPFilterLink.parent_EPFilterLink
GO
create index parent_EPFilterLink on EPFilterLink(EntryPointsID)

GO
if exists (select * from sysindexes where name = N'parent_JColumnSource' and id = object_id(N'JColumnSource'))
drop index JColumnSource.parent_JColumnSource
GO
create index parent_JColumnSource on JColumnSource(JournalColumnID)

GO
if exists (select * from sysindexes where name = N'parent_RPTFields' and id = object_id(N'RPTFields'))
drop index RPTFields.parent_RPTFields
GO
create index parent_RPTFields on RPTFields(RPTStructID)

GO
if exists (select * from sysindexes where name = N'parent_FileterField' and id = object_id(N'FileterField'))
drop index FileterField.parent_FileterField
GO
create index parent_FileterField on FileterField(FilterFieldGroupID)

GO
if exists (select * from sysindexes where name = N'parent_GENERATOR_TARGET' and id = object_id(N'GENERATOR_TARGET'))
drop index GENERATOR_TARGET.parent_GENERATOR_TARGET
GO
create index parent_GENERATOR_TARGET on GENERATOR_TARGET(GENPACKAGEID)

GO
if exists (select * from sysindexes where name = N'parent_GENREFERENCE' and id = object_id(N'GENREFERENCE'))
drop index GENREFERENCE.parent_GENREFERENCE
GO
create index parent_GENREFERENCE on GENREFERENCE(GENERATOR_TARGETID)

GO
if exists (select * from sysindexes where name = N'parent_GENMANUALCODE' and id = object_id(N'GENMANUALCODE'))
drop index GENMANUALCODE.parent_GENMANUALCODE
GO
create index parent_GENMANUALCODE on GENMANUALCODE(GENERATOR_TARGETID)

GO
if exists (select * from sysindexes where name = N'parent_GENCONTROLS' and id = object_id(N'GENCONTROLS'))
drop index GENCONTROLS.parent_GENCONTROLS
GO
create index parent_GENCONTROLS on GENCONTROLS(GENERATOR_TARGETID)

GO
if exists (select * from sysindexes where name = N'parent_ENUMITEM' and id = object_id(N'ENUMITEM'))
drop index ENUMITEM.parent_ENUMITEM
GO
create index parent_ENUMITEM on ENUMITEM(FIELDTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDTYPEMAP' and id = object_id(N'FIELDTYPEMAP'))
drop index FIELDTYPEMAP.parent_FIELDTYPEMAP
GO
create index parent_FIELDTYPEMAP on FIELDTYPEMAP(FIELDTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_SCRIPT' and id = object_id(N'SCRIPT'))
drop index SCRIPT.parent_SCRIPT
GO
create index parent_SCRIPT on SCRIPT(SHAREDMETHODID)

GO
if exists (select * from sysindexes where name = N'parent_PARAMETERS' and id = object_id(N'PARAMETERS'))
drop index PARAMETERS.parent_PARAMETERS
GO
create index parent_PARAMETERS on PARAMETERS(SCRIPTID)

GO
if exists (select * from sysindexes where name = N'parent_OBJSTATUS' and id = object_id(N'OBJSTATUS'))
drop index OBJSTATUS.parent_OBJSTATUS
GO
create index parent_OBJSTATUS on OBJSTATUS(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_NEXTSTATE' and id = object_id(N'NEXTSTATE'))
drop index NEXTSTATE.parent_NEXTSTATE
GO
create index parent_NEXTSTATE on NEXTSTATE(OBJSTATUSID)

GO
if exists (select * from sysindexes where name = N'parent_OBJECTMODE' and id = object_id(N'OBJECTMODE'))
drop index OBJECTMODE.parent_OBJECTMODE
GO
create index parent_OBJECTMODE on OBJECTMODE(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_STRUCTRESTRICTION' and id = object_id(N'STRUCTRESTRICTION'))
drop index STRUCTRESTRICTION.parent_STRUCTRESTRICTION
GO
create index parent_STRUCTRESTRICTION on STRUCTRESTRICTION(OBJECTMODEID)

GO
if exists (select * from sysindexes where name = N'parent_METHODRESTRICTION' and id = object_id(N'METHODRESTRICTION'))
drop index METHODRESTRICTION.parent_METHODRESTRICTION
GO
create index parent_METHODRESTRICTION on METHODRESTRICTION(OBJECTMODEID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDRESTRICTION' and id = object_id(N'FIELDRESTRICTION'))
drop index FIELDRESTRICTION.parent_FIELDRESTRICTION
GO
create index parent_FIELDRESTRICTION on FIELDRESTRICTION(OBJECTMODEID)

GO
if exists (select * from sysindexes where name = N'parent_TYPEMENU' and id = object_id(N'TYPEMENU'))
drop index TYPEMENU.parent_TYPEMENU
GO
create index parent_TYPEMENU on TYPEMENU(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_INSTANCEVALIDATOR' and id = object_id(N'INSTANCEVALIDATOR'))
drop index INSTANCEVALIDATOR.parent_INSTANCEVALIDATOR
GO
create index parent_INSTANCEVALIDATOR on INSTANCEVALIDATOR(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_PART' and id = object_id(N'PART'))
drop index PART.parent_PART
GO
create index parent_PART on PART(OBJECTTYPEID)

GO
if exists (select * from sysindexes where name = N'parent_PARTMENU' and id = object_id(N'PARTMENU'))
drop index PARTMENU.parent_PARTMENU
GO
create index parent_PARTMENU on PARTMENU(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_PARTPARAMMAP' and id = object_id(N'PARTPARAMMAP'))
drop index PARTPARAMMAP.parent_PARTPARAMMAP
GO
create index parent_PARTPARAMMAP on PARTPARAMMAP(PARTMENUID)

GO
if exists (select * from sysindexes where name = N'parent_PARTVIEW' and id = object_id(N'PARTVIEW'))
drop index PARTVIEW.parent_PARTVIEW
GO
create index parent_PARTVIEW on PARTVIEW(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_ViewColumn' and id = object_id(N'ViewColumn'))
drop index ViewColumn.parent_ViewColumn
GO
create index parent_ViewColumn on ViewColumn(PARTVIEWID)

GO
if exists (select * from sysindexes where name = N'parent_PARTVIEW_LNK' and id = object_id(N'PARTVIEW_LNK'))
drop index PARTVIEW_LNK.parent_PARTVIEW_LNK
GO
create index parent_PARTVIEW_LNK on PARTVIEW_LNK(PARTVIEWID)

GO
if exists (select * from sysindexes where name = N'parent_VALIDATOR' and id = object_id(N'VALIDATOR'))
drop index VALIDATOR.parent_VALIDATOR
GO
create index parent_VALIDATOR on VALIDATOR(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_UNIQUECONSTRAINT' and id = object_id(N'UNIQUECONSTRAINT'))
drop index UNIQUECONSTRAINT.parent_UNIQUECONSTRAINT
GO
create index parent_UNIQUECONSTRAINT on UNIQUECONSTRAINT(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_CONSTRAINTFIELD' and id = object_id(N'CONSTRAINTFIELD'))
drop index CONSTRAINTFIELD.parent_CONSTRAINTFIELD
GO
create index parent_CONSTRAINTFIELD on CONSTRAINTFIELD(UNIQUECONSTRAINTID)

GO
if exists (select * from sysindexes where name = N'parent_ExtenderInterface' and id = object_id(N'ExtenderInterface'))
drop index ExtenderInterface.parent_ExtenderInterface
GO
create index parent_ExtenderInterface on ExtenderInterface(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_FIELD' and id = object_id(N'FIELD'))
drop index FIELD.parent_FIELD
GO
create index parent_FIELD on FIELD(PARTID)

GO
if exists (select * from sysindexes where name = N'parent_FldExtenders' and id = object_id(N'FldExtenders'))
drop index FldExtenders.parent_FldExtenders
GO
create index parent_FldExtenders on FldExtenders(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDSRCDEF' and id = object_id(N'FIELDSRCDEF'))
drop index FIELDSRCDEF.parent_FIELDSRCDEF
GO
create index parent_FIELDSRCDEF on FIELDSRCDEF(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_DINAMICFILTERSCRIPT' and id = object_id(N'DINAMICFILTERSCRIPT'))
drop index DINAMICFILTERSCRIPT.parent_DINAMICFILTERSCRIPT
GO
create index parent_DINAMICFILTERSCRIPT on DINAMICFILTERSCRIPT(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDEXPRESSION' and id = object_id(N'FIELDEXPRESSION'))
drop index FIELDEXPRESSION.parent_FIELDEXPRESSION
GO
create index parent_FIELDEXPRESSION on FIELDEXPRESSION(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDVALIDATOR' and id = object_id(N'FIELDVALIDATOR'))
drop index FIELDVALIDATOR.parent_FIELDVALIDATOR
GO
create index parent_FIELDVALIDATOR on FIELDVALIDATOR(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDMENU' and id = object_id(N'FIELDMENU'))
drop index FIELDMENU.parent_FIELDMENU
GO
create index parent_FIELDMENU on FIELDMENU(FIELDID)

GO
if exists (select * from sysindexes where name = N'parent_FIELDPARAMMAP' and id = object_id(N'FIELDPARAMMAP'))
drop index FIELDPARAMMAP.parent_FIELDPARAMMAP
GO
create index parent_FIELDPARAMMAP on FIELDPARAMMAP(FIELDMENUID)

GO
if exists (select * from sysindexes where name = N'parent_ParentPackage' and id = object_id(N'ParentPackage'))
drop index ParentPackage.parent_ParentPackage
GO
create index parent_ParentPackage on ParentPackage(MTZAPPID)

GO
if exists (select * from sysindexes where name = N'parent_GroupUser' and id = object_id(N'GroupUser'))
drop index GroupUser.parent_GroupUser
GO
create index parent_GroupUser on GroupUser(GroupsID)

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--FunctionsHeader" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

if exists (select * from sysobjects where id = object_id(N'invg_grp_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_grp_BRIEF_F
GO
create function invg_grp_BRIEF_F  (
 @invg_grpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invg_grp_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_grp_MREF_F
GO
create function invg_grp_MREF_F  (
 @invg_grp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invg_subgrp_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_subgrp_BRIEF_F
GO
create function invg_subgrp_BRIEF_F  (
 @invg_subgrpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invg_subgrp_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_subgrp_MREF_F
GO
create function invg_subgrp_MREF_F  (
 @invg_subgrp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invm_info_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invm_info_BRIEF_F
GO
create function invm_info_BRIEF_F  (
 @invm_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invm_info_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invm_info_MREF_F
GO
create function invm_info_MREF_F  (
 @invm_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invw_info_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invw_info_BRIEF_F
GO
create function invw_info_BRIEF_F  (
 @invw_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invw_info_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invw_info_MREF_F
GO
create function invw_info_MREF_F  (
 @invw_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invp_data_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invp_data_BRIEF_F
GO
create function invp_data_BRIEF_F  (
 @invp_dataid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invp_data_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invp_data_MREF_F
GO
create function invp_data_MREF_F  (
 @invp_data_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_info_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_info_BRIEF_F
GO
create function inva_info_BRIEF_F  (
 @inva_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_info_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_info_MREF_F
GO
create function inva_info_MREF_F  (
 @inva_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_real_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_real_BRIEF_F
GO
create function inva_real_BRIEF_F  (
 @inva_realid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_real_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_real_MREF_F
GO
create function inva_real_MREF_F  (
 @inva_real_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_absnt_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_absnt_BRIEF_F
GO
create function inva_absnt_BRIEF_F  (
 @inva_absntid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_absnt_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_absnt_MREF_F
GO
create function inva_absnt_MREF_F  (
 @inva_absnt_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_extra_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_extra_BRIEF_F
GO
create function inva_extra_BRIEF_F  (
 @inva_extraid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_extra_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_extra_MREF_F
GO
create function inva_extra_MREF_F  (
 @inva_extra_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_int_modules_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_int_modules_BRIEF_F
GO
create function iu_int_modules_BRIEF_F  (
 @iu_int_modulesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_int_modules_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_int_modules_MREF_F
GO
create function iu_int_modules_MREF_F  (
 @iu_int_modules_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'bpc_info_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function bpc_info_BRIEF_F
GO
create function bpc_info_BRIEF_F  (
 @bpc_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'bpc_info_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function bpc_info_MREF_F
GO
create function bpc_info_MREF_F  (
 @bpc_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_rcfg_mod_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_rcfg_mod_BRIEF_F
GO
create function iu_rcfg_mod_BRIEF_F  (
 @iu_rcfg_modid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_rcfg_mod_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_rcfg_mod_MREF_F
GO
create function iu_rcfg_mod_MREF_F  (
 @iu_rcfg_mod_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_rcfg_docmode_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_rcfg_docmode_BRIEF_F
GO
create function iu_rcfg_docmode_BRIEF_F  (
 @iu_rcfg_docmodeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_rcfg_docmode_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_rcfg_docmode_MREF_F
GO
create function iu_rcfg_docmode_MREF_F  (
 @iu_rcfg_docmode_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_rcfg_def_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_rcfg_def_BRIEF_F
GO
create function iu_rcfg_def_BRIEF_F  (
 @iu_rcfg_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_rcfg_def_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_rcfg_def_MREF_F
GO
create function iu_rcfg_def_MREF_F  (
 @iu_rcfg_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_zones_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_zones_BRIEF_F
GO
create function Num_zones_BRIEF_F  (
 @Num_zonesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_zones_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_zones_MREF_F
GO
create function Num_zones_MREF_F  (
 @Num_zones_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_Values_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_Values_BRIEF_F
GO
create function Num_Values_BRIEF_F  (
 @Num_Valuesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_Values_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_Values_MREF_F
GO
create function Num_Values_MREF_F  (
 @Num_Values_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_head_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_head_BRIEF_F
GO
create function Num_head_BRIEF_F  (
 @Num_headid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Num_head_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Num_head_MREF_F
GO
create function Num_head_MREF_F  (
 @Num_head_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJournal_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJournal_BRIEF_F
GO
create function ARMJournal_BRIEF_F  (
 @ARMJournalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJournal_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJournal_MREF_F
GO
create function ARMJournal_MREF_F  (
 @ARMJournal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLREP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLREP_BRIEF_F
GO
create function ARMJRNLREP_BRIEF_F  (
 @ARMJRNLREPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLREP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLREP_MREF_F
GO
create function ARMJRNLREP_MREF_F  (
 @ARMJRNLREP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLRUN_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLRUN_BRIEF_F
GO
create function ARMJRNLRUN_BRIEF_F  (
 @ARMJRNLRUNid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLRUN_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLRUN_MREF_F
GO
create function ARMJRNLRUN_MREF_F  (
 @ARMJRNLRUN_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLADD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLADD_BRIEF_F
GO
create function ARMJRNLADD_BRIEF_F  (
 @ARMJRNLADDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMJRNLADD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMJRNLADD_MREF_F
GO
create function ARMJRNLADD_MREF_F  (
 @ARMJRNLADD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EntryPoints_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EntryPoints_BRIEF_F
GO
create function EntryPoints_BRIEF_F  (
 @EntryPointsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EntryPoints_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EntryPoints_MREF_F
GO
create function EntryPoints_MREF_F  (
 @EntryPoints_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EPFilterLink_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EPFilterLink_BRIEF_F
GO
create function EPFilterLink_BRIEF_F  (
 @EPFilterLinkid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'EPFilterLink_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function EPFilterLink_MREF_F
GO
create function EPFilterLink_MREF_F  (
 @EPFilterLink_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'WorkPlace_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function WorkPlace_BRIEF_F
GO
create function WorkPlace_BRIEF_F  (
 @WorkPlaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'WorkPlace_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function WorkPlace_MREF_F
GO
create function WorkPlace_MREF_F  (
 @WorkPlace_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMTypes_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMTypes_BRIEF_F
GO
create function ARMTypes_BRIEF_F  (
 @ARMTypesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ARMTypes_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ARMTypes_MREF_F
GO
create function ARMTypes_MREF_F  (
 @ARMTypes_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalColumn_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalColumn_BRIEF_F
GO
create function JournalColumn_BRIEF_F  (
 @JournalColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalColumn_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalColumn_MREF_F
GO
create function JournalColumn_MREF_F  (
 @JournalColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JColumnSource_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JColumnSource_BRIEF_F
GO
create function JColumnSource_BRIEF_F  (
 @JColumnSourceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JColumnSource_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JColumnSource_MREF_F
GO
create function JColumnSource_MREF_F  (
 @JColumnSource_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalSrc_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalSrc_BRIEF_F
GO
create function JournalSrc_BRIEF_F  (
 @JournalSrcid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'JournalSrc_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function JournalSrc_MREF_F
GO
create function JournalSrc_MREF_F  (
 @JournalSrc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Journal_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Journal_BRIEF_F
GO
create function Journal_BRIEF_F  (
 @Journalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Journal_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Journal_MREF_F
GO
create function Journal_MREF_F  (
 @Journal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTStruct_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTStruct_BRIEF_F
GO
create function RPTStruct_BRIEF_F  (
 @RPTStructid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTStruct_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTStruct_MREF_F
GO
create function RPTStruct_MREF_F  (
 @RPTStruct_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFields_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFields_BRIEF_F
GO
create function RPTFields_BRIEF_F  (
 @RPTFieldsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFields_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFields_MREF_F
GO
create function RPTFields_MREF_F  (
 @RPTFields_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFormula_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFormula_BRIEF_F
GO
create function RPTFormula_BRIEF_F  (
 @RPTFormulaid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'RPTFormula_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function RPTFormula_MREF_F
GO
create function RPTFormula_MREF_F  (
 @RPTFormula_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Reports_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Reports_BRIEF_F
GO
create function Reports_BRIEF_F  (
 @Reportsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Reports_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Reports_MREF_F
GO
create function Reports_MREF_F  (
 @Reports_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FilterFieldGroup_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FilterFieldGroup_BRIEF_F
GO
create function FilterFieldGroup_BRIEF_F  (
 @FilterFieldGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FilterFieldGroup_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FilterFieldGroup_MREF_F
GO
create function FilterFieldGroup_MREF_F  (
 @FilterFieldGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FileterField_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FileterField_BRIEF_F
GO
create function FileterField_BRIEF_F  (
 @FileterFieldid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FileterField_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FileterField_MREF_F
GO
create function FileterField_MREF_F  (
 @FileterField_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Filters_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Filters_BRIEF_F
GO
create function Filters_BRIEF_F  (
 @Filtersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Filters_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Filters_MREF_F
GO
create function Filters_MREF_F  (
 @Filters_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExt_def_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExt_def_BRIEF_F
GO
create function MTZExt_def_BRIEF_F  (
 @MTZExt_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExt_def_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExt_def_MREF_F
GO
create function MTZExt_def_MREF_F  (
 @MTZExt_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExtRel_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExtRel_BRIEF_F
GO
create function MTZExtRel_BRIEF_F  (
 @MTZExtRelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZExtRel_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZExtRel_MREF_F
GO
create function MTZExtRel_MREF_F  (
 @MTZExtRel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_crole_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_crole_BRIEF_F
GO
create function iu_crole_BRIEF_F  (
 @iu_croleid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_crole_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_crole_MREF_F
GO
create function iu_crole_MREF_F  (
 @iu_crole_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_u_def_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_u_def_BRIEF_F
GO
create function iu_u_def_BRIEF_F  (
 @iu_u_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'iu_u_def_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function iu_u_def_MREF_F
GO
create function iu_u_def_MREF_F  (
 @iu_u_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENPACKAGE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENPACKAGE_BRIEF_F
GO
create function GENPACKAGE_BRIEF_F  (
 @GENPACKAGEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENPACKAGE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENPACKAGE_MREF_F
GO
create function GENPACKAGE_MREF_F  (
 @GENPACKAGE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENERATOR_TARGET_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENERATOR_TARGET_BRIEF_F
GO
create function GENERATOR_TARGET_BRIEF_F  (
 @GENERATOR_TARGETid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENERATOR_TARGET_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENERATOR_TARGET_MREF_F
GO
create function GENERATOR_TARGET_MREF_F  (
 @GENERATOR_TARGET_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENREFERENCE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENREFERENCE_BRIEF_F
GO
create function GENREFERENCE_BRIEF_F  (
 @GENREFERENCEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENREFERENCE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENREFERENCE_MREF_F
GO
create function GENREFERENCE_MREF_F  (
 @GENREFERENCE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENMANUALCODE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENMANUALCODE_BRIEF_F
GO
create function GENMANUALCODE_BRIEF_F  (
 @GENMANUALCODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENMANUALCODE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENMANUALCODE_MREF_F
GO
create function GENMANUALCODE_MREF_F  (
 @GENMANUALCODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENCONTROLS_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENCONTROLS_BRIEF_F
GO
create function GENCONTROLS_BRIEF_F  (
 @GENCONTROLSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GENCONTROLS_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GENCONTROLS_MREF_F
GO
create function GENCONTROLS_MREF_F  (
 @GENCONTROLS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'LocalizeInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function LocalizeInfo_BRIEF_F
GO
create function LocalizeInfo_BRIEF_F  (
 @LocalizeInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'LocalizeInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function LocalizeInfo_MREF_F
GO
create function LocalizeInfo_MREF_F  (
 @LocalizeInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPE_BRIEF_F
GO
create function FIELDTYPE_BRIEF_F  (
 @FIELDTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPE_MREF_F
GO
create function FIELDTYPE_MREF_F  (
 @FIELDTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ENUMITEM_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ENUMITEM_BRIEF_F
GO
create function ENUMITEM_BRIEF_F  (
 @ENUMITEMid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ENUMITEM_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ENUMITEM_MREF_F
GO
create function ENUMITEM_MREF_F  (
 @ENUMITEM_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPEMAP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPEMAP_BRIEF_F
GO
create function FIELDTYPEMAP_BRIEF_F  (
 @FIELDTYPEMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDTYPEMAP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDTYPEMAP_MREF_F
GO
create function FIELDTYPEMAP_MREF_F  (
 @FIELDTYPEMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SHAREDMETHOD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SHAREDMETHOD_BRIEF_F
GO
create function SHAREDMETHOD_BRIEF_F  (
 @SHAREDMETHODid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SHAREDMETHOD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SHAREDMETHOD_MREF_F
GO
create function SHAREDMETHOD_MREF_F  (
 @SHAREDMETHOD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SCRIPT_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SCRIPT_BRIEF_F
GO
create function SCRIPT_BRIEF_F  (
 @SCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SCRIPT_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SCRIPT_MREF_F
GO
create function SCRIPT_MREF_F  (
 @SCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARAMETERS_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARAMETERS_BRIEF_F
GO
create function PARAMETERS_BRIEF_F  (
 @PARAMETERSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARAMETERS_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARAMETERS_MREF_F
GO
create function PARAMETERS_MREF_F  (
 @PARAMETERS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTTYPE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTTYPE_BRIEF_F
GO
create function OBJECTTYPE_BRIEF_F  (
 @OBJECTTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTTYPE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTTYPE_MREF_F
GO
create function OBJECTTYPE_MREF_F  (
 @OBJECTTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJSTATUS_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJSTATUS_BRIEF_F
GO
create function OBJSTATUS_BRIEF_F  (
 @OBJSTATUSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJSTATUS_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJSTATUS_MREF_F
GO
create function OBJSTATUS_MREF_F  (
 @OBJSTATUS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'NEXTSTATE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function NEXTSTATE_BRIEF_F
GO
create function NEXTSTATE_BRIEF_F  (
 @NEXTSTATEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'NEXTSTATE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function NEXTSTATE_MREF_F
GO
create function NEXTSTATE_MREF_F  (
 @NEXTSTATE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTMODE_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTMODE_BRIEF_F
GO
create function OBJECTMODE_BRIEF_F  (
 @OBJECTMODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'OBJECTMODE_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function OBJECTMODE_MREF_F
GO
create function OBJECTMODE_MREF_F  (
 @OBJECTMODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'STRUCTRESTRICTION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function STRUCTRESTRICTION_BRIEF_F
GO
create function STRUCTRESTRICTION_BRIEF_F  (
 @STRUCTRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'STRUCTRESTRICTION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function STRUCTRESTRICTION_MREF_F
GO
create function STRUCTRESTRICTION_MREF_F  (
 @STRUCTRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'METHODRESTRICTION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function METHODRESTRICTION_BRIEF_F
GO
create function METHODRESTRICTION_BRIEF_F  (
 @METHODRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'METHODRESTRICTION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function METHODRESTRICTION_MREF_F
GO
create function METHODRESTRICTION_MREF_F  (
 @METHODRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDRESTRICTION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDRESTRICTION_BRIEF_F
GO
create function FIELDRESTRICTION_BRIEF_F  (
 @FIELDRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDRESTRICTION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDRESTRICTION_MREF_F
GO
create function FIELDRESTRICTION_MREF_F  (
 @FIELDRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TYPEMENU_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TYPEMENU_BRIEF_F
GO
create function TYPEMENU_BRIEF_F  (
 @TYPEMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'TYPEMENU_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function TYPEMENU_MREF_F
GO
create function TYPEMENU_MREF_F  (
 @TYPEMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'INSTANCEVALIDATOR_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function INSTANCEVALIDATOR_BRIEF_F
GO
create function INSTANCEVALIDATOR_BRIEF_F  (
 @INSTANCEVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'INSTANCEVALIDATOR_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function INSTANCEVALIDATOR_MREF_F
GO
create function INSTANCEVALIDATOR_MREF_F  (
 @INSTANCEVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PART_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PART_BRIEF_F
GO
create function PART_BRIEF_F  (
 @PARTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PART_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PART_MREF_F
GO
create function PART_MREF_F  (
 @PART_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTMENU_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTMENU_BRIEF_F
GO
create function PARTMENU_BRIEF_F  (
 @PARTMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTMENU_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTMENU_MREF_F
GO
create function PARTMENU_MREF_F  (
 @PARTMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTPARAMMAP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTPARAMMAP_BRIEF_F
GO
create function PARTPARAMMAP_BRIEF_F  (
 @PARTPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTPARAMMAP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTPARAMMAP_MREF_F
GO
create function PARTPARAMMAP_MREF_F  (
 @PARTPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_BRIEF_F
GO
create function PARTVIEW_BRIEF_F  (
 @PARTVIEWid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_MREF_F
GO
create function PARTVIEW_MREF_F  (
 @PARTVIEW_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ViewColumn_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ViewColumn_BRIEF_F
GO
create function ViewColumn_BRIEF_F  (
 @ViewColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ViewColumn_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ViewColumn_MREF_F
GO
create function ViewColumn_MREF_F  (
 @ViewColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_LNK_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_LNK_BRIEF_F
GO
create function PARTVIEW_LNK_BRIEF_F  (
 @PARTVIEW_LNKid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'PARTVIEW_LNK_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function PARTVIEW_LNK_MREF_F
GO
create function PARTVIEW_LNK_MREF_F  (
 @PARTVIEW_LNK_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VALIDATOR_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VALIDATOR_BRIEF_F
GO
create function VALIDATOR_BRIEF_F  (
 @VALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'VALIDATOR_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function VALIDATOR_MREF_F
GO
create function VALIDATOR_MREF_F  (
 @VALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'UNIQUECONSTRAINT_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function UNIQUECONSTRAINT_BRIEF_F
GO
create function UNIQUECONSTRAINT_BRIEF_F  (
 @UNIQUECONSTRAINTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'UNIQUECONSTRAINT_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function UNIQUECONSTRAINT_MREF_F
GO
create function UNIQUECONSTRAINT_MREF_F  (
 @UNIQUECONSTRAINT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CONSTRAINTFIELD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CONSTRAINTFIELD_BRIEF_F
GO
create function CONSTRAINTFIELD_BRIEF_F  (
 @CONSTRAINTFIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'CONSTRAINTFIELD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function CONSTRAINTFIELD_MREF_F
GO
create function CONSTRAINTFIELD_MREF_F  (
 @CONSTRAINTFIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ExtenderInterface_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ExtenderInterface_BRIEF_F
GO
create function ExtenderInterface_BRIEF_F  (
 @ExtenderInterfaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ExtenderInterface_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ExtenderInterface_MREF_F
GO
create function ExtenderInterface_MREF_F  (
 @ExtenderInterface_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELD_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELD_BRIEF_F
GO
create function FIELD_BRIEF_F  (
 @FIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELD_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELD_MREF_F
GO
create function FIELD_MREF_F  (
 @FIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FldExtenders_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FldExtenders_BRIEF_F
GO
create function FldExtenders_BRIEF_F  (
 @FldExtendersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FldExtenders_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FldExtenders_MREF_F
GO
create function FldExtenders_MREF_F  (
 @FldExtenders_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDSRCDEF_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDSRCDEF_BRIEF_F
GO
create function FIELDSRCDEF_BRIEF_F  (
 @FIELDSRCDEFid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDSRCDEF_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDSRCDEF_MREF_F
GO
create function FIELDSRCDEF_MREF_F  (
 @FIELDSRCDEF_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'DINAMICFILTERSCRIPT_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function DINAMICFILTERSCRIPT_BRIEF_F
GO
create function DINAMICFILTERSCRIPT_BRIEF_F  (
 @DINAMICFILTERSCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'DINAMICFILTERSCRIPT_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function DINAMICFILTERSCRIPT_MREF_F
GO
create function DINAMICFILTERSCRIPT_MREF_F  (
 @DINAMICFILTERSCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDEXPRESSION_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDEXPRESSION_BRIEF_F
GO
create function FIELDEXPRESSION_BRIEF_F  (
 @FIELDEXPRESSIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDEXPRESSION_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDEXPRESSION_MREF_F
GO
create function FIELDEXPRESSION_MREF_F  (
 @FIELDEXPRESSION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDVALIDATOR_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDVALIDATOR_BRIEF_F
GO
create function FIELDVALIDATOR_BRIEF_F  (
 @FIELDVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDVALIDATOR_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDVALIDATOR_MREF_F
GO
create function FIELDVALIDATOR_MREF_F  (
 @FIELDVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDMENU_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDMENU_BRIEF_F
GO
create function FIELDMENU_BRIEF_F  (
 @FIELDMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDMENU_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDMENU_MREF_F
GO
create function FIELDMENU_MREF_F  (
 @FIELDMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDPARAMMAP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDPARAMMAP_BRIEF_F
GO
create function FIELDPARAMMAP_BRIEF_F  (
 @FIELDPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'FIELDPARAMMAP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function FIELDPARAMMAP_MREF_F
GO
create function FIELDPARAMMAP_MREF_F  (
 @FIELDPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZAPP_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZAPP_BRIEF_F
GO
create function MTZAPP_BRIEF_F  (
 @MTZAPPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'MTZAPP_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function MTZAPP_MREF_F
GO
create function MTZAPP_MREF_F  (
 @MTZAPP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ParentPackage_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ParentPackage_BRIEF_F
GO
create function ParentPackage_BRIEF_F  (
 @ParentPackageid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'ParentPackage_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function ParentPackage_MREF_F
GO
create function ParentPackage_MREF_F  (
 @ParentPackage_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'the_Session_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function the_Session_BRIEF_F
GO
create function the_Session_BRIEF_F  (
 @the_Sessionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'the_Session_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function the_Session_MREF_F
GO
create function the_Session_MREF_F  (
 @the_Session_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysRefCache_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysRefCache_BRIEF_F
GO
create function SysRefCache_BRIEF_F  (
 @SysRefCacheid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysRefCache_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysRefCache_MREF_F
GO
create function SysRefCache_MREF_F  (
 @SysRefCache_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysLog_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysLog_BRIEF_F
GO
create function SysLog_BRIEF_F  (
 @SysLogid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'SysLog_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function SysLog_MREF_F
GO
create function SysLog_MREF_F  (
 @SysLog_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_dep_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_dep_BRIEF_F
GO
create function invd_dep_BRIEF_F  (
 @invd_depid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_dep_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_dep_MREF_F
GO
create function invd_dep_MREF_F  (
 @invd_dep_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_machine_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_machine_BRIEF_F
GO
create function invd_machine_BRIEF_F  (
 @invd_machineid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_machine_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_machine_MREF_F
GO
create function invd_machine_MREF_F  (
 @invd_machine_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_zone_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_zone_BRIEF_F
GO
create function invd_zone_BRIEF_F  (
 @invd_zoneid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_zone_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_zone_MREF_F
GO
create function invd_zone_MREF_F  (
 @invd_zone_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Users_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Users_BRIEF_F
GO
create function Users_BRIEF_F  (
 @Usersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Users_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Users_MREF_F
GO
create function Users_MREF_F  (
 @Users_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Groups_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Groups_BRIEF_F
GO
create function Groups_BRIEF_F  (
 @Groupsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'Groups_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function Groups_MREF_F
GO
create function Groups_MREF_F  (
 @Groups_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GroupUser_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GroupUser_BRIEF_F
GO
create function GroupUser_BRIEF_F  (
 @GroupUserid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'GroupUser_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function GroupUser_MREF_F
GO
create function GroupUser_MREF_F  (
 @GroupUser_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_loc_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_loc_BRIEF_F
GO
create function invwh_loc_BRIEF_F  (
 @invwh_locid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_loc_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_loc_MREF_F
GO
create function invwh_loc_MREF_F  (
 @invwh_loc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_cell_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_cell_BRIEF_F
GO
create function invwh_cell_BRIEF_F  (
 @invwh_cellid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_cell_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_cell_MREF_F
GO
create function invwh_cell_MREF_F  (
 @invwh_cell_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Functions" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

alter function invg_grp_BRIEF_F  (
 @invg_grpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invg_grpid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invg_grp where invg_grpID=@invg_grpID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invg_grp  where  invg_grpID = @invg_grpID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invg_grp_MREF_F  (
 @invg_grp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invg_grp_BRIEF_F(invg_grpID, @Lang)  from invg_grp
where @invg_grp_ref like '%'+convert(varchar(38),invg_grpID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invg_subgrp_BRIEF_F  (
 @invg_subgrpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invg_subgrpid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invg_subgrp where invg_subgrpID=@invg_subgrpID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invg_subgrp  where  invg_subgrpID = @invg_subgrpID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invg_subgrp_MREF_F  (
 @invg_subgrp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invg_subgrp_BRIEF_F(invg_subgrpID, @Lang)  from invg_subgrp
where @invg_subgrp_ref like '%'+convert(varchar(38),invg_subgrpID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invm_info_BRIEF_F  (
 @invm_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invm_infoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invm_info where invm_infoID=@invm_infoID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from invm_info  where  invm_infoID = @invm_infoID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from invm_info  where  invm_infoID = @invm_infoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invm_info_MREF_F  (
 @invm_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invm_info_BRIEF_F(invm_infoID, @Lang)  from invm_info
where @invm_info_ref like '%'+convert(varchar(38),invm_infoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invw_info_BRIEF_F  (
 @invw_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invw_infoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invw_info where invw_infoID=@invw_infoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from invw_info  where  invw_infoID = @invw_infoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invw_info_MREF_F  (
 @invw_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invw_info_BRIEF_F(invw_infoID, @Lang)  from invw_info
where @invw_info_ref like '%'+convert(varchar(38),invw_infoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invp_data_BRIEF_F  (
 @invp_dataid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invp_dataid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invp_data where invp_dataID=@invp_dataID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invp_data  where  invp_dataID = @invp_dataID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), RFID),'')) + '; '
  from invp_data  where  invp_dataID = @invp_dataID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invp_data_MREF_F  (
 @invp_data_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invp_data_BRIEF_F(invp_dataID, @Lang)  from invp_data
where @invp_data_ref like '%'+convert(varchar(38),invp_dataID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_info_BRIEF_F  (
 @inva_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_infoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_info where inva_infoID=@inva_infoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), invDate),'')) + '; '
  from inva_info  where  inva_infoID = @inva_infoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_info_MREF_F  (
 @inva_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_info_BRIEF_F(inva_infoID, @Lang)  from inva_info
where @inva_info_ref like '%'+convert(varchar(38),inva_infoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_real_BRIEF_F  (
 @inva_realid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_realid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_real where inva_realID=@inva_realID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from inva_real  where  inva_realID = @inva_realID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from inva_real  where  inva_realID = @inva_realID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_real_MREF_F  (
 @inva_real_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_real_BRIEF_F(inva_realID, @Lang)  from inva_real
where @inva_real_ref like '%'+convert(varchar(38),inva_realID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_absnt_BRIEF_F  (
 @inva_absntid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_absntid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_absnt where inva_absntID=@inva_absntID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from inva_absnt  where  inva_absntID = @inva_absntID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from inva_absnt  where  inva_absntID = @inva_absntID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_absnt_MREF_F  (
 @inva_absnt_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_absnt_BRIEF_F(inva_absntID, @Lang)  from inva_absnt
where @inva_absnt_ref like '%'+convert(varchar(38),inva_absntID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_extra_BRIEF_F  (
 @inva_extraid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_extraid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_extra where inva_extraID=@inva_extraID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from inva_extra  where  inva_extraID = @inva_extraID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from inva_extra  where  inva_extraID = @inva_extraID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_extra_MREF_F  (
 @inva_extra_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_extra_BRIEF_F(inva_extraID, @Lang)  from inva_extra
where @inva_extra_ref like '%'+convert(varchar(38),inva_extraID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function iu_int_modules_BRIEF_F  (
 @iu_int_modulesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @iu_int_modulesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from iu_int_modules where iu_int_modulesID=@iu_int_modulesID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from iu_int_modules  where  iu_int_modulesID = @iu_int_modulesID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from iu_int_modules  where  iu_int_modulesID = @iu_int_modulesID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function iu_int_modules_MREF_F  (
 @iu_int_modules_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.iu_int_modules_BRIEF_F(iu_int_modulesID, @Lang)  from iu_int_modules
where @iu_int_modules_ref like '%'+convert(varchar(38),iu_int_modulesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function bpc_info_BRIEF_F  (
 @bpc_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @bpc_infoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from bpc_info where bpc_infoID=@bpc_infoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from bpc_info  where  bpc_infoID = @bpc_infoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function bpc_info_MREF_F  (
 @bpc_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.bpc_info_BRIEF_F(bpc_infoID, @Lang)  from bpc_info
where @bpc_info_ref like '%'+convert(varchar(38),bpc_infoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function iu_rcfg_mod_BRIEF_F  (
 @iu_rcfg_modid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @iu_rcfg_modid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from iu_rcfg_mod where iu_rcfg_modID=@iu_rcfg_modID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from iu_rcfg_mod  where  iu_rcfg_modID = @iu_rcfg_modID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from iu_rcfg_mod  where  iu_rcfg_modID = @iu_rcfg_modID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function iu_rcfg_mod_MREF_F  (
 @iu_rcfg_mod_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.iu_rcfg_mod_BRIEF_F(iu_rcfg_modID, @Lang)  from iu_rcfg_mod
where @iu_rcfg_mod_ref like '%'+convert(varchar(38),iu_rcfg_modID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function iu_rcfg_docmode_BRIEF_F  (
 @iu_rcfg_docmodeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @iu_rcfg_docmodeid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from iu_rcfg_docmode where iu_rcfg_docmodeID=@iu_rcfg_docmodeID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  The_Document
  from iu_rcfg_docmode  where  iu_rcfg_docmodeID = @iu_rcfg_docmodeID 
 select @tmpBrief= dbo.OBJECTTYPE_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function iu_rcfg_docmode_MREF_F  (
 @iu_rcfg_docmode_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.iu_rcfg_docmode_BRIEF_F(iu_rcfg_docmodeID, @Lang)  from iu_rcfg_docmode
where @iu_rcfg_docmode_ref like '%'+convert(varchar(38),iu_rcfg_docmodeID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function iu_rcfg_def_BRIEF_F  (
 @iu_rcfg_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @iu_rcfg_defid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from iu_rcfg_def where iu_rcfg_defID=@iu_rcfg_defID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  therole
  from iu_rcfg_def  where  iu_rcfg_defID = @iu_rcfg_defID 
 select @tmpBrief= dbo.iu_crole_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function iu_rcfg_def_MREF_F  (
 @iu_rcfg_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.iu_rcfg_def_BRIEF_F(iu_rcfg_defID, @Lang)  from iu_rcfg_def
where @iu_rcfg_def_ref like '%'+convert(varchar(38),iu_rcfg_defID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Num_zones_BRIEF_F  (
 @Num_zonesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Num_zonesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Num_zones where Num_zonesID=@Num_zonesID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ZoneMask),'')) + '; '
  from Num_zones  where  Num_zonesID = @Num_zonesID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Num_zones_MREF_F  (
 @Num_zones_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Num_zones_BRIEF_F(Num_zonesID, @Lang)  from Num_zones
where @Num_zones_ref like '%'+convert(varchar(38),Num_zonesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Num_Values_BRIEF_F  (
 @Num_Valuesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Num_Valuesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Num_Values where Num_ValuesID=@Num_ValuesID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), the_Value),'')) + '; '
  from Num_Values  where  Num_ValuesID = @Num_ValuesID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Num_Values_MREF_F  (
 @Num_Values_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Num_Values_BRIEF_F(Num_ValuesID, @Lang)  from Num_Values
where @Num_Values_ref like '%'+convert(varchar(38),Num_ValuesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Num_head_BRIEF_F  (
 @Num_headid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Num_headid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Num_head where Num_headID=@Num_headID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Num_head  where  Num_headID = @Num_headID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Num_head_MREF_F  (
 @Num_head_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Num_head_BRIEF_F(Num_headID, @Lang)  from Num_head
where @Num_head_ref like '%'+convert(varchar(38),Num_headID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJournal_BRIEF_F  (
 @ARMJournalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJournalid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJournal where ARMJournalID=@ARMJournalID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheJournal
  from ARMJournal  where  ARMJournalID = @ARMJournalID 
 select @tmpBrief= ' не поддерживается '
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJournal_MREF_F  (
 @ARMJournal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJournal_BRIEF_F(ARMJournalID, @Lang)  from ARMJournal
where @ARMJournal_ref like '%'+convert(varchar(38),ARMJournalID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJRNLREP_BRIEF_F  (
 @ARMJRNLREPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJRNLREPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJRNLREP where ARMJRNLREPID=@ARMJRNLREPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), repname),'')) + '; '
  from ARMJRNLREP  where  ARMJRNLREPID = @ARMJRNLREPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJRNLREP_MREF_F  (
 @ARMJRNLREP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJRNLREP_BRIEF_F(ARMJRNLREPID, @Lang)  from ARMJRNLREP
where @ARMJRNLREP_ref like '%'+convert(varchar(38),ARMJRNLREPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJRNLRUN_BRIEF_F  (
 @ARMJRNLRUNid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJRNLRUNid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJRNLRUN where ARMJRNLRUNID=@ARMJRNLRUNID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ARMJRNLRUN  where  ARMJRNLRUNID = @ARMJRNLRUNID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJRNLRUN_MREF_F  (
 @ARMJRNLRUN_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJRNLRUN_BRIEF_F(ARMJRNLRUNID, @Lang)  from ARMJRNLRUN
where @ARMJRNLRUN_ref like '%'+convert(varchar(38),ARMJRNLRUNID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMJRNLADD_BRIEF_F  (
 @ARMJRNLADDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMJRNLADDid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMJRNLADD where ARMJRNLADDID=@ARMJRNLADDID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ARMJRNLADD  where  ARMJRNLADDID = @ARMJRNLADDID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMJRNLADD_MREF_F  (
 @ARMJRNLADD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMJRNLADD_BRIEF_F(ARMJRNLADDID, @Lang)  from ARMJRNLADD
where @ARMJRNLADD_ref like '%'+convert(varchar(38),ARMJRNLADDID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function EntryPoints_BRIEF_F  (
 @EntryPointsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @EntryPointsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from EntryPoints where EntryPointsID=@EntryPointsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from EntryPoints  where  EntryPointsID = @EntryPointsID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from EntryPoints  where  EntryPointsID = @EntryPointsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function EntryPoints_MREF_F  (
 @EntryPoints_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.EntryPoints_BRIEF_F(EntryPointsID, @Lang)  from EntryPoints
where @EntryPoints_ref like '%'+convert(varchar(38),EntryPointsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function EPFilterLink_BRIEF_F  (
 @EPFilterLinkid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @EPFilterLinkid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from EPFilterLink where EPFilterLinkID=@EPFilterLinkID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), RowSource),'')) + '; '
  from EPFilterLink  where  EPFilterLinkID = @EPFilterLinkID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function EPFilterLink_MREF_F  (
 @EPFilterLink_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.EPFilterLink_BRIEF_F(EPFilterLinkID, @Lang)  from EPFilterLink
where @EPFilterLink_ref like '%'+convert(varchar(38),EPFilterLinkID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function WorkPlace_BRIEF_F  (
 @WorkPlaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @WorkPlaceid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from WorkPlace where WorkPlaceID=@WorkPlaceID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from WorkPlace  where  WorkPlaceID = @WorkPlaceID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function WorkPlace_MREF_F  (
 @WorkPlace_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.WorkPlace_BRIEF_F(WorkPlaceID, @Lang)  from WorkPlace
where @WorkPlace_ref like '%'+convert(varchar(38),WorkPlaceID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ARMTypes_BRIEF_F  (
 @ARMTypesid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ARMTypesid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ARMTypes where ARMTypesID=@ARMTypesID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheDocumentType
  from ARMTypes  where  ARMTypesID = @ARMTypesID 
 select @tmpBrief= dbo.OBJECTTYPE_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ARMTypes_MREF_F  (
 @ARMTypes_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ARMTypes_BRIEF_F(ARMTypesID, @Lang)  from ARMTypes
where @ARMTypes_ref like '%'+convert(varchar(38),ARMTypesID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function JournalColumn_BRIEF_F  (
 @JournalColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @JournalColumnid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from JournalColumn where JournalColumnID=@JournalColumnID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from JournalColumn  where  JournalColumnID = @JournalColumnID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function JournalColumn_MREF_F  (
 @JournalColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.JournalColumn_BRIEF_F(JournalColumnID, @Lang)  from JournalColumn
where @JournalColumn_ref like '%'+convert(varchar(38),JournalColumnID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function JColumnSource_BRIEF_F  (
 @JColumnSourceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @JColumnSourceid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from JColumnSource where JColumnSourceID=@JColumnSourceID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ViewField),'')) + '; '
  from JColumnSource  where  JColumnSourceID = @JColumnSourceID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function JColumnSource_MREF_F  (
 @JColumnSource_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.JColumnSource_BRIEF_F(JColumnSourceID, @Lang)  from JColumnSource
where @JColumnSource_ref like '%'+convert(varchar(38),JColumnSourceID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function JournalSrc_BRIEF_F  (
 @JournalSrcid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @JournalSrcid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from JournalSrc where JournalSrcID=@JournalSrcID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ViewAlias),'')) + '; '
  from JournalSrc  where  JournalSrcID = @JournalSrcID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function JournalSrc_MREF_F  (
 @JournalSrc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.JournalSrc_BRIEF_F(JournalSrcID, @Lang)  from JournalSrc
where @JournalSrc_ref like '%'+convert(varchar(38),JournalSrcID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Journal_BRIEF_F  (
 @Journalid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Journalid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Journal where JournalID=@JournalID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Journal  where  JournalID = @JournalID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Journal_MREF_F  (
 @Journal_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Journal_BRIEF_F(JournalID, @Lang)  from Journal
where @Journal_ref like '%'+convert(varchar(38),JournalID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function RPTStruct_BRIEF_F  (
 @RPTStructid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @RPTStructid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from RPTStruct where RPTStructID=@RPTStructID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from RPTStruct  where  RPTStructID = @RPTStructID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function RPTStruct_MREF_F  (
 @RPTStruct_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.RPTStruct_BRIEF_F(RPTStructID, @Lang)  from RPTStruct
where @RPTStruct_ref like '%'+convert(varchar(38),RPTStructID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function RPTFields_BRIEF_F  (
 @RPTFieldsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @RPTFieldsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from RPTFields where RPTFieldsID=@RPTFieldsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from RPTFields  where  RPTFieldsID = @RPTFieldsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function RPTFields_MREF_F  (
 @RPTFields_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.RPTFields_BRIEF_F(RPTFieldsID, @Lang)  from RPTFields
where @RPTFields_ref like '%'+convert(varchar(38),RPTFieldsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function RPTFormula_BRIEF_F  (
 @RPTFormulaid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @RPTFormulaid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from RPTFormula where RPTFormulaID=@RPTFormulaID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from RPTFormula  where  RPTFormulaID = @RPTFormulaID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function RPTFormula_MREF_F  (
 @RPTFormula_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.RPTFormula_BRIEF_F(RPTFormulaID, @Lang)  from RPTFormula
where @RPTFormula_ref like '%'+convert(varchar(38),RPTFormulaID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Reports_BRIEF_F  (
 @Reportsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Reportsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Reports where ReportsID=@ReportsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Reports  where  ReportsID = @ReportsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Reports_MREF_F  (
 @Reports_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Reports_BRIEF_F(ReportsID, @Lang)  from Reports
where @Reports_ref like '%'+convert(varchar(38),ReportsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FilterFieldGroup_BRIEF_F  (
 @FilterFieldGroupid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FilterFieldGroupid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FilterFieldGroup where FilterFieldGroupID=@FilterFieldGroupID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FilterFieldGroup  where  FilterFieldGroupID = @FilterFieldGroupID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from FilterFieldGroup  where  FilterFieldGroupID = @FilterFieldGroupID 
  select @BRIEF= @BRIEF +
  case AllowIgnore 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from FilterFieldGroup where FilterFieldGroupID=@FilterFieldGroupID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FilterFieldGroup_MREF_F  (
 @FilterFieldGroup_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FilterFieldGroup_BRIEF_F(FilterFieldGroupID, @Lang)  from FilterFieldGroup
where @FilterFieldGroup_ref like '%'+convert(varchar(38),FilterFieldGroupID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FileterField_BRIEF_F  (
 @FileterFieldid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FileterFieldid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FileterField where FileterFieldID=@FileterFieldID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FileterField  where  FileterFieldID = @FileterFieldID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from FileterField  where  FileterFieldID = @FileterFieldID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FileterField_MREF_F  (
 @FileterField_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FileterField_BRIEF_F(FileterFieldID, @Lang)  from FileterField
where @FileterField_ref like '%'+convert(varchar(38),FileterFieldID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Filters_BRIEF_F  (
 @Filtersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Filtersid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Filters where FiltersID=@FiltersID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Filters  where  FiltersID = @FiltersID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Filters_MREF_F  (
 @Filters_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Filters_BRIEF_F(FiltersID, @Lang)  from Filters
where @Filters_ref like '%'+convert(varchar(38),FiltersID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function MTZExt_def_BRIEF_F  (
 @MTZExt_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @MTZExt_defid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from MTZExt_def where MTZExt_defID=@MTZExt_defID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from MTZExt_def  where  MTZExt_defID = @MTZExt_defID 
  select @BRIEF= @BRIEF +
  case ExtType 
when 6 then 
 'VerifyRowExt; '
when 7 then 
 'CodeGenerator; '
when 5 then 
 'DefaultExt; '
when 0 then 
 'StatusExt; '
when 4 then 
 'JrnlRunExt; '
when 2 then 
 'CustomExt; '
when 8 then 
 'ARMGenerator; '
when 1 then 
 'OnFormExt; '
when 3 then 
 'JrnlAddExt; '
  end  from MTZExt_def where MTZExt_defID=@MTZExt_defID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function MTZExt_def_MREF_F  (
 @MTZExt_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.MTZExt_def_BRIEF_F(MTZExt_defID, @Lang)  from MTZExt_def
where @MTZExt_def_ref like '%'+convert(varchar(38),MTZExt_defID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function MTZExtRel_BRIEF_F  (
 @MTZExtRelid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @MTZExtRelid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from MTZExtRel where MTZExtRelID=@MTZExtRelID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF +
  case ThePlatform 
when 3 then 
 'OTHER; '
when 1 then 
 'DOTNET; '
when 2 then 
 'JAVA; '
when 0 then 
 'VB6; '
  end  from MTZExtRel where MTZExtRelID=@MTZExtRelID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function MTZExtRel_MREF_F  (
 @MTZExtRel_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.MTZExtRel_BRIEF_F(MTZExtRelID, @Lang)  from MTZExtRel
where @MTZExtRel_ref like '%'+convert(varchar(38),MTZExtRelID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function iu_crole_BRIEF_F  (
 @iu_croleid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @iu_croleid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from iu_crole where iu_croleID=@iu_croleID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from iu_crole  where  iu_croleID = @iu_croleID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function iu_crole_MREF_F  (
 @iu_crole_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.iu_crole_BRIEF_F(iu_croleID, @Lang)  from iu_crole
where @iu_crole_ref like '%'+convert(varchar(38),iu_croleID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function iu_u_def_BRIEF_F  (
 @iu_u_defid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @iu_u_defid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from iu_u_def where iu_u_defID=@iu_u_defID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), lastname),'')) + '; '
  from iu_u_def  where  iu_u_defID = @iu_u_defID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from iu_u_def  where  iu_u_defID = @iu_u_defID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), surname),'')) + '; '
  from iu_u_def  where  iu_u_defID = @iu_u_defID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function iu_u_def_MREF_F  (
 @iu_u_def_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.iu_u_def_BRIEF_F(iu_u_defID, @Lang)  from iu_u_def
where @iu_u_def_ref like '%'+convert(varchar(38),iu_u_defID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENPACKAGE_BRIEF_F  (
 @GENPACKAGEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENPACKAGEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENPACKAGE where GENPACKAGEID=@GENPACKAGEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENPACKAGE  where  GENPACKAGEID = @GENPACKAGEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENPACKAGE_MREF_F  (
 @GENPACKAGE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENPACKAGE_BRIEF_F(GENPACKAGEID, @Lang)  from GENPACKAGE
where @GENPACKAGE_ref like '%'+convert(varchar(38),GENPACKAGEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENERATOR_TARGET_BRIEF_F  (
 @GENERATOR_TARGETid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENERATOR_TARGETid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENERATOR_TARGET where GENERATOR_TARGETID=@GENERATOR_TARGETID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENERATOR_TARGET  where  GENERATOR_TARGETID = @GENERATOR_TARGETID 
  select @BRIEF= @BRIEF +
  case TargetType 
when 0 then 
 'СУБД; '
when 3 then 
 'Документация; '
when 1 then 
 'МОДЕЛЬ; '
when 2 then 
 'Приложение; '
when 4 then 
 'АРМ; '
  end  from GENERATOR_TARGET where GENERATOR_TARGETID=@GENERATOR_TARGETID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENERATOR_TARGET_MREF_F  (
 @GENERATOR_TARGET_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENERATOR_TARGET_BRIEF_F(GENERATOR_TARGETID, @Lang)  from GENERATOR_TARGET
where @GENERATOR_TARGET_ref like '%'+convert(varchar(38),GENERATOR_TARGETID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENREFERENCE_BRIEF_F  (
 @GENREFERENCEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENREFERENCEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENREFERENCE where GENREFERENCEID=@GENREFERENCEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENREFERENCE  where  GENREFERENCEID = @GENREFERENCEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENREFERENCE_MREF_F  (
 @GENREFERENCE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENREFERENCE_BRIEF_F(GENREFERENCEID, @Lang)  from GENREFERENCE
where @GENREFERENCE_ref like '%'+convert(varchar(38),GENREFERENCEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENMANUALCODE_BRIEF_F  (
 @GENMANUALCODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENMANUALCODEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENMANUALCODE where GENMANUALCODEID=@GENMANUALCODEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from GENMANUALCODE  where  GENMANUALCODEID = @GENMANUALCODEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENMANUALCODE_MREF_F  (
 @GENMANUALCODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENMANUALCODE_BRIEF_F(GENMANUALCODEID, @Lang)  from GENMANUALCODE
where @GENMANUALCODE_ref like '%'+convert(varchar(38),GENMANUALCODEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GENCONTROLS_BRIEF_F  (
 @GENCONTROLSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GENCONTROLSid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GENCONTROLS where GENCONTROLSID=@GENCONTROLSID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ControlProgID),'')) + '; '
  from GENCONTROLS  where  GENCONTROLSID = @GENCONTROLSID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GENCONTROLS_MREF_F  (
 @GENCONTROLS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GENCONTROLS_BRIEF_F(GENCONTROLSID, @Lang)  from GENCONTROLS
where @GENCONTROLS_ref like '%'+convert(varchar(38),GENCONTROLSID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function LocalizeInfo_BRIEF_F  (
 @LocalizeInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @LocalizeInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from LocalizeInfo where LocalizeInfoID=@LocalizeInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), LangFull),'')) + '; '
  from LocalizeInfo  where  LocalizeInfoID = @LocalizeInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), LangShort),'')) + '; '
  from LocalizeInfo  where  LocalizeInfoID = @LocalizeInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function LocalizeInfo_MREF_F  (
 @LocalizeInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.LocalizeInfo_BRIEF_F(LocalizeInfoID, @Lang)  from LocalizeInfo
where @LocalizeInfo_ref like '%'+convert(varchar(38),LocalizeInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDTYPE_BRIEF_F  (
 @FIELDTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDTYPEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDTYPE where FIELDTYPEID=@FIELDTYPEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FIELDTYPE  where  FIELDTYPEID = @FIELDTYPEID 
  select @BRIEF= @BRIEF +
  case TypeStyle 
when 4 then 
 'Ссылка; '
when 1 then 
 'Выражение; '
when 5 then 
 'Элемент оформления; '
when 3 then 
 'Интервал; '
when 2 then 
 'Перечисление; '
when 0 then 
 'Скалярный тип; '
  end  from FIELDTYPE where FIELDTYPEID=@FIELDTYPEID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDTYPE_MREF_F  (
 @FIELDTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDTYPE_BRIEF_F(FIELDTYPEID, @Lang)  from FIELDTYPE
where @FIELDTYPE_ref like '%'+convert(varchar(38),FIELDTYPEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ENUMITEM_BRIEF_F  (
 @ENUMITEMid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ENUMITEMid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ENUMITEM where ENUMITEMID=@ENUMITEMID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ENUMITEM  where  ENUMITEMID = @ENUMITEMID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), NameValue),'')) + '; '
  from ENUMITEM  where  ENUMITEMID = @ENUMITEMID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ENUMITEM_MREF_F  (
 @ENUMITEM_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ENUMITEM_BRIEF_F(ENUMITEMID, @Lang)  from ENUMITEM
where @ENUMITEM_ref like '%'+convert(varchar(38),ENUMITEMID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDTYPEMAP_BRIEF_F  (
 @FIELDTYPEMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDTYPEMAPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDTYPEMAP where FIELDTYPEMAPID=@FIELDTYPEMAPID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from FIELDTYPEMAP  where  FIELDTYPEMAPID = @FIELDTYPEMAPID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), StoageType),'')) + '; '
  from FIELDTYPEMAP  where  FIELDTYPEMAPID = @FIELDTYPEMAPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDTYPEMAP_MREF_F  (
 @FIELDTYPEMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDTYPEMAP_BRIEF_F(FIELDTYPEMAPID, @Lang)  from FIELDTYPEMAP
where @FIELDTYPEMAP_ref like '%'+convert(varchar(38),FIELDTYPEMAPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SHAREDMETHOD_BRIEF_F  (
 @SHAREDMETHODid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SHAREDMETHODid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SHAREDMETHOD where SHAREDMETHODID=@SHAREDMETHODID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from SHAREDMETHOD  where  SHAREDMETHODID = @SHAREDMETHODID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SHAREDMETHOD_MREF_F  (
 @SHAREDMETHOD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SHAREDMETHOD_BRIEF_F(SHAREDMETHODID, @Lang)  from SHAREDMETHOD
where @SHAREDMETHOD_ref like '%'+convert(varchar(38),SHAREDMETHODID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SCRIPT_BRIEF_F  (
 @SCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SCRIPTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SCRIPT where SCRIPTID=@SCRIPTID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from SCRIPT  where  SCRIPTID = @SCRIPTID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SCRIPT_MREF_F  (
 @SCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SCRIPT_BRIEF_F(SCRIPTID, @Lang)  from SCRIPT
where @SCRIPT_ref like '%'+convert(varchar(38),SCRIPTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARAMETERS_BRIEF_F  (
 @PARAMETERSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARAMETERSid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARAMETERS where PARAMETERSID=@PARAMETERSID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PARAMETERS  where  PARAMETERSID = @PARAMETERSID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from PARAMETERS  where  PARAMETERSID = @PARAMETERSID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARAMETERS_MREF_F  (
 @PARAMETERS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARAMETERS_BRIEF_F(PARAMETERSID, @Lang)  from PARAMETERS
where @PARAMETERS_ref like '%'+convert(varchar(38),PARAMETERSID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function OBJECTTYPE_BRIEF_F  (
 @OBJECTTYPEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @OBJECTTYPEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from OBJECTTYPE where OBJECTTYPEID=@OBJECTTYPEID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Package
  from OBJECTTYPE  where  OBJECTTYPEID = @OBJECTTYPEID 
 select @tmpBrief= dbo.MTZAPP_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), the_Comment),'')) + '; '
  from OBJECTTYPE  where  OBJECTTYPEID = @OBJECTTYPEID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function OBJECTTYPE_MREF_F  (
 @OBJECTTYPE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.OBJECTTYPE_BRIEF_F(OBJECTTYPEID, @Lang)  from OBJECTTYPE
where @OBJECTTYPE_ref like '%'+convert(varchar(38),OBJECTTYPEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function OBJSTATUS_BRIEF_F  (
 @OBJSTATUSid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @OBJSTATUSid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from OBJSTATUS where OBJSTATUSID=@OBJSTATUSID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from OBJSTATUS  where  OBJSTATUSID = @OBJSTATUSID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function OBJSTATUS_MREF_F  (
 @OBJSTATUS_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.OBJSTATUS_BRIEF_F(OBJSTATUSID, @Lang)  from OBJSTATUS
where @OBJSTATUS_ref like '%'+convert(varchar(38),OBJSTATUSID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function NEXTSTATE_BRIEF_F  (
 @NEXTSTATEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @NEXTSTATEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from NEXTSTATE where NEXTSTATEID=@NEXTSTATEID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheState
  from NEXTSTATE  where  NEXTSTATEID = @NEXTSTATEID 
 select @tmpBrief= dbo.OBJSTATUS_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function NEXTSTATE_MREF_F  (
 @NEXTSTATE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.NEXTSTATE_BRIEF_F(NEXTSTATEID, @Lang)  from NEXTSTATE
where @NEXTSTATE_ref like '%'+convert(varchar(38),NEXTSTATEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function OBJECTMODE_BRIEF_F  (
 @OBJECTMODEid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @OBJECTMODEid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from OBJECTMODE where OBJECTMODEID=@OBJECTMODEID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from OBJECTMODE  where  OBJECTMODEID = @OBJECTMODEID 
  select @BRIEF= @BRIEF +
  case DefaultMode 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from OBJECTMODE where OBJECTMODEID=@OBJECTMODEID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function OBJECTMODE_MREF_F  (
 @OBJECTMODE_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.OBJECTMODE_BRIEF_F(OBJECTMODEID, @Lang)  from OBJECTMODE
where @OBJECTMODE_ref like '%'+convert(varchar(38),OBJECTMODEID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function STRUCTRESTRICTION_BRIEF_F  (
 @STRUCTRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @STRUCTRESTRICTIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Struct
  from STRUCTRESTRICTION  where  STRUCTRESTRICTIONID = @STRUCTRESTRICTIONID 
 select @tmpBrief= dbo.PART_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case AllowRead 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowAdd 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowEdit 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowDelete 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from STRUCTRESTRICTION where STRUCTRESTRICTIONID=@STRUCTRESTRICTIONID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function STRUCTRESTRICTION_MREF_F  (
 @STRUCTRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.STRUCTRESTRICTION_BRIEF_F(STRUCTRESTRICTIONID, @Lang)  from STRUCTRESTRICTION
where @STRUCTRESTRICTION_ref like '%'+convert(varchar(38),STRUCTRESTRICTIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function METHODRESTRICTION_BRIEF_F  (
 @METHODRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @METHODRESTRICTIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from METHODRESTRICTION where METHODRESTRICTIONID=@METHODRESTRICTIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Method
  from METHODRESTRICTION  where  METHODRESTRICTIONID = @METHODRESTRICTIONID 
 select @tmpBrief= dbo.SHAREDMETHOD_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case IsRestricted 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from METHODRESTRICTION where METHODRESTRICTIONID=@METHODRESTRICTIONID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function METHODRESTRICTION_MREF_F  (
 @METHODRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.METHODRESTRICTION_BRIEF_F(METHODRESTRICTIONID, @Lang)  from METHODRESTRICTION
where @METHODRESTRICTION_ref like '%'+convert(varchar(38),METHODRESTRICTIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDRESTRICTION_BRIEF_F  (
 @FIELDRESTRICTIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDRESTRICTIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDRESTRICTION where FIELDRESTRICTIONID=@FIELDRESTRICTIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  ThePart
  from FIELDRESTRICTION  where  FIELDRESTRICTIONID = @FIELDRESTRICTIONID 
 select @tmpBrief= dbo.PART_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
select @tmpID =  TheField
  from FIELDRESTRICTION  where  FIELDRESTRICTIONID = @FIELDRESTRICTIONID 
 select @tmpBrief= dbo.FIELD_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case AllowRead 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from FIELDRESTRICTION where FIELDRESTRICTIONID=@FIELDRESTRICTIONID
  select @BRIEF= @BRIEF +
  case AllowModify 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from FIELDRESTRICTION where FIELDRESTRICTIONID=@FIELDRESTRICTIONID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDRESTRICTION_MREF_F  (
 @FIELDRESTRICTION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDRESTRICTION_BRIEF_F(FIELDRESTRICTIONID, @Lang)  from FIELDRESTRICTION
where @FIELDRESTRICTION_ref like '%'+convert(varchar(38),FIELDRESTRICTIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function TYPEMENU_BRIEF_F  (
 @TYPEMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @TYPEMENUid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from TYPEMENU where TYPEMENUID=@TYPEMENUID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from TYPEMENU  where  TYPEMENUID = @TYPEMENUID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function TYPEMENU_MREF_F  (
 @TYPEMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.TYPEMENU_BRIEF_F(TYPEMENUID, @Lang)  from TYPEMENU
where @TYPEMENU_ref like '%'+convert(varchar(38),TYPEMENUID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function INSTANCEVALIDATOR_BRIEF_F  (
 @INSTANCEVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @INSTANCEVALIDATORid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from INSTANCEVALIDATOR where INSTANCEVALIDATORID=@INSTANCEVALIDATORID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from INSTANCEVALIDATOR  where  INSTANCEVALIDATORID = @INSTANCEVALIDATORID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function INSTANCEVALIDATOR_MREF_F  (
 @INSTANCEVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.INSTANCEVALIDATOR_BRIEF_F(INSTANCEVALIDATORID, @Lang)  from INSTANCEVALIDATOR
where @INSTANCEVALIDATOR_ref like '%'+convert(varchar(38),INSTANCEVALIDATORID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PART_BRIEF_F  (
 @PARTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PART where PARTID=@PARTID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from PART  where  PARTID = @PARTID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PART  where  PARTID = @PARTID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PART_MREF_F  (
 @PART_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PART_BRIEF_F(PARTID, @Lang)  from PART
where @PART_ref like '%'+convert(varchar(38),PARTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTMENU_BRIEF_F  (
 @PARTMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTMENUid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTMENU where PARTMENUID=@PARTMENUID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PARTMENU  where  PARTMENUID = @PARTMENUID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTMENU_MREF_F  (
 @PARTMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTMENU_BRIEF_F(PARTMENUID, @Lang)  from PARTMENU
where @PARTMENU_ref like '%'+convert(varchar(38),PARTMENUID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTPARAMMAP_BRIEF_F  (
 @PARTPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTPARAMMAPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTPARAMMAP where PARTPARAMMAPID=@PARTPARAMMAPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), FieldName),'')) + '; '
  from PARTPARAMMAP  where  PARTPARAMMAPID = @PARTPARAMMAPID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ParamName),'')) + '; '
  from PARTPARAMMAP  where  PARTPARAMMAPID = @PARTPARAMMAPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTPARAMMAP_MREF_F  (
 @PARTPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTPARAMMAP_BRIEF_F(PARTPARAMMAPID, @Lang)  from PARTPARAMMAP
where @PARTPARAMMAP_ref like '%'+convert(varchar(38),PARTPARAMMAPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTVIEW_BRIEF_F  (
 @PARTVIEWid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTVIEWid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTVIEW where PARTVIEWID=@PARTVIEWID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from PARTVIEW  where  PARTVIEWID = @PARTVIEWID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTVIEW_MREF_F  (
 @PARTVIEW_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTVIEW_BRIEF_F(PARTVIEWID, @Lang)  from PARTVIEW
where @PARTVIEW_ref like '%'+convert(varchar(38),PARTVIEWID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ViewColumn_BRIEF_F  (
 @ViewColumnid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ViewColumnid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ViewColumn where ViewColumnID=@ViewColumnID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from ViewColumn  where  ViewColumnID = @ViewColumnID 
select @tmpID =  FromPart
  from ViewColumn  where  ViewColumnID = @ViewColumnID 
 select @tmpBrief= dbo.PART_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case Aggregation 
when 3 then 
 'SUM; '
when 1 then 
 'AVG; '
when 6 then 
 'CUSTOM; '
when 0 then 
 'none; '
when 2 then 
 'COUNT; '
when 5 then 
 'MAX; '
when 4 then 
 'MIN; '
  end  from ViewColumn where ViewColumnID=@ViewColumnID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ViewColumn_MREF_F  (
 @ViewColumn_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ViewColumn_BRIEF_F(ViewColumnID, @Lang)  from ViewColumn
where @ViewColumn_ref like '%'+convert(varchar(38),ViewColumnID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function PARTVIEW_LNK_BRIEF_F  (
 @PARTVIEW_LNKid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @PARTVIEW_LNKid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from PARTVIEW_LNK where PARTVIEW_LNKID=@PARTVIEW_LNKID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheView
  from PARTVIEW_LNK  where  PARTVIEW_LNKID = @PARTVIEW_LNKID 
 select @tmpBrief= dbo.PARTVIEW_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function PARTVIEW_LNK_MREF_F  (
 @PARTVIEW_LNK_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.PARTVIEW_LNK_BRIEF_F(PARTVIEW_LNKID, @Lang)  from PARTVIEW_LNK
where @PARTVIEW_LNK_ref like '%'+convert(varchar(38),PARTVIEW_LNKID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function VALIDATOR_BRIEF_F  (
 @VALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @VALIDATORid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from VALIDATOR where VALIDATORID=@VALIDATORID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from VALIDATOR  where  VALIDATORID = @VALIDATORID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function VALIDATOR_MREF_F  (
 @VALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.VALIDATOR_BRIEF_F(VALIDATORID, @Lang)  from VALIDATOR
where @VALIDATOR_ref like '%'+convert(varchar(38),VALIDATORID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function UNIQUECONSTRAINT_BRIEF_F  (
 @UNIQUECONSTRAINTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @UNIQUECONSTRAINTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from UNIQUECONSTRAINT where UNIQUECONSTRAINTID=@UNIQUECONSTRAINTID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from UNIQUECONSTRAINT  where  UNIQUECONSTRAINTID = @UNIQUECONSTRAINTID 
  select @BRIEF= @BRIEF +
  case PerParent 
when -1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from UNIQUECONSTRAINT where UNIQUECONSTRAINTID=@UNIQUECONSTRAINTID
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function UNIQUECONSTRAINT_MREF_F  (
 @UNIQUECONSTRAINT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.UNIQUECONSTRAINT_BRIEF_F(UNIQUECONSTRAINTID, @Lang)  from UNIQUECONSTRAINT
where @UNIQUECONSTRAINT_ref like '%'+convert(varchar(38),UNIQUECONSTRAINTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function CONSTRAINTFIELD_BRIEF_F  (
 @CONSTRAINTFIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @CONSTRAINTFIELDid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from CONSTRAINTFIELD where CONSTRAINTFIELDID=@CONSTRAINTFIELDID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheField
  from CONSTRAINTFIELD  where  CONSTRAINTFIELDID = @CONSTRAINTFIELDID 
 select @tmpBrief= dbo.FIELD_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function CONSTRAINTFIELD_MREF_F  (
 @CONSTRAINTFIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.CONSTRAINTFIELD_BRIEF_F(CONSTRAINTFIELDID, @Lang)  from CONSTRAINTFIELD
where @CONSTRAINTFIELD_ref like '%'+convert(varchar(38),CONSTRAINTFIELDID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ExtenderInterface_BRIEF_F  (
 @ExtenderInterfaceid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ExtenderInterfaceid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ExtenderInterface where ExtenderInterfaceID=@ExtenderInterfaceID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheName),'')) + '; '
  from ExtenderInterface  where  ExtenderInterfaceID = @ExtenderInterfaceID 
select @tmpID =  TargetPlatform
  from ExtenderInterface  where  ExtenderInterfaceID = @ExtenderInterfaceID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheObject),'')) + '; '
  from ExtenderInterface  where  ExtenderInterfaceID = @ExtenderInterfaceID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ExtenderInterface_MREF_F  (
 @ExtenderInterface_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ExtenderInterface_BRIEF_F(ExtenderInterfaceID, @Lang)  from ExtenderInterface
where @ExtenderInterface_ref like '%'+convert(varchar(38),ExtenderInterfaceID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELD_BRIEF_F  (
 @FIELDid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELD where FIELDID=@FIELDID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Caption),'')) + '; '
  from FIELD  where  FIELDID = @FIELDID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FIELD  where  FIELDID = @FIELDID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELD_MREF_F  (
 @FIELD_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELD_BRIEF_F(FIELDID, @Lang)  from FIELD
where @FIELD_ref like '%'+convert(varchar(38),FIELDID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FldExtenders_BRIEF_F  (
 @FldExtendersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FldExtendersid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FldExtenders where FldExtendersID=@FldExtendersID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheName),'')) + '; '
  from FldExtenders  where  FldExtendersID = @FldExtendersID 
select @tmpID =  TargetPlatform
  from FldExtenders  where  FldExtendersID = @FldExtendersID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), TheObject),'')) + '; '
  from FldExtenders  where  FldExtendersID = @FldExtendersID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FldExtenders_MREF_F  (
 @FldExtenders_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FldExtenders_BRIEF_F(FldExtendersID, @Lang)  from FldExtenders
where @FldExtenders_ref like '%'+convert(varchar(38),FldExtendersID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDSRCDEF_BRIEF_F  (
 @FIELDSRCDEFid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDSRCDEFid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDSRCDEF where FIELDSRCDEFID=@FIELDSRCDEFID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), DataSource),'')) + '; '
  from FIELDSRCDEF  where  FIELDSRCDEFID = @FIELDSRCDEFID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDSRCDEF_MREF_F  (
 @FIELDSRCDEF_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDSRCDEF_BRIEF_F(FIELDSRCDEFID, @Lang)  from FIELDSRCDEF
where @FIELDSRCDEF_ref like '%'+convert(varchar(38),FIELDSRCDEFID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function DINAMICFILTERSCRIPT_BRIEF_F  (
 @DINAMICFILTERSCRIPTid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @DINAMICFILTERSCRIPTid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from DINAMICFILTERSCRIPT where DINAMICFILTERSCRIPTID=@DINAMICFILTERSCRIPTID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from DINAMICFILTERSCRIPT  where  DINAMICFILTERSCRIPTID = @DINAMICFILTERSCRIPTID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function DINAMICFILTERSCRIPT_MREF_F  (
 @DINAMICFILTERSCRIPT_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.DINAMICFILTERSCRIPT_BRIEF_F(DINAMICFILTERSCRIPTID, @Lang)  from DINAMICFILTERSCRIPT
where @DINAMICFILTERSCRIPT_ref like '%'+convert(varchar(38),DINAMICFILTERSCRIPTID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDEXPRESSION_BRIEF_F  (
 @FIELDEXPRESSIONid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDEXPRESSIONid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDEXPRESSION where FIELDEXPRESSIONID=@FIELDEXPRESSIONID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from FIELDEXPRESSION  where  FIELDEXPRESSIONID = @FIELDEXPRESSIONID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDEXPRESSION_MREF_F  (
 @FIELDEXPRESSION_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDEXPRESSION_BRIEF_F(FIELDEXPRESSIONID, @Lang)  from FIELDEXPRESSION
where @FIELDEXPRESSION_ref like '%'+convert(varchar(38),FIELDEXPRESSIONID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDVALIDATOR_BRIEF_F  (
 @FIELDVALIDATORid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDVALIDATORid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDVALIDATOR where FIELDVALIDATORID=@FIELDVALIDATORID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Target
  from FIELDVALIDATOR  where  FIELDVALIDATORID = @FIELDVALIDATORID 
 select @tmpBrief= dbo.GENERATOR_TARGET_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDVALIDATOR_MREF_F  (
 @FIELDVALIDATOR_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDVALIDATOR_BRIEF_F(FIELDVALIDATORID, @Lang)  from FIELDVALIDATOR
where @FIELDVALIDATOR_ref like '%'+convert(varchar(38),FIELDVALIDATORID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDMENU_BRIEF_F  (
 @FIELDMENUid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDMENUid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDMENU where FIELDMENUID=@FIELDMENUID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from FIELDMENU  where  FIELDMENUID = @FIELDMENUID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDMENU_MREF_F  (
 @FIELDMENU_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDMENU_BRIEF_F(FIELDMENUID, @Lang)  from FIELDMENU
where @FIELDMENU_ref like '%'+convert(varchar(38),FIELDMENUID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function FIELDPARAMMAP_BRIEF_F  (
 @FIELDPARAMMAPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @FIELDPARAMMAPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from FIELDPARAMMAP where FIELDPARAMMAPID=@FIELDPARAMMAPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), FieldName),'')) + '; '
  from FIELDPARAMMAP  where  FIELDPARAMMAPID = @FIELDPARAMMAPID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), ParamName),'')) + '; '
  from FIELDPARAMMAP  where  FIELDPARAMMAPID = @FIELDPARAMMAPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function FIELDPARAMMAP_MREF_F  (
 @FIELDPARAMMAP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.FIELDPARAMMAP_BRIEF_F(FIELDPARAMMAPID, @Lang)  from FIELDPARAMMAP
where @FIELDPARAMMAP_ref like '%'+convert(varchar(38),FIELDPARAMMAPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function MTZAPP_BRIEF_F  (
 @MTZAPPid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @MTZAPPid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from MTZAPP where MTZAPPID=@MTZAPPID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from MTZAPP  where  MTZAPPID = @MTZAPPID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function MTZAPP_MREF_F  (
 @MTZAPP_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.MTZAPP_BRIEF_F(MTZAPPID, @Lang)  from MTZAPP
where @MTZAPP_ref like '%'+convert(varchar(38),MTZAPPID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function ParentPackage_BRIEF_F  (
 @ParentPackageid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @ParentPackageid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from ParentPackage where ParentPackageID=@ParentPackageID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  Package
  from ParentPackage  where  ParentPackageID = @ParentPackageID 
 select @tmpBrief= dbo.MTZAPP_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function ParentPackage_MREF_F  (
 @ParentPackage_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.ParentPackage_BRIEF_F(ParentPackageID, @Lang)  from ParentPackage
where @ParentPackage_ref like '%'+convert(varchar(38),ParentPackageID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function the_Session_BRIEF_F  (
 @the_Sessionid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @the_Sessionid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from the_Session where the_SessionID=@the_SessionID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  UserRole
  from the_Session  where  the_SessionID = @the_SessionID 
 select @tmpBrief= dbo.Groups_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF +
  case Closed 
when 1 then 
 'Да; '
when 0 then 
 'Нет; '
  end  from the_Session where the_SessionID=@the_SessionID
select @tmpID =  Usersid
  from the_Session  where  the_SessionID = @the_SessionID 
 select @tmpBrief= dbo.Users_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function the_Session_MREF_F  (
 @the_Session_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.the_Session_BRIEF_F(the_SessionID, @Lang)  from the_Session
where @the_Session_ref like '%'+convert(varchar(38),the_SessionID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SysRefCache_BRIEF_F  (
 @SysRefCacheid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SysRefCacheid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SysRefCache where SysRefCacheID=@SysRefCacheID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  SessionID
  from SysRefCache  where  SysRefCacheID = @SysRefCacheID 
 select @tmpBrief= dbo.the_Session_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SysRefCache_MREF_F  (
 @SysRefCache_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SysRefCache_BRIEF_F(SysRefCacheID, @Lang)  from SysRefCache
where @SysRefCache_ref like '%'+convert(varchar(38),SysRefCacheID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function SysLog_BRIEF_F  (
 @SysLogid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @SysLogid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from SysLog where SysLogID=@SysLogID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheSession
  from SysLog  where  SysLogID = @SysLogID 
 select @tmpBrief= dbo.the_Session_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), LogStructID),'')) + '; '
  from SysLog  where  SysLogID = @SysLogID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), VERB),'')) + '; '
  from SysLog  where  SysLogID = @SysLogID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function SysLog_MREF_F  (
 @SysLog_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.SysLog_BRIEF_F(SysLogID, @Lang)  from SysLog
where @SysLog_ref like '%'+convert(varchar(38),SysLogID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_dep_BRIEF_F  (
 @invd_depid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_depid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_dep where invd_depID=@invd_depID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_dep  where  invd_depID = @invd_depID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_dep_MREF_F  (
 @invd_dep_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_dep_BRIEF_F(invd_depID, @Lang)  from invd_dep
where @invd_dep_ref like '%'+convert(varchar(38),invd_depID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_machine_BRIEF_F  (
 @invd_machineid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_machineid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_machine where invd_machineID=@invd_machineID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_machine  where  invd_machineID = @invd_machineID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_machine_MREF_F  (
 @invd_machine_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_machine_BRIEF_F(invd_machineID, @Lang)  from invd_machine
where @invd_machine_ref like '%'+convert(varchar(38),invd_machineID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_zone_BRIEF_F  (
 @invd_zoneid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_zoneid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_zone where invd_zoneID=@invd_zoneID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_zone  where  invd_zoneID = @invd_zoneID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_zone_MREF_F  (
 @invd_zone_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_zone_BRIEF_F(invd_zoneID, @Lang)  from invd_zone
where @invd_zone_ref like '%'+convert(varchar(38),invd_zoneID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Users_BRIEF_F  (
 @Usersid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Usersid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Users where UsersID=@UsersID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Family),'')) + '; '
  from Users  where  UsersID = @UsersID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Users  where  UsersID = @UsersID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), SurName),'')) + '; '
  from Users  where  UsersID = @UsersID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Users_MREF_F  (
 @Users_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Users_BRIEF_F(UsersID, @Lang)  from Users
where @Users_ref like '%'+convert(varchar(38),UsersID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function Groups_BRIEF_F  (
 @Groupsid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @Groupsid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from Groups where GroupsID=@GroupsID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Name),'')) + '; '
  from Groups  where  GroupsID = @GroupsID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function Groups_MREF_F  (
 @Groups_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.Groups_BRIEF_F(GroupsID, @Lang)  from Groups
where @Groups_ref like '%'+convert(varchar(38),GroupsID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function GroupUser_BRIEF_F  (
 @GroupUserid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @GroupUserid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from GroupUser where GroupUserID=@GroupUserID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  TheUser
  from GroupUser  where  GroupUserID = @GroupUserID 
 select @tmpBrief= dbo.Users_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function GroupUser_MREF_F  (
 @GroupUser_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.GroupUser_BRIEF_F(GroupUserID, @Lang)  from GroupUser
where @GroupUser_ref like '%'+convert(varchar(38),GroupUserID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invwh_loc_BRIEF_F  (
 @invwh_locid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invwh_locid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invwh_loc where invwh_locID=@invwh_locID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invwh_loc  where  invwh_locID = @invwh_locID 
select @tmpID =  whZone
  from invwh_loc  where  invwh_locID = @invwh_locID 
 select @tmpBrief= dbo.invd_zone_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invwh_loc_MREF_F  (
 @invwh_loc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invwh_loc_BRIEF_F(invwh_locID, @Lang)  from invwh_loc
where @invwh_loc_ref like '%'+convert(varchar(38),invwh_locID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invwh_cell_BRIEF_F  (
 @invwh_cellid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invwh_cellid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invwh_cell where invwh_cellID=@invwh_cellID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invwh_cell  where  invwh_cellID = @invwh_cellID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invwh_cell_MREF_F  (
 @invwh_cell_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invwh_cell_BRIEF_F(invwh_cellID, @Lang)  from invwh_cell
where @invwh_cell_ref like '%'+convert(varchar(38),invwh_cellID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Views--" File="">
    <BlockHolder BlockName="--Views--" BlockCode=" 
if exists (select * from sysobjects where id = object_id(N'V_invg_grp') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invg_grp
GO
create view V_invg_grp as 
select   invg_grp.invg_grpId
, 
invg_grp.name 
name 
, invg_grp.invg_grpID ID 
, 'invg_grp' VIEWBASE 

 from invg_grp
GO
if exists (select * from sysobjects where id = object_id(N'V_invg_subgrp') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invg_subgrp
GO
create view V_invg_subgrp as 
select   invg_subgrp.invg_subgrpId
, invg_grpId 
, 
invg_subgrp.name 
name 
, invg_subgrp.invg_subgrpID ID 
, 'invg_subgrp' VIEWBASE 

 from invg_subgrp
GO
if exists (select * from sysobjects where id = object_id(N'V_invm_info') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invm_info
GO
create view V_invm_info as 
select   invm_info.invm_infoId
, 
 invm_info.fromcell  
fromcell 
, dbo.invwh_cell_BRIEF_F(invm_info.fromcell, NULL) 
fromcell_name 
, 
 invm_info.toCell  
toCell 
, dbo.invwh_cell_BRIEF_F(invm_info.toCell, NULL) 
toCell_name 
, 
 invm_info.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(invm_info.storepartid, NULL) 
storepartid_name 
, 
invm_info.Qty 
Qty 
, 
invm_info.optime 
optime 
, invm_info.invm_infoID ID 
, 'invm_info' VIEWBASE 

 from invm_info
GO
if exists (select * from sysobjects where id = object_id(N'V_invw_info') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invw_info
GO
create view V_invw_info as 
select   invw_info.invw_infoId
, 
 invw_info.locationid  
locationid 
, dbo.invwh_loc_BRIEF_F(invw_info.locationid, NULL) 
locationid_name 
, 
 invw_info.cellid  
cellid 
, dbo.invwh_cell_BRIEF_F(invw_info.cellid, NULL) 
cellid_name 
, 
 invw_info.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(invw_info.storepartid, NULL) 
storepartid_name 
, 
invw_info.Qty 
Qty 
, invw_info.invw_infoID ID 
, 'invw_info' VIEWBASE 

 from invw_info
GO
if exists (select * from sysobjects where id = object_id(N'V_invp_data') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invp_data
GO
create view V_invp_data as 
select   invp_data.invp_dataId
, 
invp_data.name 
name 
, 
invp_data.RFID 
RFID 
, 
 invp_data.groupid  
groupid 
, dbo.invg_grp_BRIEF_F(invp_data.groupid, NULL) 
groupid_name 
, 
 invp_data.subgroupid  
subgroupid 
, dbo.invg_subgrp_BRIEF_F(invp_data.subgroupid, NULL) 
subgroupid_name 
, 
 invp_data.departmentid  
departmentid 
, dbo.invd_dep_BRIEF_F(invp_data.departmentid, NULL) 
departmentid_name 
, 
 invp_data.machineid  
machineid 
, dbo.invd_machine_BRIEF_F(invp_data.machineid, NULL) 
machineid_name 
, invp_data.invp_dataID ID 
, 'invp_data' VIEWBASE 

 from invp_data
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_info') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_info
GO
create view V_inva_info as 
select   inva_info.inva_infoId
, 
inva_info.invDate 
invDate 
, 
inva_info.invReason 
invReason 
, 
 inva_info.isFinished  
isFinished 
, case inva_info.isFinished 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isFinished_name 
, inva_info.inva_infoID ID 
, 'inva_info' VIEWBASE 

 from inva_info
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_real') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_real
GO
create view V_inva_real as 
select   inva_real.inva_realId
, inva_infoId 
, 
 inva_real.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(inva_real.storepartid, NULL) 
storepartid_name 
, 
inva_real.Qty 
Qty 
, 
 inva_real.locationid  
locationid 
, dbo.invwh_loc_BRIEF_F(inva_real.locationid, NULL) 
locationid_name 
, 
 inva_real.cellid  
cellid 
, dbo.invwh_cell_BRIEF_F(inva_real.cellid, NULL) 
cellid_name 
, inva_real.inva_realID ID 
, 'inva_real' VIEWBASE 

 from inva_real
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_absnt') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_absnt
GO
create view V_inva_absnt as 
select   inva_absnt.inva_absntId
, inva_infoId 
, 
 inva_absnt.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(inva_absnt.storepartid, NULL) 
storepartid_name 
, 
inva_absnt.Qty 
Qty 
, inva_absnt.inva_absntID ID 
, 'inva_absnt' VIEWBASE 

 from inva_absnt
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_extra') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_extra
GO
create view V_inva_extra as 
select   inva_extra.inva_extraId
, inva_infoId 
, 
 inva_extra.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(inva_extra.storepartid, NULL) 
storepartid_name 
, 
inva_extra.Qty 
Qty 
, 
 inva_extra.locationid  
locationid 
, dbo.invwh_loc_BRIEF_F(inva_extra.locationid, NULL) 
locationid_name 
, 
 inva_extra.cellid  
cellid 
, dbo.invwh_cell_BRIEF_F(inva_extra.cellid, NULL) 
cellid_name 
, inva_extra.inva_extraID ID 
, 'inva_extra' VIEWBASE 

 from inva_extra
GO
if exists (select * from sysobjects where id = object_id(N'V_iu_int_modules') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_iu_int_modules
GO
create view V_iu_int_modules as 
select   iu_int_modules.iu_int_modulesId
, 
iu_int_modules.Sequence 
Sequence 
, 
iu_int_modules.TheIcon 
TheIcon 
, 
iu_int_modules.GroupName 
GroupName 
, 
iu_int_modules.name 
name 
, 
iu_int_modules.Caption 
Caption 
, 
 iu_int_modules.visibleControl  
visibleControl 
, case iu_int_modules.visibleControl 
when -1 then 'Да'
when 0 then 'Нет'
 end 
visibleControl_name 
, 
iu_int_modules.controldocmode 
controldocmode 
, 
iu_int_modules.otherdocmode 
otherdocmode 
, 
iu_int_modules.mydocmode 
mydocmode 
, 
 iu_int_modules.AllObjects  
AllObjects 
, case iu_int_modules.AllObjects 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllObjects_name 
, 
 iu_int_modules.ColegsObject  
ColegsObject 
, case iu_int_modules.ColegsObject 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ColegsObject_name 
, 
 iu_int_modules.SubStructObjects  
SubStructObjects 
, case iu_int_modules.SubStructObjects 
when -1 then 'Да'
when 0 then 'Нет'
 end 
SubStructObjects_name 
, iu_int_modules.iu_int_modulesID ID 
, 'iu_int_modules' VIEWBASE 

 from iu_int_modules
GO
if exists (select * from sysobjects where id = object_id(N'V_bpc_info') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_bpc_info
GO
create view V_bpc_info as 
select   bpc_info.bpc_infoId
, 
bpc_info.Name 
Name 
, bpc_info.bpc_infoID ID 
, 'bpc_info' VIEWBASE 

 from bpc_info
GO
if exists (select * from sysobjects where id = object_id(N'V_iu_rcfg_mod') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_iu_rcfg_mod
GO
create view V_iu_rcfg_mod as 
select   iu_rcfg_mod.iu_rcfg_modId
, 
iu_rcfg_mod.Sequence 
Sequence 
, 
iu_rcfg_mod.Caption 
Caption 
, 
 iu_rcfg_mod.ModuleAccessible  
ModuleAccessible 
, case iu_rcfg_mod.ModuleAccessible 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ModuleAccessible_name 
, 
iu_rcfg_mod.TheIcon 
TheIcon 
, 
iu_rcfg_mod.name 
name 
, 
iu_rcfg_mod.GroupName 
GroupName 
, 
 iu_rcfg_mod.AllObjects  
AllObjects 
, case iu_rcfg_mod.AllObjects 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllObjects_name 
, 
 iu_rcfg_mod.ColegsObject  
ColegsObject 
, case iu_rcfg_mod.ColegsObject 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ColegsObject_name 
, 
 iu_rcfg_mod.SubStructObjects  
SubStructObjects 
, case iu_rcfg_mod.SubStructObjects 
when -1 then 'Да'
when 0 then 'Нет'
 end 
SubStructObjects_name 
, 
iu_rcfg_mod.mydocmode 
mydocmode 
, 
iu_rcfg_mod.otherdocmode 
otherdocmode 
, 
iu_rcfg_mod.controldocmode 
controldocmode 
, 
 iu_rcfg_mod.visibleControl  
visibleControl 
, case iu_rcfg_mod.visibleControl 
when -1 then 'Да'
when 0 then 'Нет'
 end 
visibleControl_name 
, iu_rcfg_mod.iu_rcfg_modID ID 
, 'iu_rcfg_mod' VIEWBASE 

 from iu_rcfg_mod
GO
if exists (select * from sysobjects where id = object_id(N'V_iu_rcfg_docmode') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_iu_rcfg_docmode
GO
create view V_iu_rcfg_docmode as 
select   iu_rcfg_docmode.iu_rcfg_docmodeId
, 
 iu_rcfg_docmode.The_Document  
The_Document 
, dbo.OBJECTTYPE_BRIEF_F(iu_rcfg_docmode.The_Document, NULL) 
The_Document_name 
, 
iu_rcfg_docmode.AddMode 
AddMode 
, 
iu_rcfg_docmode.EditMode 
EditMode 
, 
 iu_rcfg_docmode.AllowAdd  
AllowAdd 
, case iu_rcfg_docmode.AllowAdd 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowAdd_name 
, 
 iu_rcfg_docmode.AllowDelete  
AllowDelete 
, case iu_rcfg_docmode.AllowDelete 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowDelete_name 
, iu_rcfg_docmode.iu_rcfg_docmodeID ID 
, 'iu_rcfg_docmode' VIEWBASE 

 from iu_rcfg_docmode
GO
if exists (select * from sysobjects where id = object_id(N'V_iu_rcfg_def') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_iu_rcfg_def
GO
create view V_iu_rcfg_def as 
select   iu_rcfg_def.iu_rcfg_defId
, 
 iu_rcfg_def.therole  
therole 
, dbo.iu_crole_BRIEF_F(iu_rcfg_def.therole, NULL) 
therole_name 
, iu_rcfg_def.iu_rcfg_defID ID 
, 'iu_rcfg_def' VIEWBASE 

 from iu_rcfg_def
GO
if exists (select * from sysobjects where id = object_id(N'V_Num_zones') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Num_zones
GO
create view V_Num_zones as 
select   Num_zones.Num_zonesId
, 
Num_zones.ZoneMask 
ZoneMask 
, Num_zones.Num_zonesID ID 
, 'Num_zones' VIEWBASE 

 from Num_zones
GO
if exists (select * from sysobjects where id = object_id(N'V_Num_Values') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Num_Values
GO
create view V_Num_Values as 
select   Num_Values.Num_ValuesId
, Num_zonesId 
, 
Num_Values.the_Value 
the_Value 
, 
Num_Values.OwnerPartName 
OwnerPartName 
, 
Num_Values.OwnerRowID 
OwnerRowID 
, Num_Values.Num_ValuesID ID 
, 'Num_Values' VIEWBASE 

 from Num_Values
GO
if exists (select * from sysobjects where id = object_id(N'V_Num_head') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Num_head
GO
create view V_Num_head as 
select   Num_head.Num_headId
, 
Num_head.Name 
Name 
, 
 Num_head.Shema  
Shema 
, case Num_head.Shema 
when 2 then 'По кварталу'
when 3 then 'По месяцу'
when 0 then 'Единая зона'
when 4 then 'По дню'
when 1 then 'По году'
when 10 then 'Произвольные зоны'
 end 
Shema_name 
, Num_head.Num_headID ID 
, 'Num_head' VIEWBASE 

 from Num_head
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJournal') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJournal
GO
create view V_ARMJournal as 
select   ARMJournal.ARMJournalId
, 
 ARMJournal.TheJournal  
TheJournal 
, 'не поддерживается' 
TheJournal_name 
, ARMJournal.ARMJournalID ID 
, 'ARMJournal' VIEWBASE 

 from ARMJournal
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJRNLREP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJRNLREP
GO
create view V_ARMJRNLREP as 
select   ARMJRNLREP.ARMJRNLREPId
, ARMJournalId 
, 
ARMJRNLREP.repname 
repname 
, 
 ARMJRNLREP.TheReport  
TheReport 
, 'не поддерживается' 
TheReport_name 
, ARMJRNLREP.ARMJRNLREPID ID 
, 'ARMJRNLREP' VIEWBASE 

 from ARMJRNLREP
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJRNLRUN') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJRNLRUN
GO
create view V_ARMJRNLRUN as 
select   ARMJRNLRUN.ARMJRNLRUNId
, ARMJournalId 
, 
ARMJRNLRUN.Name 
Name 
, 
 ARMJRNLRUN.TheExtention  
TheExtention 
, 'не поддерживается' 
TheExtention_name 
, ARMJRNLRUN.ARMJRNLRUNID ID 
, 'ARMJRNLRUN' VIEWBASE 

 from ARMJRNLRUN
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMJRNLADD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMJRNLADD
GO
create view V_ARMJRNLADD as 
select   ARMJRNLADD.ARMJRNLADDId
, ARMJournalId 
, 
ARMJRNLADD.Name 
Name 
, 
 ARMJRNLADD.TheExtention  
TheExtention 
, 'не поддерживается' 
TheExtention_name 
, ARMJRNLADD.ARMJRNLADDID ID 
, 'ARMJRNLADD' VIEWBASE 

 from ARMJRNLADD
GO
if exists (select * from sysobjects where id = object_id(N'V_EntryPoints') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_EntryPoints
GO
create view V_EntryPoints as 
select   EntryPoints.EntryPointsId
, 
EntryPoints.sequence 
sequence 
, 
EntryPoints.Name 
Name 
, 
EntryPoints.Caption 
Caption 
, 
 EntryPoints.AsToolbarItem  
AsToolbarItem 
, case EntryPoints.AsToolbarItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AsToolbarItem_name 
, 
 EntryPoints.ActionType  
ActionType 
, case EntryPoints.ActionType 
when 4 then 'Запустить АРМ'
when 2 then 'Выполнить метод'
when 5 then 'Открыть отчет'
when 0 then 'Ничего не делать'
when 1 then 'Открыть документ'
when 3 then 'Открыть журнал'
 end 
ActionType_name 
, 
 EntryPoints.TheFilter  
TheFilter 
, 'не поддерживается' 
TheFilter_name 
, 
 EntryPoints.Journal  
Journal 
, 'не поддерживается' 
Journal_name 
, 
 EntryPoints.Report  
Report 
, 'не поддерживается' 
Report_name 
, 
 EntryPoints.Document  
Document 
, 'не поддерживается' 
Document_name 
, 
 EntryPoints.Method  
Method 
, dbo.SHAREDMETHOD_BRIEF_F(EntryPoints.Method, NULL) 
Method_name 
, 
EntryPoints.IconFile 
IconFile 
, 
 EntryPoints.TheExtention  
TheExtention 
, 'не поддерживается' 
TheExtention_name 
, 
 EntryPoints.ARM  
ARM 
, 'не поддерживается' 
ARM_name 
, 
EntryPoints.TheComment 
TheComment 
, 
 EntryPoints.ObjectType  
ObjectType 
, dbo.OBJECTTYPE_BRIEF_F(EntryPoints.ObjectType, NULL) 
ObjectType_name 
, 
EntryPoints.JournalFixedQuery 
JournalFixedQuery 
, 
 EntryPoints.AllowAdd  
AllowAdd 
, case EntryPoints.AllowAdd 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowAdd_name 
, 
 EntryPoints.AllowEdit  
AllowEdit 
, case EntryPoints.AllowEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowEdit_name 
, 
 EntryPoints.AllowDel  
AllowDel 
, case EntryPoints.AllowDel 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowDel_name 
, 
 EntryPoints.AllowFilter  
AllowFilter 
, case EntryPoints.AllowFilter 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowFilter_name 
, 
 EntryPoints.AllowPrint  
AllowPrint 
, case EntryPoints.AllowPrint 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowPrint_name 
, EntryPoints.EntryPointsID ID 
, 'EntryPoints' VIEWBASE 

 from EntryPoints
GO
if exists (select * from sysobjects where id = object_id(N'V_EPFilterLink') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_EPFilterLink
GO
create view V_EPFilterLink as 
select   EPFilterLink.EPFilterLinkId
, EntryPointsId 
, 
EPFilterLink.RowSource 
RowSource 
, 
EPFilterLink.TheExpression 
TheExpression 
, 
EPFilterLink.FilterField 
FilterField 
, EPFilterLink.EPFilterLinkID ID 
, 'EPFilterLink' VIEWBASE 

 from EPFilterLink
GO
if exists (select * from sysobjects where id = object_id(N'V_WorkPlace') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_WorkPlace
GO
create view V_WorkPlace as 
select   WorkPlace.WorkPlaceId
, 
WorkPlace.Name 
Name 
, 
WorkPlace.Caption 
Caption 
, 
WorkPlace.TheVersion 
TheVersion 
, 
 WorkPlace.ThePlatform  
ThePlatform 
, case WorkPlace.ThePlatform 
when 3 then 'OTHER'
when 1 then 'DOTNET'
when 2 then 'JAVA'
when 0 then 'VB6'
 end 
ThePlatform_name 
, 
WorkPlace.TheComment 
TheComment 
, WorkPlace.WorkPlaceID ID 
, 'WorkPlace' VIEWBASE 

 from WorkPlace
GO
if exists (select * from sysobjects where id = object_id(N'V_ARMTypes') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ARMTypes
GO
create view V_ARMTypes as 
select   ARMTypes.ARMTypesId
, 
 ARMTypes.TheDocumentType  
TheDocumentType 
, dbo.OBJECTTYPE_BRIEF_F(ARMTypes.TheDocumentType, NULL) 
TheDocumentType_name 
, ARMTypes.ARMTypesID ID 
, 'ARMTypes' VIEWBASE 

 from ARMTypes
GO
if exists (select * from sysobjects where id = object_id(N'V_JournalColumn') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_JournalColumn
GO
create view V_JournalColumn as 
select   JournalColumn.JournalColumnId
, 
JournalColumn.sequence 
sequence 
, 
JournalColumn.name 
name 
, 
 JournalColumn.ColumnAlignment  
ColumnAlignment 
, case JournalColumn.ColumnAlignment 
when 6 then 'Right Top'
when 7 then 'Right Center'
when 8 then 'Right Bottom'
when 3 then 'Center Top'
when 0 then 'Left Top'
when 4 then 'Center Center'
when 1 then 'Left Center'
when 5 then 'Center Bottom'
when 2 then 'Left Bottom'
 end 
ColumnAlignment_name 
, 
 JournalColumn.ColSort  
ColSort 
, case JournalColumn.ColSort 
when 0 then 'As String'
when 1 then 'As Numeric'
when 2 then 'As Date'
 end 
ColSort_name 
, 
 JournalColumn.GroupAggregation  
GroupAggregation 
, case JournalColumn.GroupAggregation 
when 3 then 'SUM'
when 1 then 'AVG'
when 6 then 'CUSTOM'
when 0 then 'none'
when 2 then 'COUNT'
when 5 then 'MAX'
when 4 then 'MIN'
 end 
GroupAggregation_name 
, JournalColumn.JournalColumnID ID 
, 'JournalColumn' VIEWBASE 

 from JournalColumn
GO
if exists (select * from sysobjects where id = object_id(N'V_JColumnSource') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_JColumnSource
GO
create view V_JColumnSource as 
select   JColumnSource.JColumnSourceId
, JournalColumnId 
, 
 JColumnSource.SrcPartView  
SrcPartView 
, dbo.JournalSrc_BRIEF_F(JColumnSource.SrcPartView, NULL) 
SrcPartView_name 
, 
JColumnSource.ViewField 
ViewField 
, JColumnSource.JColumnSourceID ID 
, 'JColumnSource' VIEWBASE 

 from JColumnSource
GO
if exists (select * from sysobjects where id = object_id(N'V_JournalSrc') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_JournalSrc
GO
create view V_JournalSrc as 
select   JournalSrc.JournalSrcId
, 
JournalSrc.spartview 
spartview 
, 
 JournalSrc.OnRun  
OnRun 
, case JournalSrc.OnRun 
when 2 then 'Открыть документ'
when 0 then 'Ничего не делать'
when 1 then 'Открыть строку'
 end 
OnRun_name 
, 
JournalSrc.OpenMode 
OpenMode 
, 
JournalSrc.ViewAlias 
ViewAlias 
, JournalSrc.JournalSrcID ID 
, 'JournalSrc' VIEWBASE 

 from JournalSrc
GO
if exists (select * from sysobjects where id = object_id(N'V_Journal') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Journal
GO
create view V_Journal as 
select   Journal.JournalId
, 
Journal.Name 
Name 
, 
Journal.the_Alias 
the_Alias 
, 
Journal.TheComment 
TheComment 
, 
Journal.jrnlIconCls 
jrnlIconCls 
, 
 Journal.UseFavorites  
UseFavorites 
, case Journal.UseFavorites 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseFavorites_name 
, Journal.JournalID ID 
, 'Journal' VIEWBASE 

 from Journal
GO
if exists (select * from sysobjects where id = object_id(N'V_RPTStruct') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_RPTStruct
GO
create view V_RPTStruct as 
select   RPTStruct.RPTStructId
, 
RPTStruct.Name 
Name 
, 
RPTStruct.Caption 
Caption 
, RPTStruct.RPTStructID ID 
, 'RPTStruct' VIEWBASE 

 from RPTStruct
GO
if exists (select * from sysobjects where id = object_id(N'V_RPTFields') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_RPTFields
GO
create view V_RPTFields as 
select   RPTFields.RPTFieldsId
, RPTStructId 
, 
RPTFields.Name 
Name 
, 
 RPTFields.FieldType  
FieldType 
, dbo.FIELDTYPE_BRIEF_F(RPTFields.FieldType, NULL) 
FieldType_name 
, 
RPTFields.FieldSize 
FieldSize 
, 
RPTFields.Caption 
Caption 
, RPTFields.RPTFieldsID ID 
, 'RPTFields' VIEWBASE 

 from RPTFields
GO
if exists (select * from sysobjects where id = object_id(N'V_RPTFormula') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_RPTFormula
GO
create view V_RPTFormula as 
select   RPTFormula.RPTFormulaId
, 
RPTFormula.Name 
Name 
, 
RPTFormula.Code 
Code 
, 
 RPTFormula.Platform  
Platform 
, dbo.GENERATOR_TARGET_BRIEF_F(RPTFormula.Platform, NULL) 
Platform_name 
, RPTFormula.RPTFormulaID ID 
, 'RPTFormula' VIEWBASE 

 from RPTFormula
GO
if exists (select * from sysobjects where id = object_id(N'V_Reports') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Reports
GO
create view V_Reports as 
select   Reports.ReportsId
, 
Reports.Name 
Name 
, 
Reports.ReportFile 
ReportFile 
, 
Reports.Caption 
Caption 
, 
 Reports.PrepareMethod  
PrepareMethod 
, dbo.SHAREDMETHOD_BRIEF_F(Reports.PrepareMethod, NULL) 
PrepareMethod_name 
, 
 Reports.ReportType  
ReportType 
, case Reports.ReportType 
when 4 then 'Экспорт по Excel шаблону'
when 0 then 'Таблица'
when 3 then 'Экспорт по WORD шаблону'
when 1 then 'Двумерная матрица'
when 2 then 'Только расчет'
 end 
ReportType_name 
, 
 Reports.TheReportExt  
TheReportExt 
, 'не поддерживается' 
TheReportExt_name 
, 
Reports.ReportView 
ReportView 
, 
Reports.TheComment 
TheComment 
, Reports.ReportsID ID 
, 'Reports' VIEWBASE 

 from Reports
GO
if exists (select * from sysobjects where id = object_id(N'V_FilterFieldGroup') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FilterFieldGroup
GO
create view V_FilterFieldGroup as 
select   FilterFieldGroup.FilterFieldGroupId
, 
FilterFieldGroup.sequence 
sequence 
, 
FilterFieldGroup.Name 
Name 
, 
FilterFieldGroup.Caption 
Caption 
, 
 FilterFieldGroup.AllowIgnore  
AllowIgnore 
, case FilterFieldGroup.AllowIgnore 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowIgnore_name 
, FilterFieldGroup.FilterFieldGroupID ID 
, 'FilterFieldGroup' VIEWBASE 

 from FilterFieldGroup
GO
if exists (select * from sysobjects where id = object_id(N'V_FileterField') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FileterField
GO
create view V_FileterField as 
select   FileterField.FileterFieldId
, FilterFieldGroupId 
, 
FileterField.sequence 
sequence 
, 
FileterField.Name 
Name 
, 
FileterField.Caption 
Caption 
, 
 FileterField.FieldType  
FieldType 
, dbo.FIELDTYPE_BRIEF_F(FileterField.FieldType, NULL) 
FieldType_name 
, 
FileterField.FieldSize 
FieldSize 
, 
 FileterField.RefType  
RefType 
, case FileterField.RefType 
when 3 then 'На источник данных'
when 0 then 'Скалярное поле ( не ссылка)'
when 2 then 'На строку раздела'
when 1 then 'На объект '
 end 
RefType_name 
, 
 FileterField.RefToType  
RefToType 
, dbo.OBJECTTYPE_BRIEF_F(FileterField.RefToType, NULL) 
RefToType_name 
, 
 FileterField.RefToPart  
RefToPart 
, dbo.PART_BRIEF_F(FileterField.RefToPart, NULL) 
RefToPart_name 
, 
 FileterField.ValueArray  
ValueArray 
, case FileterField.ValueArray 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ValueArray_name 
, FileterField.FileterFieldID ID 
, 'FileterField' VIEWBASE 

 from FileterField
GO
if exists (select * from sysobjects where id = object_id(N'V_Filters') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Filters
GO
create view V_Filters as 
select   Filters.FiltersId
, 
Filters.Name 
Name 
, 
Filters.TheCaption 
TheCaption 
, 
Filters.TheComment 
TheComment 
, Filters.FiltersID ID 
, 'Filters' VIEWBASE 

 from Filters
GO
if exists (select * from sysobjects where id = object_id(N'V_MTZExt_def') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_MTZExt_def
GO
create view V_MTZExt_def as 
select   MTZExt_def.MTZExt_defId
, 
MTZExt_def.Name 
Name 
, 
 MTZExt_def.ExtType  
ExtType 
, case MTZExt_def.ExtType 
when 6 then 'VerifyRowExt'
when 7 then 'CodeGenerator'
when 5 then 'DefaultExt'
when 0 then 'StatusExt'
when 4 then 'JrnlRunExt'
when 2 then 'CustomExt'
when 8 then 'ARMGenerator'
when 1 then 'OnFormExt'
when 3 then 'JrnlAddExt'
 end 
ExtType_name 
, 
MTZExt_def.TheDescription 
TheDescription 
, MTZExt_def.MTZExt_defID ID 
, 'MTZExt_def' VIEWBASE 

 from MTZExt_def
GO
if exists (select * from sysobjects where id = object_id(N'V_MTZExtRel') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_MTZExtRel
GO
create view V_MTZExtRel as 
select   MTZExtRel.MTZExtRelId
, 
 MTZExtRel.ThePlatform  
ThePlatform 
, case MTZExtRel.ThePlatform 
when 3 then 'OTHER'
when 1 then 'DOTNET'
when 2 then 'JAVA'
when 0 then 'VB6'
 end 
ThePlatform_name 
, 
MTZExtRel.TheClassName 
TheClassName 
, 
MTZExtRel.TheLibraryName 
TheLibraryName 
, MTZExtRel.MTZExtRelID ID 
, 'MTZExtRel' VIEWBASE 

 from MTZExtRel
GO
if exists (select * from sysobjects where id = object_id(N'V_iu_crole') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_iu_crole
GO
create view V_iu_crole as 
select   iu_crole.iu_croleId
, 
iu_crole.name 
name 
, 
 iu_crole.allowSetUser  
allowSetUser 
, case iu_crole.allowSetUser 
when -1 then 'Да'
when 0 then 'Нет'
 end 
allowSetUser_name 
, iu_crole.iu_croleID ID 
, 'iu_crole' VIEWBASE 

 from iu_crole
GO
if exists (select * from sysobjects where id = object_id(N'V_iu_u_def') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_iu_u_def
GO
create view V_iu_u_def as 
select   iu_u_def.iu_u_defId
, 
 iu_u_def.theClient  
theClient 
, dbo.bpc_info_BRIEF_F(iu_u_def.theClient, NULL) 
theClient_name 
, 
iu_u_def.lastname 
lastname 
, 
iu_u_def.name 
name 
, 
iu_u_def.surname 
surname 
, 
 iu_u_def.curRole  
curRole 
, dbo.iu_crole_BRIEF_F(iu_u_def.curRole, NULL) 
curRole_name 
, 
 iu_u_def.sendtomail  
sendtomail 
, case iu_u_def.sendtomail 
when -1 then 'Да'
when 0 then 'Нет'
 end 
sendtomail_name 
, 
 iu_u_def.freelancer  
freelancer 
, case iu_u_def.freelancer 
when -1 then 'Да'
when 0 then 'Нет'
 end 
freelancer_name 
, 
iu_u_def.email 
email 
, 
iu_u_def.thephone 
thephone 
, 
iu_u_def.login 
login 
, iu_u_def.iu_u_defID ID 
, 'iu_u_def' VIEWBASE 

 from iu_u_def
GO
if exists (select * from sysobjects where id = object_id(N'V_GENPACKAGE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENPACKAGE
GO
create view V_GENPACKAGE as 
select   GENPACKAGE.GENPACKAGEId
, 
GENPACKAGE.Name 
Name 
, GENPACKAGE.GENPACKAGEID ID 
, 'GENPACKAGE' VIEWBASE 

 from GENPACKAGE
GO
if exists (select * from sysobjects where id = object_id(N'V_GENERATOR_TARGET') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENERATOR_TARGET
GO
create view V_GENERATOR_TARGET as 
select   GENERATOR_TARGET.GENERATOR_TARGETId
, GENPACKAGEId 
, 
GENERATOR_TARGET.Name 
Name 
, 
 GENERATOR_TARGET.TargetType  
TargetType 
, case GENERATOR_TARGET.TargetType 
when 0 then 'СУБД'
when 3 then 'Документация'
when 1 then 'МОДЕЛЬ'
when 2 then 'Приложение'
when 4 then 'АРМ'
 end 
TargetType_name 
, 
GENERATOR_TARGET.QueueName 
QueueName 
, 
GENERATOR_TARGET.GeneratorProgID 
GeneratorProgID 
, 
 GENERATOR_TARGET.GeneratorStyle  
GeneratorStyle 
, case GENERATOR_TARGET.GeneratorStyle 
when 0 then 'Один тип'
when 1 then 'Все типы сразу'
 end 
GeneratorStyle_name 
, 
 GENERATOR_TARGET.TheDevelopmentEnv  
TheDevelopmentEnv 
, case GENERATOR_TARGET.TheDevelopmentEnv 
when 3 then 'OTHER'
when 1 then 'DOTNET'
when 2 then 'JAVA'
when 0 then 'VB6'
 end 
TheDevelopmentEnv_name 
, GENERATOR_TARGET.GENERATOR_TARGETID ID 
, 'GENERATOR_TARGET' VIEWBASE 

 from GENERATOR_TARGET
GO
if exists (select * from sysobjects where id = object_id(N'V_GENREFERENCE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENREFERENCE
GO
create view V_GENREFERENCE as 
select   GENREFERENCE.GENREFERENCEId
, GENERATOR_TARGETId 
, 
GENREFERENCE.Name 
Name 
, 
GENREFERENCE.RefClassID 
RefClassID 
, 
GENREFERENCE.VersionMajor 
VersionMajor 
, 
GENREFERENCE.VersionMinor 
VersionMinor 
, GENREFERENCE.GENREFERENCEID ID 
, 'GENREFERENCE' VIEWBASE 

 from GENREFERENCE
GO
if exists (select * from sysobjects where id = object_id(N'V_GENMANUALCODE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENMANUALCODE
GO
create view V_GENMANUALCODE as 
select   GENMANUALCODE.GENMANUALCODEId
, GENERATOR_TARGETId 
, 
GENMANUALCODE.Name 
Name 
, 
GENMANUALCODE.the_Alias 
the_Alias 
, 
GENMANUALCODE.Code 
Code 
, GENMANUALCODE.GENMANUALCODEID ID 
, 'GENMANUALCODE' VIEWBASE 

 from GENMANUALCODE
GO
if exists (select * from sysobjects where id = object_id(N'V_GENCONTROLS') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GENCONTROLS
GO
create view V_GENCONTROLS as 
select   GENCONTROLS.GENCONTROLSId
, GENERATOR_TARGETId 
, 
GENCONTROLS.ControlProgID 
ControlProgID 
, 
GENCONTROLS.ControlClassID 
ControlClassID 
, 
GENCONTROLS.VersionMajor 
VersionMajor 
, 
GENCONTROLS.VersionMinor 
VersionMinor 
, GENCONTROLS.GENCONTROLSID ID 
, 'GENCONTROLS' VIEWBASE 

 from GENCONTROLS
GO
if exists (select * from sysobjects where id = object_id(N'V_LocalizeInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_LocalizeInfo
GO
create view V_LocalizeInfo as 
select   LocalizeInfo.LocalizeInfoId
, 
LocalizeInfo.LangFull 
LangFull 
, 
LocalizeInfo.LangShort 
LangShort 
, LocalizeInfo.LocalizeInfoID ID 
, 'LocalizeInfo' VIEWBASE 

 from LocalizeInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDTYPE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDTYPE
GO
create view V_FIELDTYPE as 
select   FIELDTYPE.FIELDTYPEId
, 
FIELDTYPE.Name 
Name 
, 
 FIELDTYPE.TypeStyle  
TypeStyle 
, case FIELDTYPE.TypeStyle 
when 4 then 'Ссылка'
when 1 then 'Выражение'
when 5 then 'Элемент оформления'
when 3 then 'Интервал'
when 2 then 'Перечисление'
when 0 then 'Скалярный тип'
 end 
TypeStyle_name 
, 
FIELDTYPE.the_Comment 
the_Comment 
, 
 FIELDTYPE.AllowSize  
AllowSize 
, case FIELDTYPE.AllowSize 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowSize_name 
, 
FIELDTYPE.Minimum 
Minimum 
, 
FIELDTYPE.Maximum 
Maximum 
, 
 FIELDTYPE.AllowLikeSearch  
AllowLikeSearch 
, case FIELDTYPE.AllowLikeSearch 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowLikeSearch_name 
, 
 FIELDTYPE.GridSortType  
GridSortType 
, case FIELDTYPE.GridSortType 
when 0 then 'As String'
when 1 then 'As Numeric'
when 2 then 'As Date'
 end 
GridSortType_name 
, 
 FIELDTYPE.DelayedSave  
DelayedSave 
, case FIELDTYPE.DelayedSave 
when -1 then 'Да'
when 0 then 'Нет'
 end 
DelayedSave_name 
, FIELDTYPE.FIELDTYPEID ID 
, 'FIELDTYPE' VIEWBASE 

 from FIELDTYPE
GO
if exists (select * from sysobjects where id = object_id(N'V_ENUMITEM') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ENUMITEM
GO
create view V_ENUMITEM as 
select   ENUMITEM.ENUMITEMId
, FIELDTYPEId 
, 
ENUMITEM.Name 
Name 
, 
ENUMITEM.NameValue 
NameValue 
, 
ENUMITEM.NameInCode 
NameInCode 
, ENUMITEM.ENUMITEMID ID 
, 'ENUMITEM' VIEWBASE 

 from ENUMITEM
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDTYPEMAP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDTYPEMAP
GO
create view V_FIELDTYPEMAP as 
select   FIELDTYPEMAP.FIELDTYPEMAPId
, FIELDTYPEId 
, 
 FIELDTYPEMAP.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(FIELDTYPEMAP.Target, NULL) 
Target_name 
, 
FIELDTYPEMAP.StoageType 
StoageType 
, 
FIELDTYPEMAP.FixedSize 
FixedSize 
, FIELDTYPEMAP.FIELDTYPEMAPID ID 
, 'FIELDTYPEMAP' VIEWBASE 

 from FIELDTYPEMAP
GO
if exists (select * from sysobjects where id = object_id(N'V_SHAREDMETHOD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SHAREDMETHOD
GO
create view V_SHAREDMETHOD as 
select   SHAREDMETHOD.SHAREDMETHODId
, 
SHAREDMETHOD.Name 
Name 
, 
SHAREDMETHOD.the_Comment 
the_Comment 
, 
 SHAREDMETHOD.ReturnType  
ReturnType 
, dbo.FIELDTYPE_BRIEF_F(SHAREDMETHOD.ReturnType, NULL) 
ReturnType_name 
, SHAREDMETHOD.SHAREDMETHODID ID 
, 'SHAREDMETHOD' VIEWBASE 

 from SHAREDMETHOD
GO
if exists (select * from sysobjects where id = object_id(N'V_SCRIPT') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SCRIPT
GO
create view V_SCRIPT as 
select   SCRIPT.SCRIPTId
, SHAREDMETHODId 
, 
 SCRIPT.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(SCRIPT.Target, NULL) 
Target_name 
, 
SCRIPT.Code 
Code 
, SCRIPT.SCRIPTID ID 
, 'SCRIPT' VIEWBASE 

 from SCRIPT
GO
if exists (select * from sysobjects where id = object_id(N'V_PARAMETERS') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARAMETERS
GO
create view V_PARAMETERS as 
select   PARAMETERS.PARAMETERSId
, SCRIPTId 
, 
PARAMETERS.sequence 
sequence 
, 
PARAMETERS.Name 
Name 
, 
PARAMETERS.Caption 
Caption 
, 
 PARAMETERS.TypeOfParm  
TypeOfParm 
, dbo.FIELDTYPE_BRIEF_F(PARAMETERS.TypeOfParm, NULL) 
TypeOfParm_name 
, 
PARAMETERS.DataSize 
DataSize 
, 
 PARAMETERS.AllowNull  
AllowNull 
, case PARAMETERS.AllowNull 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowNull_name 
, 
 PARAMETERS.OutParam  
OutParam 
, case PARAMETERS.OutParam 
when -1 then 'Да'
when 0 then 'Нет'
 end 
OutParam_name 
, 
 PARAMETERS.ReferenceType  
ReferenceType 
, case PARAMETERS.ReferenceType 
when 3 then 'На источник данных'
when 0 then 'Скалярное поле ( не ссылка)'
when 2 then 'На строку раздела'
when 1 then 'На объект '
 end 
ReferenceType_name 
, 
 PARAMETERS.RefToType  
RefToType 
, dbo.OBJECTTYPE_BRIEF_F(PARAMETERS.RefToType, NULL) 
RefToType_name 
, 
 PARAMETERS.RefToPart  
RefToPart 
, dbo.PART_BRIEF_F(PARAMETERS.RefToPart, NULL) 
RefToPart_name 
, PARAMETERS.PARAMETERSID ID 
, 'PARAMETERS' VIEWBASE 

 from PARAMETERS
GO
if exists (select * from sysobjects where id = object_id(N'V_OBJECTTYPE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_OBJECTTYPE
GO
create view V_OBJECTTYPE as 
select   OBJECTTYPE.OBJECTTYPEId
, 
 OBJECTTYPE.Package  
Package 
, dbo.MTZAPP_BRIEF_F(OBJECTTYPE.Package, NULL) 
Package_name 
, 
OBJECTTYPE.the_Comment 
the_Comment 
, 
OBJECTTYPE.Name 
Name 
, 
 OBJECTTYPE.IsSingleInstance  
IsSingleInstance 
, case OBJECTTYPE.IsSingleInstance 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsSingleInstance_name 
, 
 OBJECTTYPE.ChooseView  
ChooseView 
, dbo.PARTVIEW_BRIEF_F(OBJECTTYPE.ChooseView, NULL) 
ChooseView_name 
, 
 OBJECTTYPE.OnRun  
OnRun 
, dbo.TYPEMENU_BRIEF_F(OBJECTTYPE.OnRun, NULL) 
OnRun_name 
, 
 OBJECTTYPE.OnCreate  
OnCreate 
, dbo.TYPEMENU_BRIEF_F(OBJECTTYPE.OnCreate, NULL) 
OnCreate_name 
, 
 OBJECTTYPE.OnDelete  
OnDelete 
, dbo.TYPEMENU_BRIEF_F(OBJECTTYPE.OnDelete, NULL) 
OnDelete_name 
, 
 OBJECTTYPE.AllowRefToObject  
AllowRefToObject 
, case OBJECTTYPE.AllowRefToObject 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowRefToObject_name 
, 
 OBJECTTYPE.AllowSearch  
AllowSearch 
, case OBJECTTYPE.AllowSearch 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowSearch_name 
, 
 OBJECTTYPE.ReplicaType  
ReplicaType 
, case OBJECTTYPE.ReplicaType 
when 1 then 'Построчно'
when 0 then 'Весь документ'
when 2 then 'Локальный'
 end 
ReplicaType_name 
, 
OBJECTTYPE.TheComment 
TheComment 
, 
 OBJECTTYPE.UseOwnership  
UseOwnership 
, case OBJECTTYPE.UseOwnership 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseOwnership_name 
, 
 OBJECTTYPE.UseArchiving  
UseArchiving 
, case OBJECTTYPE.UseArchiving 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseArchiving_name 
, 
 OBJECTTYPE.CommitFullObject  
CommitFullObject 
, case OBJECTTYPE.CommitFullObject 
when -1 then 'Да'
when 0 then 'Нет'
 end 
CommitFullObject_name 
, 
OBJECTTYPE.objIconCls 
objIconCls 
, OBJECTTYPE.OBJECTTYPEID ID 
, 'OBJECTTYPE' VIEWBASE 

 from OBJECTTYPE
GO
if exists (select * from sysobjects where id = object_id(N'V_OBJSTATUS') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_OBJSTATUS
GO
create view V_OBJSTATUS as 
select   OBJSTATUS.OBJSTATUSId
, OBJECTTYPEId 
, 
OBJSTATUS.name 
name 
, 
 OBJSTATUS.isStartup  
isStartup 
, case OBJSTATUS.isStartup 
when -1 then 'Да'
when 0 then 'Нет'
 end 
isStartup_name 
, 
 OBJSTATUS.IsArchive  
IsArchive 
, case OBJSTATUS.IsArchive 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsArchive_name 
, 
OBJSTATUS.the_comment 
the_comment 
, OBJSTATUS.OBJSTATUSID ID 
, 'OBJSTATUS' VIEWBASE 

 from OBJSTATUS
GO
if exists (select * from sysobjects where id = object_id(N'V_NEXTSTATE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_NEXTSTATE
GO
create view V_NEXTSTATE as 
select   NEXTSTATE.NEXTSTATEId
, OBJSTATUSId 
, 
 NEXTSTATE.TheState  
TheState 
, dbo.OBJSTATUS_BRIEF_F(NEXTSTATE.TheState, NULL) 
TheState_name 
, NEXTSTATE.NEXTSTATEID ID 
, 'NEXTSTATE' VIEWBASE 

 from NEXTSTATE
GO
if exists (select * from sysobjects where id = object_id(N'V_OBJECTMODE') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_OBJECTMODE
GO
create view V_OBJECTMODE as 
select   OBJECTMODE.OBJECTMODEId
, OBJECTTYPEId 
, 
OBJECTMODE.Name 
Name 
, 
 OBJECTMODE.DefaultMode  
DefaultMode 
, case OBJECTMODE.DefaultMode 
when -1 then 'Да'
when 0 then 'Нет'
 end 
DefaultMode_name 
, 
OBJECTMODE.TheComment 
TheComment 
, OBJECTMODE.OBJECTMODEID ID 
, 'OBJECTMODE' VIEWBASE 

 from OBJECTMODE
GO
if exists (select * from sysobjects where id = object_id(N'V_STRUCTRESTRICTION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_STRUCTRESTRICTION
GO
create view V_STRUCTRESTRICTION as 
select   STRUCTRESTRICTION.STRUCTRESTRICTIONId
, OBJECTMODEId 
, 
 STRUCTRESTRICTION.Struct  
Struct 
, dbo.PART_BRIEF_F(STRUCTRESTRICTION.Struct, NULL) 
Struct_name 
, 
 STRUCTRESTRICTION.AllowRead  
AllowRead 
, case STRUCTRESTRICTION.AllowRead 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowRead_name 
, 
 STRUCTRESTRICTION.AllowAdd  
AllowAdd 
, case STRUCTRESTRICTION.AllowAdd 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowAdd_name 
, 
 STRUCTRESTRICTION.AllowEdit  
AllowEdit 
, case STRUCTRESTRICTION.AllowEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowEdit_name 
, 
 STRUCTRESTRICTION.AllowDelete  
AllowDelete 
, case STRUCTRESTRICTION.AllowDelete 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowDelete_name 
, STRUCTRESTRICTION.STRUCTRESTRICTIONID ID 
, 'STRUCTRESTRICTION' VIEWBASE 

 from STRUCTRESTRICTION
GO
if exists (select * from sysobjects where id = object_id(N'V_METHODRESTRICTION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_METHODRESTRICTION
GO
create view V_METHODRESTRICTION as 
select   METHODRESTRICTION.METHODRESTRICTIONId
, OBJECTMODEId 
, 
 METHODRESTRICTION.Part  
Part 
, dbo.PART_BRIEF_F(METHODRESTRICTION.Part, NULL) 
Part_name 
, 
 METHODRESTRICTION.Method  
Method 
, dbo.SHAREDMETHOD_BRIEF_F(METHODRESTRICTION.Method, NULL) 
Method_name 
, 
 METHODRESTRICTION.IsRestricted  
IsRestricted 
, case METHODRESTRICTION.IsRestricted 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsRestricted_name 
, METHODRESTRICTION.METHODRESTRICTIONID ID 
, 'METHODRESTRICTION' VIEWBASE 

 from METHODRESTRICTION
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDRESTRICTION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDRESTRICTION
GO
create view V_FIELDRESTRICTION as 
select   FIELDRESTRICTION.FIELDRESTRICTIONId
, OBJECTMODEId 
, 
 FIELDRESTRICTION.ThePart  
ThePart 
, dbo.PART_BRIEF_F(FIELDRESTRICTION.ThePart, NULL) 
ThePart_name 
, 
 FIELDRESTRICTION.TheField  
TheField 
, dbo.FIELD_BRIEF_F(FIELDRESTRICTION.TheField, NULL) 
TheField_name 
, 
 FIELDRESTRICTION.AllowRead  
AllowRead 
, case FIELDRESTRICTION.AllowRead 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowRead_name 
, 
 FIELDRESTRICTION.AllowModify  
AllowModify 
, case FIELDRESTRICTION.AllowModify 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowModify_name 
, 
 FIELDRESTRICTION.MandatoryField  
MandatoryField 
, case FIELDRESTRICTION.MandatoryField 
when -1 then 'Не существенно'
when 1 then 'Да'
when 0 then 'Нет'
 end 
MandatoryField_name 
, FIELDRESTRICTION.FIELDRESTRICTIONID ID 
, 'FIELDRESTRICTION' VIEWBASE 

 from FIELDRESTRICTION
GO
if exists (select * from sysobjects where id = object_id(N'V_TYPEMENU') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_TYPEMENU
GO
create view V_TYPEMENU as 
select   TYPEMENU.TYPEMENUId
, OBJECTTYPEId 
, 
TYPEMENU.Name 
Name 
, 
TYPEMENU.Caption 
Caption 
, 
TYPEMENU.ToolTip 
ToolTip 
, 
 TYPEMENU.the_Action  
the_Action 
, dbo.SHAREDMETHOD_BRIEF_F(TYPEMENU.the_Action, NULL) 
the_Action_name 
, 
 TYPEMENU.IsMenuItem  
IsMenuItem 
, case TYPEMENU.IsMenuItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsMenuItem_name 
, 
 TYPEMENU.IsToolBarButton  
IsToolBarButton 
, case TYPEMENU.IsToolBarButton 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsToolBarButton_name 
, 
TYPEMENU.HotKey 
HotKey 
, TYPEMENU.TYPEMENUID ID 
, 'TYPEMENU' VIEWBASE 

 from TYPEMENU
GO
if exists (select * from sysobjects where id = object_id(N'V_INSTANCEVALIDATOR') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_INSTANCEVALIDATOR
GO
create view V_INSTANCEVALIDATOR as 
select   INSTANCEVALIDATOR.INSTANCEVALIDATORId
, OBJECTTYPEId 
, 
 INSTANCEVALIDATOR.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(INSTANCEVALIDATOR.Target, NULL) 
Target_name 
, 
INSTANCEVALIDATOR.Code 
Code 
, INSTANCEVALIDATOR.INSTANCEVALIDATORID ID 
, 'INSTANCEVALIDATOR' VIEWBASE 

 from INSTANCEVALIDATOR
GO
if exists (select * from sysobjects where id = object_id(N'V_PART') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PART
GO
create view V_PART as 
select   PART.PARTId
, OBJECTTYPEId 
, 
PART.Sequence 
Sequence 
, 
 PART.PartType  
PartType 
, case PART.PartType 
when 1 then 'Коллекция'
when 2 then 'Дерево'
when 0 then 'Строка'
when 4 then 'Расширение с данными'
when 3 then 'Расширение'
 end 
PartType_name 
, 
PART.Caption 
Caption 
, 
PART.Name 
Name 
, 
PART.the_Comment 
the_Comment 
, 
 PART.NoLog  
NoLog 
, case PART.NoLog 
when -1 then 'Да'
when 0 then 'Нет'
 end 
NoLog_name 
, 
 PART.ManualRegister  
ManualRegister 
, case PART.ManualRegister 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ManualRegister_name 
, 
 PART.OnCreate  
OnCreate 
, dbo.PARTMENU_BRIEF_F(PART.OnCreate, NULL) 
OnCreate_name 
, 
 PART.OnSave  
OnSave 
, dbo.PARTMENU_BRIEF_F(PART.OnSave, NULL) 
OnSave_name 
, 
 PART.OnRun  
OnRun 
, dbo.PARTMENU_BRIEF_F(PART.OnRun, NULL) 
OnRun_name 
, 
 PART.OnDelete  
OnDelete 
, dbo.PARTMENU_BRIEF_F(PART.OnDelete, NULL) 
OnDelete_name 
, 
 PART.AddBehaivor  
AddBehaivor 
, case PART.AddBehaivor 
when 0 then 'AddForm'
when 2 then 'RunAction'
when 1 then 'RefreshOnly'
 end 
AddBehaivor_name 
, 
 PART.ExtenderObject  
ExtenderObject 
, 'не поддерживается' 
ExtenderObject_name 
, 
PART.shablonBrief 
shablonBrief 
, 
PART.ruleBrief 
ruleBrief 
, 
 PART.IsJormalChange  
IsJormalChange 
, case PART.IsJormalChange 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsJormalChange_name 
, 
 PART.UseArchiving  
UseArchiving 
, case PART.UseArchiving 
when -1 then 'Да'
when 0 then 'Нет'
 end 
UseArchiving_name 
, 
 PART.integerpkey  
integerpkey 
, case PART.integerpkey 
when -1 then 'Да'
when 0 then 'Нет'
 end 
integerpkey_name 
, 
PART.partIconCls 
partIconCls 
, PART.PARTID ID 
, 'PART' VIEWBASE 

 from PART
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTMENU') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTMENU
GO
create view V_PARTMENU as 
select   PARTMENU.PARTMENUId
, PARTId 
, 
PARTMENU.Name 
Name 
, 
PARTMENU.Caption 
Caption 
, 
PARTMENU.ToolTip 
ToolTip 
, 
 PARTMENU.the_Action  
the_Action 
, dbo.SHAREDMETHOD_BRIEF_F(PARTMENU.the_Action, NULL) 
the_Action_name 
, 
 PARTMENU.IsMenuItem  
IsMenuItem 
, case PARTMENU.IsMenuItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsMenuItem_name 
, 
 PARTMENU.IsToolBarButton  
IsToolBarButton 
, case PARTMENU.IsToolBarButton 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsToolBarButton_name 
, 
PARTMENU.HotKey 
HotKey 
, PARTMENU.PARTMENUID ID 
, 'PARTMENU' VIEWBASE 

 from PARTMENU
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTPARAMMAP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTPARAMMAP
GO
create view V_PARTPARAMMAP as 
select   PARTPARAMMAP.PARTPARAMMAPId
, PARTMENUId 
, 
PARTPARAMMAP.FieldName 
FieldName 
, 
PARTPARAMMAP.ParamName 
ParamName 
, 
 PARTPARAMMAP.NoEdit  
NoEdit 
, case PARTPARAMMAP.NoEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
NoEdit_name 
, PARTPARAMMAP.PARTPARAMMAPID ID 
, 'PARTPARAMMAP' VIEWBASE 

 from PARTPARAMMAP
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTVIEW') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTVIEW
GO
create view V_PARTVIEW as 
select   PARTVIEW.PARTVIEWId
, PARTId 
, 
PARTVIEW.Name 
Name 
, 
PARTVIEW.the_Alias 
the_Alias 
, 
 PARTVIEW.ForChoose  
ForChoose 
, case PARTVIEW.ForChoose 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ForChoose_name 
, 
PARTVIEW.FilterField0 
FilterField0 
, 
PARTVIEW.FilterField1 
FilterField1 
, 
PARTVIEW.FilterField2 
FilterField2 
, 
PARTVIEW.FilterField3 
FilterField3 
, PARTVIEW.PARTVIEWID ID 
, 'PARTVIEW' VIEWBASE 

 from PARTVIEW
GO
if exists (select * from sysobjects where id = object_id(N'V_ViewColumn') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ViewColumn
GO
create view V_ViewColumn as 
select   ViewColumn.ViewColumnId
, PARTVIEWId 
, 
ViewColumn.sequence 
sequence 
, 
ViewColumn.Name 
Name 
, 
ViewColumn.the_Alias 
the_Alias 
, 
 ViewColumn.FromPart  
FromPart 
, dbo.PART_BRIEF_F(ViewColumn.FromPart, NULL) 
FromPart_name 
, 
 ViewColumn.Field  
Field 
, dbo.FIELD_BRIEF_F(ViewColumn.Field, NULL) 
Field_name 
, 
 ViewColumn.Aggregation  
Aggregation 
, case ViewColumn.Aggregation 
when 3 then 'SUM'
when 1 then 'AVG'
when 6 then 'CUSTOM'
when 0 then 'none'
when 2 then 'COUNT'
when 5 then 'MAX'
when 4 then 'MIN'
 end 
Aggregation_name 
, 
ViewColumn.Expression 
Expression 
, 
 ViewColumn.ForCombo  
ForCombo 
, case ViewColumn.ForCombo 
when -1 then 'Да'
when 0 then 'Нет'
 end 
ForCombo_name 
, ViewColumn.ViewColumnID ID 
, 'ViewColumn' VIEWBASE 

 from ViewColumn
GO
if exists (select * from sysobjects where id = object_id(N'V_PARTVIEW_LNK') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_PARTVIEW_LNK
GO
create view V_PARTVIEW_LNK as 
select   PARTVIEW_LNK.PARTVIEW_LNKId
, PARTVIEWId 
, 
 PARTVIEW_LNK.TheView  
TheView 
, dbo.PARTVIEW_BRIEF_F(PARTVIEW_LNK.TheView, NULL) 
TheView_name 
, 
 PARTVIEW_LNK.TheJoinSource  
TheJoinSource 
, dbo.ViewColumn_BRIEF_F(PARTVIEW_LNK.TheJoinSource, NULL) 
TheJoinSource_name 
, 
 PARTVIEW_LNK.RefType  
RefType 
, case PARTVIEW_LNK.RefType 
when 0 then 'Нет'
when 4 then 'Связка ParentStructRowID  (в передлах объекта)'
when 3 then 'Связка InstanceID (в передлах объекта)'
when 1 then 'Ссылка на объект'
when 2 then 'Ссылка на строку'
 end 
RefType_name 
, 
 PARTVIEW_LNK.TheJoinDestination  
TheJoinDestination 
, dbo.ViewColumn_BRIEF_F(PARTVIEW_LNK.TheJoinDestination, NULL) 
TheJoinDestination_name 
, 
PARTVIEW_LNK.HandJoin 
HandJoin 
, 
PARTVIEW_LNK.SEQ 
SEQ 
, PARTVIEW_LNK.PARTVIEW_LNKID ID 
, 'PARTVIEW_LNK' VIEWBASE 

 from PARTVIEW_LNK
GO
if exists (select * from sysobjects where id = object_id(N'V_VALIDATOR') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_VALIDATOR
GO
create view V_VALIDATOR as 
select   VALIDATOR.VALIDATORId
, PARTId 
, 
 VALIDATOR.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(VALIDATOR.Target, NULL) 
Target_name 
, 
VALIDATOR.Code 
Code 
, VALIDATOR.VALIDATORID ID 
, 'VALIDATOR' VIEWBASE 

 from VALIDATOR
GO
if exists (select * from sysobjects where id = object_id(N'V_UNIQUECONSTRAINT') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_UNIQUECONSTRAINT
GO
create view V_UNIQUECONSTRAINT as 
select   UNIQUECONSTRAINT.UNIQUECONSTRAINTId
, PARTId 
, 
UNIQUECONSTRAINT.Name 
Name 
, 
 UNIQUECONSTRAINT.PerParent  
PerParent 
, case UNIQUECONSTRAINT.PerParent 
when -1 then 'Да'
when 0 then 'Нет'
 end 
PerParent_name 
, 
UNIQUECONSTRAINT.TheComment 
TheComment 
, UNIQUECONSTRAINT.UNIQUECONSTRAINTID ID 
, 'UNIQUECONSTRAINT' VIEWBASE 

 from UNIQUECONSTRAINT
GO
if exists (select * from sysobjects where id = object_id(N'V_CONSTRAINTFIELD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_CONSTRAINTFIELD
GO
create view V_CONSTRAINTFIELD as 
select   CONSTRAINTFIELD.CONSTRAINTFIELDId
, UNIQUECONSTRAINTId 
, 
 CONSTRAINTFIELD.TheField  
TheField 
, dbo.FIELD_BRIEF_F(CONSTRAINTFIELD.TheField, NULL) 
TheField_name 
, CONSTRAINTFIELD.CONSTRAINTFIELDID ID 
, 'CONSTRAINTFIELD' VIEWBASE 

 from CONSTRAINTFIELD
GO
if exists (select * from sysobjects where id = object_id(N'V_ExtenderInterface') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ExtenderInterface
GO
create view V_ExtenderInterface as 
select   ExtenderInterface.ExtenderInterfaceId
, PARTId 
, 
ExtenderInterface.TheName 
TheName 
, 
 ExtenderInterface.TargetPlatform  
TargetPlatform 
, dbo.GENERATOR_TARGET_BRIEF_F(ExtenderInterface.TargetPlatform, NULL) 
TargetPlatform_name 
, 
ExtenderInterface.TheObject 
TheObject 
, 
ExtenderInterface.TheConfig 
TheConfig 
, ExtenderInterface.ExtenderInterfaceID ID 
, 'ExtenderInterface' VIEWBASE 

 from ExtenderInterface
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELD') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELD
GO
create view V_FIELD as 
select   FIELD.FIELDId
, PARTId 
, 
FIELD.TabName 
TabName 
, 
FIELD.FieldGroupBox 
FieldGroupBox 
, 
FIELD.Sequence 
Sequence 
, 
FIELD.Caption 
Caption 
, 
FIELD.Name 
Name 
, 
 FIELD.FieldType  
FieldType 
, dbo.FIELDTYPE_BRIEF_F(FIELD.FieldType, NULL) 
FieldType_name 
, 
 FIELD.IsBrief  
IsBrief 
, case FIELD.IsBrief 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsBrief_name 
, 
 FIELD.IsTabBrief  
IsTabBrief 
, case FIELD.IsTabBrief 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsTabBrief_name 
, 
 FIELD.AllowNull  
AllowNull 
, case FIELD.AllowNull 
when -1 then 'Да'
when 0 then 'Нет'
 end 
AllowNull_name 
, 
FIELD.DataSize 
DataSize 
, 
 FIELD.ReferenceType  
ReferenceType 
, case FIELD.ReferenceType 
when 3 then 'На источник данных'
when 0 then 'Скалярное поле ( не ссылка)'
when 2 then 'На строку раздела'
when 1 then 'На объект '
 end 
ReferenceType_name 
, 
 FIELD.RefToType  
RefToType 
, dbo.OBJECTTYPE_BRIEF_F(FIELD.RefToType, NULL) 
RefToType_name 
, 
 FIELD.RefToPart  
RefToPart 
, dbo.PART_BRIEF_F(FIELD.RefToPart, NULL) 
RefToPart_name 
, 
FIELD.TheStyle 
TheStyle 
, 
 FIELD.InternalReference  
InternalReference 
, case FIELD.InternalReference 
when -1 then 'Да'
when 0 then 'Нет'
 end 
InternalReference_name 
, 
 FIELD.CreateRefOnly  
CreateRefOnly 
, case FIELD.CreateRefOnly 
when -1 then 'Да'
when 0 then 'Нет'
 end 
CreateRefOnly_name 
, 
 FIELD.IsAutoNumber  
IsAutoNumber 
, case FIELD.IsAutoNumber 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsAutoNumber_name 
, 
 FIELD.TheNumerator  
TheNumerator 
, 'не поддерживается' 
TheNumerator_name 
, 
FIELD.ZoneTemplate 
ZoneTemplate 
, 
 FIELD.NumberDateField  
NumberDateField 
, dbo.FIELD_BRIEF_F(FIELD.NumberDateField, NULL) 
NumberDateField_name 
, 
FIELD.TheComment 
TheComment 
, 
FIELD.shablonBrief 
shablonBrief 
, 
FIELD.theNameClass 
theNameClass 
, 
FIELD.TheMask 
TheMask 
, FIELD.FIELDID ID 
, 'FIELD' VIEWBASE 

 from FIELD
GO
if exists (select * from sysobjects where id = object_id(N'V_FldExtenders') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FldExtenders
GO
create view V_FldExtenders as 
select   FldExtenders.FldExtendersId
, FIELDId 
, 
FldExtenders.TheName 
TheName 
, 
 FldExtenders.TargetPlatform  
TargetPlatform 
, dbo.GENERATOR_TARGET_BRIEF_F(FldExtenders.TargetPlatform, NULL) 
TargetPlatform_name 
, 
FldExtenders.TheObject 
TheObject 
, 
FldExtenders.TheConfig 
TheConfig 
, FldExtenders.FldExtendersID ID 
, 'FldExtenders' VIEWBASE 

 from FldExtenders
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDSRCDEF') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDSRCDEF
GO
create view V_FIELDSRCDEF as 
select   FIELDSRCDEF.FIELDSRCDEFId
, FIELDId 
, 
FIELDSRCDEF.Provider 
Provider 
, 
FIELDSRCDEF.ConnectionString 
ConnectionString 
, 
FIELDSRCDEF.DataSource 
DataSource 
, 
FIELDSRCDEF.IDField 
IDField 
, 
FIELDSRCDEF.BriefString 
BriefString 
, 
FIELDSRCDEF.FilterString 
FilterString 
, 
FIELDSRCDEF.SortField 
SortField 
, 
FIELDSRCDEF.DescriptionString 
DescriptionString 
, 
 FIELDSRCDEF.DontShowDialog  
DontShowDialog 
, case FIELDSRCDEF.DontShowDialog 
when 1 then 'Да'
when 0 then 'Нет'
 end 
DontShowDialog_name 
, FIELDSRCDEF.FIELDSRCDEFID ID 
, 'FIELDSRCDEF' VIEWBASE 

 from FIELDSRCDEF
GO
if exists (select * from sysobjects where id = object_id(N'V_DINAMICFILTERSCRIPT') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_DINAMICFILTERSCRIPT
GO
create view V_DINAMICFILTERSCRIPT as 
select   DINAMICFILTERSCRIPT.DINAMICFILTERSCRIPTId
, FIELDId 
, 
 DINAMICFILTERSCRIPT.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(DINAMICFILTERSCRIPT.Target, NULL) 
Target_name 
, 
DINAMICFILTERSCRIPT.Code 
Code 
, DINAMICFILTERSCRIPT.DINAMICFILTERSCRIPTID ID 
, 'DINAMICFILTERSCRIPT' VIEWBASE 

 from DINAMICFILTERSCRIPT
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDEXPRESSION') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDEXPRESSION
GO
create view V_FIELDEXPRESSION as 
select   FIELDEXPRESSION.FIELDEXPRESSIONId
, FIELDId 
, 
 FIELDEXPRESSION.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(FIELDEXPRESSION.Target, NULL) 
Target_name 
, 
FIELDEXPRESSION.Code 
Code 
, FIELDEXPRESSION.FIELDEXPRESSIONID ID 
, 'FIELDEXPRESSION' VIEWBASE 

 from FIELDEXPRESSION
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDVALIDATOR') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDVALIDATOR
GO
create view V_FIELDVALIDATOR as 
select   FIELDVALIDATOR.FIELDVALIDATORId
, FIELDId 
, 
 FIELDVALIDATOR.Target  
Target 
, dbo.GENERATOR_TARGET_BRIEF_F(FIELDVALIDATOR.Target, NULL) 
Target_name 
, 
FIELDVALIDATOR.Code 
Code 
, FIELDVALIDATOR.FIELDVALIDATORID ID 
, 'FIELDVALIDATOR' VIEWBASE 

 from FIELDVALIDATOR
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDMENU') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDMENU
GO
create view V_FIELDMENU as 
select   FIELDMENU.FIELDMENUId
, FIELDId 
, 
FIELDMENU.Name 
Name 
, 
FIELDMENU.Caption 
Caption 
, 
FIELDMENU.ToolTip 
ToolTip 
, 
 FIELDMENU.ActionID  
ActionID 
, dbo.SHAREDMETHOD_BRIEF_F(FIELDMENU.ActionID, NULL) 
ActionID_name 
, 
 FIELDMENU.IsMenuItem  
IsMenuItem 
, case FIELDMENU.IsMenuItem 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsMenuItem_name 
, 
 FIELDMENU.IsToolBarButton  
IsToolBarButton 
, case FIELDMENU.IsToolBarButton 
when -1 then 'Да'
when 0 then 'Нет'
 end 
IsToolBarButton_name 
, 
FIELDMENU.HotKey 
HotKey 
, FIELDMENU.FIELDMENUID ID 
, 'FIELDMENU' VIEWBASE 

 from FIELDMENU
GO
if exists (select * from sysobjects where id = object_id(N'V_FIELDPARAMMAP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_FIELDPARAMMAP
GO
create view V_FIELDPARAMMAP as 
select   FIELDPARAMMAP.FIELDPARAMMAPId
, FIELDMENUId 
, 
FIELDPARAMMAP.FieldName 
FieldName 
, 
FIELDPARAMMAP.ParamName 
ParamName 
, 
 FIELDPARAMMAP.NoEdit  
NoEdit 
, case FIELDPARAMMAP.NoEdit 
when -1 then 'Да'
when 0 then 'Нет'
 end 
NoEdit_name 
, FIELDPARAMMAP.FIELDPARAMMAPID ID 
, 'FIELDPARAMMAP' VIEWBASE 

 from FIELDPARAMMAP
GO
if exists (select * from sysobjects where id = object_id(N'V_MTZAPP') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_MTZAPP
GO
create view V_MTZAPP as 
select   MTZAPP.MTZAPPId
, 
MTZAPP.Name 
Name 
, 
MTZAPP.DBName 
DBName 
, 
MTZAPP.TheComment 
TheComment 
, MTZAPP.MTZAPPID ID 
, 'MTZAPP' VIEWBASE 

 from MTZAPP
GO
if exists (select * from sysobjects where id = object_id(N'V_ParentPackage') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_ParentPackage
GO
create view V_ParentPackage as 
select   ParentPackage.ParentPackageId
, MTZAPPId 
, 
 ParentPackage.Package  
Package 
, dbo.MTZAPP_BRIEF_F(ParentPackage.Package, NULL) 
Package_name 
, ParentPackage.ParentPackageID ID 
, 'ParentPackage' VIEWBASE 

 from ParentPackage
GO
if exists (select * from sysobjects where id = object_id(N'V_the_Session') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_the_Session
GO
create view V_the_Session as 
select   the_Session.the_SessionId
, 
 the_Session.ApplicationID  
ApplicationID 
, dbo.WorkPlace_BRIEF_F(the_Session.ApplicationID, NULL) 
ApplicationID_name 
, 
 the_Session.UserRole  
UserRole 
, dbo.Groups_BRIEF_F(the_Session.UserRole, NULL) 
UserRole_name 
, 
the_Session.ClosedAt 
ClosedAt 
, 
 the_Session.Closed  
Closed 
, case the_Session.Closed 
when 1 then 'Да'
when 0 then 'Нет'
 end 
Closed_name 
, 
 the_Session.Usersid  
Usersid 
, dbo.Users_BRIEF_F(the_Session.Usersid, NULL) 
Usersid_name 
, 
the_Session.LastAccess 
LastAccess 
, 
the_Session.StartAt 
StartAt 
, 
the_Session.Lang 
Lang 
, 
the_Session.Login 
Login 
, the_Session.the_SessionID ID 
, 'the_Session' VIEWBASE 

 from the_Session
GO
if exists (select * from sysobjects where id = object_id(N'V_SysRefCache') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SysRefCache
GO
create view V_SysRefCache as 
select   SysRefCache.SysRefCacheId
, 
 SysRefCache.CacheType  
CacheType 
, case SysRefCache.CacheType 
when 4 then 'Space'
when 3 then 'Mark'
when 2 then 'Odd'
when 0 then 'None'
when 1 then 'Even'
 end 
CacheType_name 
, 
SysRefCache.ObjectOwnerID 
ObjectOwnerID 
, 
 SysRefCache.SessionID  
SessionID 
, dbo.the_Session_BRIEF_F(SysRefCache.SessionID, NULL) 
SessionID_name 
, 
SysRefCache.modulename 
modulename 
, SysRefCache.SysRefCacheID ID 
, 'SysRefCache' VIEWBASE 

 from SysRefCache
GO
if exists (select * from sysobjects where id = object_id(N'V_SysLog') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_SysLog
GO
create view V_SysLog as 
select   SysLog.SysLogId
, 
 SysLog.TheSession  
TheSession 
, dbo.the_Session_BRIEF_F(SysLog.TheSession, NULL) 
TheSession_name 
, 
SysLog.the_Resource 
the_Resource 
, 
SysLog.LogStructID 
LogStructID 
, 
SysLog.VERB 
VERB 
, 
SysLog.LogInstanceID 
LogInstanceID 
, SysLog.SysLogID ID 
, 'SysLog' VIEWBASE 

 from SysLog
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_dep') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_dep
GO
create view V_invd_dep as 
select   invd_dep.invd_depId
, 
invd_dep.name 
name 
, invd_dep.invd_depID ID 
, 'invd_dep' VIEWBASE 

 from invd_dep
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_machine') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_machine
GO
create view V_invd_machine as 
select   invd_machine.invd_machineId
, 
invd_machine.name 
name 
, invd_machine.invd_machineID ID 
, 'invd_machine' VIEWBASE 

 from invd_machine
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_zone') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_zone
GO
create view V_invd_zone as 
select   invd_zone.invd_zoneId
, 
invd_zone.name 
name 
, invd_zone.invd_zoneID ID 
, 'invd_zone' VIEWBASE 

 from invd_zone
GO
if exists (select * from sysobjects where id = object_id(N'V_Users') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Users
GO
create view V_Users as 
select   Users.UsersId
, 
Users.Family 
Family 
, 
Users.Name 
Name 
, 
Users.SurName 
SurName 
, 
Users.Login 
Login 
, 
Users.Password 
Password 
, 
Users.DomaiName 
DomaiName 
, 
Users.EMail 
EMail 
, 
Users.Phone 
Phone 
, 
Users.LocalPhone 
LocalPhone 
, Users.UsersID ID 
, 'Users' VIEWBASE 

 from Users
GO
if exists (select * from sysobjects where id = object_id(N'V_Groups') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_Groups
GO
create view V_Groups as 
select   Groups.GroupsId
, 
Groups.Name 
Name 
, 
Groups.ADGroup 
ADGroup 
, Groups.GroupsID ID 
, 'Groups' VIEWBASE 

 from Groups
GO
if exists (select * from sysobjects where id = object_id(N'V_GroupUser') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_GroupUser
GO
create view V_GroupUser as 
select   GroupUser.GroupUserId
, GroupsId 
, 
 GroupUser.TheUser  
TheUser 
, dbo.Users_BRIEF_F(GroupUser.TheUser, NULL) 
TheUser_name 
, GroupUser.GroupUserID ID 
, 'GroupUser' VIEWBASE 

 from GroupUser
GO
if exists (select * from sysobjects where id = object_id(N'V_invwh_loc') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invwh_loc
GO
create view V_invwh_loc as 
select   invwh_loc.invwh_locId
, 
invwh_loc.name 
name 
, 
 invwh_loc.whZone  
whZone 
, dbo.invd_zone_BRIEF_F(invwh_loc.whZone, NULL) 
whZone_name 
, invwh_loc.invwh_locID ID 
, 'invwh_loc' VIEWBASE 

 from invwh_loc
GO
if exists (select * from sysobjects where id = object_id(N'V_invwh_cell') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invwh_cell
GO
create view V_invwh_cell as 
select   invwh_cell.invwh_cellId
, invwh_locId 
, 
invwh_cell.name 
name 
, 
invwh_cell.SHCODE 
SHCODE 
, invwh_cell.invwh_cellID ID 
, 'invwh_cell' VIEWBASE 

 from invwh_cell
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
</root>