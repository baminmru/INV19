<?xml version="1.0"?>
<root>
  <ModuleHolder ModuleName="--Tables" File="">
    <BlockHolder BlockName="--body" BlockCode=" 
/* TYPE=invg (Группы) */
GO
/*Группа*/
if not exists (select * from sysobjects where id = object_id(N'invg_grp') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invg_grp/**/ (
invg_grpid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invg_grp'))
alter table invg_grp add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invg_grp
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invg_grp')
and name not in('invg_grpID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invg_grp drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invg_grp') and xtype='PK' and type='K')
ALTER TABLE invg_grp DROP CONSTRAINT pk_invg_grp
GO
alter table invg_grp add constraint pk_invg_grp primary key (invg_grpID)

GO
/*Подгруппа*/
if not exists (select * from sysobjects where id = object_id(N'invg_subgrp') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invg_subgrp/**/ (
invg_subgrpid uniqueidentifier not null rowguidcol default ( newid())  
,invg_grpID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invg_subgrp'))
alter table invg_subgrp add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invg_subgrp
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invg_subgrp')
and name not in('invg_subgrpID','invg_grpID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invg_subgrp drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invg_subgrp') and xtype='PK' and type='K')
ALTER TABLE invg_subgrp DROP CONSTRAINT pk_invg_subgrp
GO
alter table invg_subgrp add constraint pk_invg_subgrp primary key (invg_subgrpID)

GO
/* TYPE=invi (Запчасть) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'invp_data') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invp_data/**/ (
invp_dataid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invp_data'))
alter table invp_data add 
name
 VARCHAR (120) null /* Название */
go
if  not exists(select * from syscolumns where name='groupid' and id=object_id(N'invp_data'))
alter table invp_data add 
groupid
 UNIQUEIDENTIFIER null /* Группа */
go
if  not exists(select * from syscolumns where name='subgroupid' and id=object_id(N'invp_data'))
alter table invp_data add 
subgroupid
 UNIQUEIDENTIFIER null /* Подгруппа */
go
if  not exists(select * from syscolumns where name='departmentid' and id=object_id(N'invp_data'))
alter table invp_data add 
departmentid
 UNIQUEIDENTIFIER null /* Отдел */
go
if  not exists(select * from syscolumns where name='machineid' and id=object_id(N'invp_data'))
alter table invp_data add 
machineid
 UNIQUEIDENTIFIER null /* Машина */
go
go
-- drop extra columns from generated table: invp_data
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invp_data')
and name not in('invp_dataID','name','groupid','subgroupid','departmentid','machineid')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invp_data drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invp_data') and xtype='PK' and type='K')
ALTER TABLE invp_data DROP CONSTRAINT pk_invp_data
GO
alter table invp_data add constraint pk_invp_data primary key (invp_dataID)

GO
/*Метки*/
if not exists (select * from sysobjects where id = object_id(N'invp_tag') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invp_tag/*метки к этой запчасти*/ (
invp_tagid uniqueidentifier not null rowguidcol default ( newid())  
,invp_dataID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='RFID' and id=object_id(N'invp_tag'))
alter table invp_tag add 
RFID
 VARCHAR (128) null /* Метка RFID */
go
go
-- drop extra columns from generated table: invp_tag
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invp_tag')
and name not in('invp_tagID','invp_dataID','RFID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invp_tag drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invp_tag') and xtype='PK' and type='K')
ALTER TABLE invp_tag DROP CONSTRAINT pk_invp_tag
GO
alter table invp_tag add constraint pk_invp_tag primary key (invp_tagID)

GO
/* TYPE=inva (Инвентраизация) */
GO
/*Описание*/
if not exists (select * from sysobjects where id = object_id(N'inva_info') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_info/**/ (
inva_infoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='invDate' and id=object_id(N'inva_info'))
alter table inva_info add 
invDate
 DATETIME null /* Дата инвентаризации */
go
if  not exists(select * from syscolumns where name='invReason' and id=object_id(N'inva_info'))
alter table inva_info add 
invReason
 TEXT null /* Причина инвентаризации */
go
if  not exists(select * from syscolumns where name='isFinished' and id=object_id(N'inva_info'))
alter table inva_info add 
isFinished
 integer null 
 check (isFinished in ( 1/* Да */
, 0/* Нет */ )) /* Инвентаризация завершена */
go
go
-- drop extra columns from generated table: inva_info
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_info')
and name not in('inva_infoID','invDate','invReason','isFinished')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_info drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_info') and xtype='PK' and type='K')
ALTER TABLE inva_info DROP CONSTRAINT pk_inva_info
GO
alter table inva_info add constraint pk_inva_info primary key (inva_infoID)

GO
/*Наличие*/
if not exists (select * from sysobjects where id = object_id(N'inva_real') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_real/**/ (
inva_realid uniqueidentifier not null rowguidcol default ( newid())  
,inva_infoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'inva_real'))
alter table inva_real add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'inva_real'))
alter table inva_real add 
Qty
 float null /* Количество */
go
if  not exists(select * from syscolumns where name='locationid' and id=object_id(N'inva_real'))
alter table inva_real add 
locationid
 UNIQUEIDENTIFIER null /* Стеллаж */
go
if  not exists(select * from syscolumns where name='cellid' and id=object_id(N'inva_real'))
alter table inva_real add 
cellid
 UNIQUEIDENTIFIER null /* Ячейка */
go
if  not exists(select * from syscolumns where name='theStore' and id=object_id(N'inva_real'))
alter table inva_real add 
theStore
 UNIQUEIDENTIFIER null /* Склад */
go
if  not exists(select * from syscolumns where name='RFID' and id=object_id(N'inva_real'))
alter table inva_real add 
RFID
 VARCHAR (128) null /* Метка RFID */
go
go
-- drop extra columns from generated table: inva_real
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_real')
and name not in('inva_realID','inva_infoID','storepartid','Qty','locationid','cellid','theStore','RFID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_real drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_real') and xtype='PK' and type='K')
ALTER TABLE inva_real DROP CONSTRAINT pk_inva_real
GO
alter table inva_real add constraint pk_inva_real primary key (inva_realID)

GO
/*Недостача*/
if not exists (select * from sysobjects where id = object_id(N'inva_absnt') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_absnt/**/ (
inva_absntid uniqueidentifier not null rowguidcol default ( newid())  
,inva_infoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'inva_absnt'))
alter table inva_absnt add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'inva_absnt'))
alter table inva_absnt add 
Qty
 float null /* Количество */
go
go
-- drop extra columns from generated table: inva_absnt
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_absnt')
and name not in('inva_absntID','inva_infoID','storepartid','Qty')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_absnt drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_absnt') and xtype='PK' and type='K')
ALTER TABLE inva_absnt DROP CONSTRAINT pk_inva_absnt
GO
alter table inva_absnt add constraint pk_inva_absnt primary key (inva_absntID)

GO
/*Излишки*/
if not exists (select * from sysobjects where id = object_id(N'inva_extra') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table inva_extra/**/ (
inva_extraid uniqueidentifier not null rowguidcol default ( newid())  
,inva_infoID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'inva_extra'))
alter table inva_extra add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'inva_extra'))
alter table inva_extra add 
Qty
 float null /* Количество */
go
if  not exists(select * from syscolumns where name='locationid' and id=object_id(N'inva_extra'))
alter table inva_extra add 
locationid
 UNIQUEIDENTIFIER null /* Стеллаж */
go
if  not exists(select * from syscolumns where name='cellid' and id=object_id(N'inva_extra'))
alter table inva_extra add 
cellid
 UNIQUEIDENTIFIER null /* Ячейка */
go
if  not exists(select * from syscolumns where name='RFID' and id=object_id(N'inva_extra'))
alter table inva_extra add 
RFID
 VARCHAR (128) null /* Метка RFID */
go
go
-- drop extra columns from generated table: inva_extra
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('inva_extra')
and name not in('inva_extraID','inva_infoID','storepartid','Qty','locationid','cellid','RFID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table inva_extra drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_inva_extra') and xtype='PK' and type='K')
ALTER TABLE inva_extra DROP CONSTRAINT pk_inva_extra
GO
alter table inva_extra add constraint pk_inva_extra primary key (inva_extraID)

GO
/* TYPE=bpdi (Интерфейс) */
GO
/* TYPE=invm (История) */
GO
/*История*/
if not exists (select * from sysobjects where id = object_id(N'invm_info') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invm_info/**/ (
invm_infoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='fromcell' and id=object_id(N'invm_info'))
alter table invm_info add 
fromcell
 UNIQUEIDENTIFIER null /* Из ячейки */
go
if  not exists(select * from syscolumns where name='toCell' and id=object_id(N'invm_info'))
alter table invm_info add 
toCell
 UNIQUEIDENTIFIER null /* В ячейку */
go
if  not exists(select * from syscolumns where name='theDep' and id=object_id(N'invm_info'))
alter table invm_info add 
theDep
 UNIQUEIDENTIFIER null /* В отдел */
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'invm_info'))
alter table invm_info add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'invm_info'))
alter table invm_info add 
Qty
 float null /* Количество */
go
if  not exists(select * from syscolumns where name='theOP' and id=object_id(N'invm_info'))
alter table invm_info add 
theOP
 UNIQUEIDENTIFIER null /* Операция */
go
if  not exists(select * from syscolumns where name='optime' and id=object_id(N'invm_info'))
alter table invm_info add 
optime
 DATETIME null /* Время операции */
go
if  not exists(select * from syscolumns where name='theUser' and id=object_id(N'invm_info'))
alter table invm_info add 
theUser
 UNIQUEIDENTIFIER null /* Оператор */
go
go
-- drop extra columns from generated table: invm_info
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invm_info')
and name not in('invm_infoID','fromcell','toCell','theDep','storepartid','Qty','theOP','optime','theUser')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invm_info drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invm_info') and xtype='PK' and type='K')
ALTER TABLE invm_info DROP CONSTRAINT pk_invm_info
GO
alter table invm_info add constraint pk_invm_info primary key (invm_infoID)

GO
/* TYPE=bpc (Клиент) */
GO
/* TYPE=invw (Наличие) */
GO
/*Наличие*/
if not exists (select * from sysobjects where id = object_id(N'invw_info') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invw_info/**/ (
invw_infoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theStore' and id=object_id(N'invw_info'))
alter table invw_info add 
theStore
 UNIQUEIDENTIFIER null /* Склад */
go
if  not exists(select * from syscolumns where name='locationid' and id=object_id(N'invw_info'))
alter table invw_info add 
locationid
 UNIQUEIDENTIFIER null /* Стеллаж */
go
if  not exists(select * from syscolumns where name='cellid' and id=object_id(N'invw_info'))
alter table invw_info add 
cellid
 UNIQUEIDENTIFIER null /* Ячейка */
go
if  not exists(select * from syscolumns where name='storepartid' and id=object_id(N'invw_info'))
alter table invw_info add 
storepartid
 UNIQUEIDENTIFIER null /* Запчасть */
go
if  not exists(select * from syscolumns where name='Qty' and id=object_id(N'invw_info'))
alter table invw_info add 
Qty
 float null /* Количество */
go
if  not exists(select * from syscolumns where name='RFID' and id=object_id(N'invw_info'))
alter table invw_info add 
RFID
 VARCHAR (128) null /* Метка RFID */
go
go
-- drop extra columns from generated table: invw_info
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invw_info')
and name not in('invw_infoID','theStore','locationid','cellid','storepartid','Qty','RFID')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invw_info drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invw_info') and xtype='PK' and type='K')
ALTER TABLE invw_info DROP CONSTRAINT pk_invw_info
GO
alter table invw_info add constraint pk_invw_info primary key (invw_infoID)

GO
/* TYPE=bprcfg (Настройка роли) */
GO
/* TYPE=STDNumerator (Нумератор) */
GO
/* TYPE=XUser (Оператор) */
GO
/*Оператор*/
if not exists (select * from sysobjects where id = object_id(N'xUserInfo') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table xUserInfo/**/ (
xUserInfoid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='family' and id=object_id(N'xUserInfo'))
alter table xUserInfo add 
family
 VARCHAR (120) null /* Фамилия */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'xUserInfo'))
alter table xUserInfo add 
name
 VARCHAR (120) null /* Имя */
go
if  not exists(select * from syscolumns where name='partonymic' and id=object_id(N'xUserInfo'))
alter table xUserInfo add 
partonymic
 VARCHAR (120) null /* Отчество */
go
if  not exists(select * from syscolumns where name='email' and id=object_id(N'xUserInfo'))
alter table xUserInfo add 
email
 VARCHAR (60) null /* e-mail */
go
if  not exists(select * from syscolumns where name='phone' and id=object_id(N'xUserInfo'))
alter table xUserInfo add 
phone
 VARCHAR (40) null /* Телефон */
go
if  not exists(select * from syscolumns where name='login' and id=object_id(N'xUserInfo'))
alter table xUserInfo add 
login
 VARCHAR (64) null /* Имя для входа */
go
if  not exists(select * from syscolumns where name='islocked' and id=object_id(N'xUserInfo'))
alter table xUserInfo add 
islocked
 integer null 
 check (islocked in ( 1/* Да */
, 0/* Нет */ )) /* Заблокирован */
go
go
-- drop extra columns from generated table: xUserInfo
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('xUserInfo')
and name not in('xUserInfoID','family','name','partonymic','email','phone','login','islocked')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table xUserInfo drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_xUserInfo') and xtype='PK' and type='K')
ALTER TABLE xUserInfo DROP CONSTRAINT pk_xUserInfo
GO
alter table xUserInfo add constraint pk_xUserInfo primary key (xUserInfoID)

GO
/* TYPE=invops (Операции) */
GO
/*Приемка*/
if not exists (select * from sysobjects where id = object_id(N'invops_in') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invops_in/**/ (
invops_inid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='shCode' and id=object_id(N'invops_in'))
alter table invops_in add 
shCode
 VARCHAR (64) null /* Штрихкод ячейки */
go
if  not exists(select * from syscolumns where name='thePart' and id=object_id(N'invops_in'))
alter table invops_in add 
thePart
 UNIQUEIDENTIFIER null /* Деталь */
go
if  not exists(select * from syscolumns where name='rfid' and id=object_id(N'invops_in'))
alter table invops_in add 
rfid
 VARCHAR (64) null /* RFID детали */
go
if  not exists(select * from syscolumns where name='quantity' and id=object_id(N'invops_in'))
alter table invops_in add 
quantity
 integer null /* Количество */
go
go
-- drop extra columns from generated table: invops_in
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invops_in')
and name not in('invops_inID','shCode','thePart','rfid','quantity')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invops_in drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invops_in') and xtype='PK' and type='K')
ALTER TABLE invops_in DROP CONSTRAINT pk_invops_in
GO
alter table invops_in add constraint pk_invops_in primary key (invops_inID)

GO
/*Перемещение*/
if not exists (select * from sysobjects where id = object_id(N'invops_move') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invops_move/**/ (
invops_moveid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='shCodeFrom' and id=object_id(N'invops_move'))
alter table invops_move add 
shCodeFrom
 VARCHAR (64) null /* Штрихкод начальной ячейки  */
go
if  not exists(select * from syscolumns where name='shCodeTo' and id=object_id(N'invops_move'))
alter table invops_move add 
shCodeTo
 VARCHAR (64) null /* Штрихкод конечной ячейки */
go
if  not exists(select * from syscolumns where name='rfid' and id=object_id(N'invops_move'))
alter table invops_move add 
rfid
 VARCHAR (64) null /* RFID детали */
go
if  not exists(select * from syscolumns where name='quantity' and id=object_id(N'invops_move'))
alter table invops_move add 
quantity
 integer null /* Количество */
go
go
-- drop extra columns from generated table: invops_move
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invops_move')
and name not in('invops_moveID','shCodeFrom','shCodeTo','rfid','quantity')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invops_move drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invops_move') and xtype='PK' and type='K')
ALTER TABLE invops_move DROP CONSTRAINT pk_invops_move
GO
alter table invops_move add constraint pk_invops_move primary key (invops_moveID)

GO
/*Отргузка*/
if not exists (select * from sysobjects where id = object_id(N'invops_out') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invops_out/**/ (
invops_outid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='shCode' and id=object_id(N'invops_out'))
alter table invops_out add 
shCode
 VARCHAR (64) null /* Штрихкод ячейки */
go
if  not exists(select * from syscolumns where name='rfid' and id=object_id(N'invops_out'))
alter table invops_out add 
rfid
 VARCHAR (64) null /* RFID детали */
go
if  not exists(select * from syscolumns where name='quantity' and id=object_id(N'invops_out'))
alter table invops_out add 
quantity
 integer null /* Количество */
go
if  not exists(select * from syscolumns where name='theDept' and id=object_id(N'invops_out'))
alter table invops_out add 
theDept
 UNIQUEIDENTIFIER null /* Отдел */
go
go
-- drop extra columns from generated table: invops_out
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invops_out')
and name not in('invops_outID','shCode','rfid','quantity','theDept')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invops_out drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invops_out') and xtype='PK' and type='K')
ALTER TABLE invops_out DROP CONSTRAINT pk_invops_out
GO
alter table invops_out add constraint pk_invops_out primary key (invops_outID)

GO
/* TYPE=MTZwp (Описание АРМ) */
GO
/* TYPE=MTZJrnl (Описание журнала) */
GO
/* TYPE=MTZRprt (Описание отчета) */
GO
/* TYPE=MTZFltr (Описание фильтра) */
GO
/* TYPE=MTZExt (Расширения функциональности) */
GO
/* TYPE=bpdr (Роль сотрудника) */
GO
/* TYPE=bpu (Сотрудник) */
GO
/* TYPE=MTZMetaModel (Спец.: Метамодель системы) */
GO
/* TYPE=MTZSystem (Спец.: Системные данные) */
GO
/* TYPE=invd (Справочник) */
GO
/*Отдел*/
if not exists (select * from sysobjects where id = object_id(N'invd_dep') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_dep/**/ (
invd_depid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_dep'))
alter table invd_dep add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_dep
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_dep')
and name not in('invd_depID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_dep drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_dep') and xtype='PK' and type='K')
ALTER TABLE invd_dep DROP CONSTRAINT pk_invd_dep
GO
alter table invd_dep add constraint pk_invd_dep primary key (invd_depID)

GO
/*Машина*/
if not exists (select * from sysobjects where id = object_id(N'invd_machine') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_machine/**/ (
invd_machineid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_machine'))
alter table invd_machine add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_machine
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_machine')
and name not in('invd_machineID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_machine drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_machine') and xtype='PK' and type='K')
ALTER TABLE invd_machine DROP CONSTRAINT pk_invd_machine
GO
alter table invd_machine add constraint pk_invd_machine primary key (invd_machineID)

GO
/*Операции*/
if not exists (select * from sysobjects where id = object_id(N'invd_op') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_op/**/ (
invd_opid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_op'))
alter table invd_op add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_op
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_op')
and name not in('invd_opID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_op drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_op') and xtype='PK' and type='K')
ALTER TABLE invd_op DROP CONSTRAINT pk_invd_op
GO
alter table invd_op add constraint pk_invd_op primary key (invd_opID)

GO
/*Склад*/
if not exists (select * from sysobjects where id = object_id(N'invd_store') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_store/**/ (
invd_storeid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_store'))
alter table invd_store add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_store
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_store')
and name not in('invd_storeID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_store drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_store') and xtype='PK' and type='K')
ALTER TABLE invd_store DROP CONSTRAINT pk_invd_store
GO
alter table invd_store add constraint pk_invd_store primary key (invd_storeID)

GO
/*Зона склада*/
if not exists (select * from sysobjects where id = object_id(N'invd_zone') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invd_zone/**/ (
invd_zoneid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invd_zone'))
alter table invd_zone add 
name
 VARCHAR (120) null /* Название */
go
go
-- drop extra columns from generated table: invd_zone
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invd_zone')
and name not in('invd_zoneID','name')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invd_zone drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invd_zone') and xtype='PK' and type='K')
ALTER TABLE invd_zone DROP CONSTRAINT pk_invd_zone
GO
alter table invd_zone add constraint pk_invd_zone primary key (invd_zoneID)

GO
/* TYPE=MTZUsers (Справочник: пользователи) */
GO
/* TYPE=invwh (Структура склада) */
GO
/*Стеллаж*/
if not exists (select * from sysobjects where id = object_id(N'invwh_loc') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invwh_loc/**/ (
invwh_locid uniqueidentifier not null rowguidcol default ( newid())  
)
END
go
if  not exists(select * from syscolumns where name='theStore' and id=object_id(N'invwh_loc'))
alter table invwh_loc add 
theStore
 UNIQUEIDENTIFIER null /* Склад */
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invwh_loc'))
alter table invwh_loc add 
name
 VARCHAR (120) null /* Название */
go
if  not exists(select * from syscolumns where name='whZone' and id=object_id(N'invwh_loc'))
alter table invwh_loc add 
whZone
 UNIQUEIDENTIFIER null /* Зона */
go
go
-- drop extra columns from generated table: invwh_loc
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invwh_loc')
and name not in('invwh_locID','theStore','name','whZone')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invwh_loc drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invwh_loc') and xtype='PK' and type='K')
ALTER TABLE invwh_loc DROP CONSTRAINT pk_invwh_loc
GO
alter table invwh_loc add constraint pk_invwh_loc primary key (invwh_locID)

GO
/*Ячейка*/
if not exists (select * from sysobjects where id = object_id(N'invwh_cell') and OBJECTPROPERTY(id, N'IsUserTable') = 1)
BEGIN
create table invwh_cell/**/ (
invwh_cellid uniqueidentifier not null rowguidcol default ( newid())  
,invwh_locID uniqueidentifier not null
)
END
go
if  not exists(select * from syscolumns where name='name' and id=object_id(N'invwh_cell'))
alter table invwh_cell add 
name
 VARCHAR (120) null /* Название */
go
if  not exists(select * from syscolumns where name='SHCODE' and id=object_id(N'invwh_cell'))
alter table invwh_cell add 
SHCODE
 VARCHAR (64) null /* Штрихкод ячейки */
go
go
-- drop extra columns from generated table: invwh_cell
declare @n nvarchar(255)
declare @e_str nvarchar(4000)

declare nnn cursor local for
select name from syscolumns where id = object_id('invwh_cell')
and name not in('invwh_cellID','invwh_locID','name','SHCODE')
open nnn
fetch next from nnn into @n
while @@fetch_status &gt;=0
begin
  set @e_str=N'alter table invwh_cell drop column '+@n
  exec  sp_sqlexec @e_str
  fetch next from nnn into @n
End
Close nnn
deallocate nnn
go

if exists(select * from sysobjects where id=object_id(N'pk_invwh_cell') and xtype='PK' and type='K')
ALTER TABLE invwh_cell DROP CONSTRAINT pk_invwh_cell
GO
alter table invwh_cell add constraint pk_invwh_cell primary key (invwh_cellID)

GO
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--ForeignKey" BlockCode=" 
">
      <FormData Name="" />
    </BlockHolder>
    <BlockHolder BlockName="--Index" BlockCode=" 
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--FunctionsHeader" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

if exists (select * from sysobjects where id = object_id(N'invg_grp_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_grp_BRIEF_F
GO
create function invg_grp_BRIEF_F  (
 @invg_grpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invg_grp_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_grp_MREF_F
GO
create function invg_grp_MREF_F  (
 @invg_grp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invg_subgrp_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_subgrp_BRIEF_F
GO
create function invg_subgrp_BRIEF_F  (
 @invg_subgrpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invg_subgrp_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invg_subgrp_MREF_F
GO
create function invg_subgrp_MREF_F  (
 @invg_subgrp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invp_data_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invp_data_BRIEF_F
GO
create function invp_data_BRIEF_F  (
 @invp_dataid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invp_data_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invp_data_MREF_F
GO
create function invp_data_MREF_F  (
 @invp_data_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invp_tag_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invp_tag_BRIEF_F
GO
create function invp_tag_BRIEF_F  (
 @invp_tagid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invp_tag_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invp_tag_MREF_F
GO
create function invp_tag_MREF_F  (
 @invp_tag_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_info_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_info_BRIEF_F
GO
create function inva_info_BRIEF_F  (
 @inva_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_info_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_info_MREF_F
GO
create function inva_info_MREF_F  (
 @inva_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_real_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_real_BRIEF_F
GO
create function inva_real_BRIEF_F  (
 @inva_realid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_real_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_real_MREF_F
GO
create function inva_real_MREF_F  (
 @inva_real_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_absnt_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_absnt_BRIEF_F
GO
create function inva_absnt_BRIEF_F  (
 @inva_absntid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_absnt_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_absnt_MREF_F
GO
create function inva_absnt_MREF_F  (
 @inva_absnt_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_extra_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_extra_BRIEF_F
GO
create function inva_extra_BRIEF_F  (
 @inva_extraid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'inva_extra_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function inva_extra_MREF_F
GO
create function inva_extra_MREF_F  (
 @inva_extra_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invm_info_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invm_info_BRIEF_F
GO
create function invm_info_BRIEF_F  (
 @invm_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invm_info_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invm_info_MREF_F
GO
create function invm_info_MREF_F  (
 @invm_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invw_info_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invw_info_BRIEF_F
GO
create function invw_info_BRIEF_F  (
 @invw_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invw_info_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invw_info_MREF_F
GO
create function invw_info_MREF_F  (
 @invw_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'xUserInfo_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function xUserInfo_BRIEF_F
GO
create function xUserInfo_BRIEF_F  (
 @xUserInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'xUserInfo_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function xUserInfo_MREF_F
GO
create function xUserInfo_MREF_F  (
 @xUserInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invops_in_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invops_in_BRIEF_F
GO
create function invops_in_BRIEF_F  (
 @invops_inid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invops_in_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invops_in_MREF_F
GO
create function invops_in_MREF_F  (
 @invops_in_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invops_move_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invops_move_BRIEF_F
GO
create function invops_move_BRIEF_F  (
 @invops_moveid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invops_move_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invops_move_MREF_F
GO
create function invops_move_MREF_F  (
 @invops_move_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invops_out_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invops_out_BRIEF_F
GO
create function invops_out_BRIEF_F  (
 @invops_outid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invops_out_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invops_out_MREF_F
GO
create function invops_out_MREF_F  (
 @invops_out_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_dep_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_dep_BRIEF_F
GO
create function invd_dep_BRIEF_F  (
 @invd_depid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_dep_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_dep_MREF_F
GO
create function invd_dep_MREF_F  (
 @invd_dep_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_machine_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_machine_BRIEF_F
GO
create function invd_machine_BRIEF_F  (
 @invd_machineid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_machine_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_machine_MREF_F
GO
create function invd_machine_MREF_F  (
 @invd_machine_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_op_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_op_BRIEF_F
GO
create function invd_op_BRIEF_F  (
 @invd_opid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_op_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_op_MREF_F
GO
create function invd_op_MREF_F  (
 @invd_op_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_store_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_store_BRIEF_F
GO
create function invd_store_BRIEF_F  (
 @invd_storeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_store_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_store_MREF_F
GO
create function invd_store_MREF_F  (
 @invd_store_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_zone_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_zone_BRIEF_F
GO
create function invd_zone_BRIEF_F  (
 @invd_zoneid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invd_zone_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invd_zone_MREF_F
GO
create function invd_zone_MREF_F  (
 @invd_zone_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_loc_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_loc_BRIEF_F
GO
create function invwh_loc_BRIEF_F  (
 @invwh_locid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_loc_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_loc_MREF_F
GO
create function invwh_loc_MREF_F  (
 @invwh_loc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_cell_BRIEF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_cell_BRIEF_F
GO
create function invwh_cell_BRIEF_F  (
 @invwh_cellid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
  set @BRIEF='to do'
return(@BRIEF)
end 
GO

if exists (select * from sysobjects where id = object_id(N'invwh_cell_MREF_F') and xtype in (N'FN', N'IF', N'TF'))
drop function invwh_cell_MREF_F
GO
create function invwh_cell_MREF_F  (
 @invwh_cell_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
  set @MREF='to do'
return(@MREF)
end 
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Functions" File="">
    <BlockHolder BlockName="--TableProc" BlockCode=" 

alter function invg_grp_BRIEF_F  (
 @invg_grpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invg_grpid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invg_grp where invg_grpID=@invg_grpID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invg_grp  where  invg_grpID = @invg_grpID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invg_grp_MREF_F  (
 @invg_grp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invg_grp_BRIEF_F(invg_grpID, @Lang)  from invg_grp
where @invg_grp_ref like '%'+convert(varchar(38),invg_grpID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invg_subgrp_BRIEF_F  (
 @invg_subgrpid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invg_subgrpid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invg_subgrp where invg_subgrpID=@invg_subgrpID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invg_subgrp  where  invg_subgrpID = @invg_subgrpID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invg_subgrp_MREF_F  (
 @invg_subgrp_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invg_subgrp_BRIEF_F(invg_subgrpID, @Lang)  from invg_subgrp
where @invg_subgrp_ref like '%'+convert(varchar(38),invg_subgrpID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invp_data_BRIEF_F  (
 @invp_dataid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invp_dataid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invp_data where invp_dataID=@invp_dataID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invp_data  where  invp_dataID = @invp_dataID 
select @tmpID =  machineid
  from invp_data  where  invp_dataID = @invp_dataID 
 select @tmpBrief= dbo.invd_machine_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invp_data_MREF_F  (
 @invp_data_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invp_data_BRIEF_F(invp_dataID, @Lang)  from invp_data
where @invp_data_ref like '%'+convert(varchar(38),invp_dataID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invp_tag_BRIEF_F  (
 @invp_tagid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invp_tagid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invp_tag where invp_tagID=@invp_tagID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), RFID),'')) + '; '
  from invp_tag  where  invp_tagID = @invp_tagID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invp_tag_MREF_F  (
 @invp_tag_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invp_tag_BRIEF_F(invp_tagID, @Lang)  from invp_tag
where @invp_tag_ref like '%'+convert(varchar(38),invp_tagID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_info_BRIEF_F  (
 @inva_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_infoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_info where inva_infoID=@inva_infoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), invDate),'')) + '; '
  from inva_info  where  inva_infoID = @inva_infoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_info_MREF_F  (
 @inva_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_info_BRIEF_F(inva_infoID, @Lang)  from inva_info
where @inva_info_ref like '%'+convert(varchar(38),inva_infoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_real_BRIEF_F  (
 @inva_realid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_realid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_real where inva_realID=@inva_realID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from inva_real  where  inva_realID = @inva_realID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from inva_real  where  inva_realID = @inva_realID 
select @tmpID =  theStore
  from inva_real  where  inva_realID = @inva_realID 
 select @tmpBrief= dbo.invd_store_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), RFID),'')) + '; '
  from inva_real  where  inva_realID = @inva_realID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_real_MREF_F  (
 @inva_real_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_real_BRIEF_F(inva_realID, @Lang)  from inva_real
where @inva_real_ref like '%'+convert(varchar(38),inva_realID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_absnt_BRIEF_F  (
 @inva_absntid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_absntid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_absnt where inva_absntID=@inva_absntID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from inva_absnt  where  inva_absntID = @inva_absntID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from inva_absnt  where  inva_absntID = @inva_absntID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_absnt_MREF_F  (
 @inva_absnt_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_absnt_BRIEF_F(inva_absntID, @Lang)  from inva_absnt
where @inva_absnt_ref like '%'+convert(varchar(38),inva_absntID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function inva_extra_BRIEF_F  (
 @inva_extraid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @inva_extraid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from inva_extra where inva_extraID=@inva_extraID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from inva_extra  where  inva_extraID = @inva_extraID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from inva_extra  where  inva_extraID = @inva_extraID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), RFID),'')) + '; '
  from inva_extra  where  inva_extraID = @inva_extraID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function inva_extra_MREF_F  (
 @inva_extra_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.inva_extra_BRIEF_F(inva_extraID, @Lang)  from inva_extra
where @inva_extra_ref like '%'+convert(varchar(38),inva_extraID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invm_info_BRIEF_F  (
 @invm_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invm_infoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invm_info where invm_infoID=@invm_infoID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  storepartid
  from invm_info  where  invm_infoID = @invm_infoID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from invm_info  where  invm_infoID = @invm_infoID 
select @tmpID =  theOP
  from invm_info  where  invm_infoID = @invm_infoID 
 select @tmpBrief= dbo.invd_op_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invm_info_MREF_F  (
 @invm_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invm_info_BRIEF_F(invm_infoID, @Lang)  from invm_info
where @invm_info_ref like '%'+convert(varchar(38),invm_infoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invw_info_BRIEF_F  (
 @invw_infoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invw_infoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invw_info where invw_infoID=@invw_infoID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theStore
  from invw_info  where  invw_infoID = @invw_infoID 
 select @tmpBrief= dbo.invd_store_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), Qty),'')) + '; '
  from invw_info  where  invw_infoID = @invw_infoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), RFID),'')) + '; '
  from invw_info  where  invw_infoID = @invw_infoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invw_info_MREF_F  (
 @invw_info_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invw_info_BRIEF_F(invw_infoID, @Lang)  from invw_info
where @invw_info_ref like '%'+convert(varchar(38),invw_infoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function xUserInfo_BRIEF_F  (
 @xUserInfoid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @xUserInfoid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from xUserInfo where xUserInfoID=@xUserInfoID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), family),'')) + '; '
  from xUserInfo  where  xUserInfoID = @xUserInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from xUserInfo  where  xUserInfoID = @xUserInfoID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), partonymic),'')) + '; '
  from xUserInfo  where  xUserInfoID = @xUserInfoID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function xUserInfo_MREF_F  (
 @xUserInfo_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.xUserInfo_BRIEF_F(xUserInfoID, @Lang)  from xUserInfo
where @xUserInfo_ref like '%'+convert(varchar(38),xUserInfoID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invops_in_BRIEF_F  (
 @invops_inid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invops_inid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invops_in where invops_inID=@invops_inID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), shCode),'')) + '; '
  from invops_in  where  invops_inID = @invops_inID 
select @tmpID =  thePart
  from invops_in  where  invops_inID = @invops_inID 
 select @tmpBrief= dbo.invp_data_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), rfid),'')) + '; '
  from invops_in  where  invops_inID = @invops_inID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), quantity),'')) + '; '
  from invops_in  where  invops_inID = @invops_inID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invops_in_MREF_F  (
 @invops_in_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invops_in_BRIEF_F(invops_inID, @Lang)  from invops_in
where @invops_in_ref like '%'+convert(varchar(38),invops_inID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invops_move_BRIEF_F  (
 @invops_moveid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invops_moveid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invops_move where invops_moveID=@invops_moveID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), shCodeFrom),'')) + '; '
  from invops_move  where  invops_moveID = @invops_moveID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), shCodeTo),'')) + '; '
  from invops_move  where  invops_moveID = @invops_moveID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), rfid),'')) + '; '
  from invops_move  where  invops_moveID = @invops_moveID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), quantity),'')) + '; '
  from invops_move  where  invops_moveID = @invops_moveID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invops_move_MREF_F  (
 @invops_move_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invops_move_BRIEF_F(invops_moveID, @Lang)  from invops_move
where @invops_move_ref like '%'+convert(varchar(38),invops_moveID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invops_out_BRIEF_F  (
 @invops_outid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invops_outid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invops_out where invops_outID=@invops_outID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), shCode),'')) + '; '
  from invops_out  where  invops_outID = @invops_outID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), rfid),'')) + '; '
  from invops_out  where  invops_outID = @invops_outID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), quantity),'')) + '; '
  from invops_out  where  invops_outID = @invops_outID 
select @tmpID =  theDept
  from invops_out  where  invops_outID = @invops_outID 
 select @tmpBrief= dbo.invd_dep_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invops_out_MREF_F  (
 @invops_out_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invops_out_BRIEF_F(invops_outID, @Lang)  from invops_out
where @invops_out_ref like '%'+convert(varchar(38),invops_outID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_dep_BRIEF_F  (
 @invd_depid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_depid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_dep where invd_depID=@invd_depID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_dep  where  invd_depID = @invd_depID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_dep_MREF_F  (
 @invd_dep_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_dep_BRIEF_F(invd_depID, @Lang)  from invd_dep
where @invd_dep_ref like '%'+convert(varchar(38),invd_depID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_machine_BRIEF_F  (
 @invd_machineid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_machineid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_machine where invd_machineID=@invd_machineID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_machine  where  invd_machineID = @invd_machineID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_machine_MREF_F  (
 @invd_machine_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_machine_BRIEF_F(invd_machineID, @Lang)  from invd_machine
where @invd_machine_ref like '%'+convert(varchar(38),invd_machineID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_op_BRIEF_F  (
 @invd_opid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_opid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_op where invd_opID=@invd_opID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_op  where  invd_opID = @invd_opID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_op_MREF_F  (
 @invd_op_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_op_BRIEF_F(invd_opID, @Lang)  from invd_op
where @invd_op_ref like '%'+convert(varchar(38),invd_opID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_store_BRIEF_F  (
 @invd_storeid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_storeid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_store where invd_storeID=@invd_storeID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_store  where  invd_storeID = @invd_storeID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_store_MREF_F  (
 @invd_store_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_store_BRIEF_F(invd_storeID, @Lang)  from invd_store
where @invd_store_ref like '%'+convert(varchar(38),invd_storeID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invd_zone_BRIEF_F  (
 @invd_zoneid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invd_zoneid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invd_zone where invd_zoneID=@invd_zoneID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invd_zone  where  invd_zoneID = @invd_zoneID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invd_zone_MREF_F  (
 @invd_zone_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invd_zone_BRIEF_F(invd_zoneID, @Lang)  from invd_zone
where @invd_zone_ref like '%'+convert(varchar(38),invd_zoneID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invwh_loc_BRIEF_F  (
 @invwh_locid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invwh_locid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invwh_loc where invwh_locID=@invwh_locID)
 begin
 --  verify access  --
  set @BRIEF=''
select @tmpID =  theStore
  from invwh_loc  where  invwh_locID = @invwh_locID 
 select @tmpBrief= dbo.invd_store_BRIEF_F(@tmpID, @Lang)
  set @BRIEF= @BRIEF + '{' + isnull(@tmpbrief,'') + '}; '
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invwh_loc  where  invwh_locID = @invwh_locID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invwh_loc_MREF_F  (
 @invwh_loc_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invwh_loc_BRIEF_F(invwh_locID, @Lang)  from invwh_loc
where @invwh_loc_ref like '%'+convert(varchar(38),invwh_locID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO

alter function invwh_cell_BRIEF_F  (
 @invwh_cellid uniqueidentifier
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @BRIEF varchar(255)
 declare @tmpStr varchar(255)
 declare @tmpBrief varchar(2000)
 declare @tmpID uniqueidentifier
 declare @tmpMR varchar(4000) -- multiref only
 declare @MLFTemp varchar(2000)
 declare @MLFBrief varchar(2000)
if @invwh_cellid is null begin set @BRIEF='' return (@BRIEF) end
 -- Brief body -- 
if exists(select 1 from invwh_cell where invwh_cellID=@invwh_cellID)
 begin
 --  verify access  --
  set @BRIEF=''
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), name),'')) + '; '
  from invwh_cell  where  invwh_cellID = @invwh_cellID 
  select @BRIEF= @BRIEF 
  + '' + Convert(varchar(255),isnull(Convert(varchar(255), SHCODE),'')) + '; '
  from invwh_cell  where  invwh_cellID = @invwh_cellID 
end else begin
  set @BRIEF= ''
end
set @BRIEF=left(@BRIEF,255)
return(@BRIEF)
end 

GO

alter function invwh_cell_MREF_F  (
 @invwh_cell_ref varchar(4000)
 ,@Lang varchar(25)=NULL
) returns varchar(255) as  begin  
 declare @MREF varchar(255)
 declare @tmpBrief varchar(255)
declare multiref_cursor cursor for
select dbo.invwh_cell_BRIEF_F(invwh_cellID, @Lang)  from invwh_cell
where @invwh_cell_ref like '%'+convert(varchar(38),invwh_cellID)+'%'
set @MREF=''
open multiref_cursor
fetch next from multiref_cursor into @tmpBrief
while @@fetch_status&gt;=0
begin
    if @MREF&lt;&gt;''
        set @MREF=@MREF+', '
    set @MREF=@MREF+@tmpBrief
    fetch next from multiref_cursor into @tmpBrief
End

Close multiref_cursor
deallocate multiref_cursor
set @MREF=left(@MREF,255)
return(@MREF)
end 

GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
  <ModuleHolder ModuleName="--Views--" File="">
    <BlockHolder BlockName="--Views--" BlockCode=" 
if exists (select * from sysobjects where id = object_id(N'V_invg_grp') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invg_grp
GO
create view V_invg_grp as 
select   invg_grp.invg_grpId
, 
invg_grp.name 
name 
, invg_grp.invg_grpID ID 
, 'invg_grp' VIEWBASE 

 from invg_grp
GO
if exists (select * from sysobjects where id = object_id(N'V_invg_subgrp') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invg_subgrp
GO
create view V_invg_subgrp as 
select   invg_subgrp.invg_subgrpId
, invg_grpId 
, 
invg_subgrp.name 
name 
, invg_subgrp.invg_subgrpID ID 
, 'invg_subgrp' VIEWBASE 

 from invg_subgrp
GO
if exists (select * from sysobjects where id = object_id(N'V_invp_data') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invp_data
GO
create view V_invp_data as 
select   invp_data.invp_dataId
, 
invp_data.name 
name 
, 
 invp_data.groupid  
groupid 
, dbo.invg_grp_BRIEF_F(invp_data.groupid, NULL) 
groupid_name 
, 
 invp_data.subgroupid  
subgroupid 
, dbo.invg_subgrp_BRIEF_F(invp_data.subgroupid, NULL) 
subgroupid_name 
, 
 invp_data.departmentid  
departmentid 
, dbo.invd_dep_BRIEF_F(invp_data.departmentid, NULL) 
departmentid_name 
, 
 invp_data.machineid  
machineid 
, dbo.invd_machine_BRIEF_F(invp_data.machineid, NULL) 
machineid_name 
, invp_data.invp_dataID ID 
, 'invp_data' VIEWBASE 

 from invp_data
GO
if exists (select * from sysobjects where id = object_id(N'V_invp_tag') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invp_tag
GO
create view V_invp_tag as 
select   invp_tag.invp_tagId
, invp_dataId 
, 
invp_tag.RFID 
rFID 
, invp_tag.invp_tagID ID 
, 'invp_tag' VIEWBASE 

 from invp_tag
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_info') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_info
GO
create view V_inva_info as 
select   inva_info.inva_infoId
, 
inva_info.invDate 
invDate 
, 
inva_info.invReason 
invReason 
, 
 inva_info.isFinished  
isFinished 
, case inva_info.isFinished 
when 1 then 'Да'
when 0 then 'Нет'
 end 
isFinished_name 
, inva_info.inva_infoID ID 
, 'inva_info' VIEWBASE 

 from inva_info
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_real') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_real
GO
create view V_inva_real as 
select   inva_real.inva_realId
, inva_infoId 
, 
 inva_real.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(inva_real.storepartid, NULL) 
storepartid_name 
, 
inva_real.Qty 
qty 
, 
 inva_real.locationid  
locationid 
, dbo.invwh_loc_BRIEF_F(inva_real.locationid, NULL) 
locationid_name 
, 
 inva_real.cellid  
cellid 
, dbo.invwh_cell_BRIEF_F(inva_real.cellid, NULL) 
cellid_name 
, 
 inva_real.theStore  
theStore 
, dbo.invd_store_BRIEF_F(inva_real.theStore, NULL) 
theStore_name 
, 
inva_real.RFID 
rFID 
, inva_real.inva_realID ID 
, 'inva_real' VIEWBASE 

 from inva_real
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_absnt') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_absnt
GO
create view V_inva_absnt as 
select   inva_absnt.inva_absntId
, inva_infoId 
, 
 inva_absnt.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(inva_absnt.storepartid, NULL) 
storepartid_name 
, 
inva_absnt.Qty 
qty 
, inva_absnt.inva_absntID ID 
, 'inva_absnt' VIEWBASE 

 from inva_absnt
GO
if exists (select * from sysobjects where id = object_id(N'V_inva_extra') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_inva_extra
GO
create view V_inva_extra as 
select   inva_extra.inva_extraId
, inva_infoId 
, 
 inva_extra.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(inva_extra.storepartid, NULL) 
storepartid_name 
, 
inva_extra.Qty 
qty 
, 
 inva_extra.locationid  
locationid 
, dbo.invwh_loc_BRIEF_F(inva_extra.locationid, NULL) 
locationid_name 
, 
 inva_extra.cellid  
cellid 
, dbo.invwh_cell_BRIEF_F(inva_extra.cellid, NULL) 
cellid_name 
, 
inva_extra.RFID 
rFID 
, inva_extra.inva_extraID ID 
, 'inva_extra' VIEWBASE 

 from inva_extra
GO
if exists (select * from sysobjects where id = object_id(N'V_invm_info') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invm_info
GO
create view V_invm_info as 
select   invm_info.invm_infoId
, 
 invm_info.fromcell  
fromcell 
, dbo.invwh_cell_BRIEF_F(invm_info.fromcell, NULL) 
fromcell_name 
, 
 invm_info.toCell  
toCell 
, dbo.invwh_cell_BRIEF_F(invm_info.toCell, NULL) 
toCell_name 
, 
 invm_info.theDep  
theDep 
, dbo.invd_dep_BRIEF_F(invm_info.theDep, NULL) 
theDep_name 
, 
 invm_info.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(invm_info.storepartid, NULL) 
storepartid_name 
, 
invm_info.Qty 
qty 
, 
 invm_info.theOP  
theOP 
, dbo.invd_op_BRIEF_F(invm_info.theOP, NULL) 
theOP_name 
, 
invm_info.optime 
optime 
, 
 invm_info.theUser  
theUser 
, dbo.xUserInfo_BRIEF_F(invm_info.theUser, NULL) 
theUser_name 
, invm_info.invm_infoID ID 
, 'invm_info' VIEWBASE 

 from invm_info
GO
if exists (select * from sysobjects where id = object_id(N'V_invw_info') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invw_info
GO
create view V_invw_info as 
select   invw_info.invw_infoId
, 
 invw_info.theStore  
theStore 
, dbo.invd_store_BRIEF_F(invw_info.theStore, NULL) 
theStore_name 
, 
 invw_info.locationid  
locationid 
, dbo.invwh_loc_BRIEF_F(invw_info.locationid, NULL) 
locationid_name 
, 
 invw_info.cellid  
cellid 
, dbo.invwh_cell_BRIEF_F(invw_info.cellid, NULL) 
cellid_name 
, 
 invw_info.storepartid  
storepartid 
, dbo.invp_data_BRIEF_F(invw_info.storepartid, NULL) 
storepartid_name 
, 
invw_info.Qty 
qty 
, 
invw_info.RFID 
rFID 
, invw_info.invw_infoID ID 
, 'invw_info' VIEWBASE 

 from invw_info
GO
if exists (select * from sysobjects where id = object_id(N'V_xUserInfo') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_xUserInfo
GO
create view V_xUserInfo as 
select   xUserInfo.xUserInfoId
, 
xUserInfo.family 
family 
, 
xUserInfo.name 
name 
, 
xUserInfo.partonymic 
partonymic 
, 
xUserInfo.email 
email 
, 
xUserInfo.phone 
phone 
, 
xUserInfo.login 
login 
, 
 xUserInfo.islocked  
islocked 
, case xUserInfo.islocked 
when 1 then 'Да'
when 0 then 'Нет'
 end 
islocked_name 
, xUserInfo.xUserInfoID ID 
, 'xUserInfo' VIEWBASE 

 from xUserInfo
GO
if exists (select * from sysobjects where id = object_id(N'V_invops_in') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invops_in
GO
create view V_invops_in as 
select   invops_in.invops_inId
, 
invops_in.shCode 
shCode 
, 
 invops_in.thePart  
thePart 
, dbo.invp_data_BRIEF_F(invops_in.thePart, NULL) 
thePart_name 
, 
invops_in.rfid 
rfid 
, 
invops_in.quantity 
quantity 
, invops_in.invops_inID ID 
, 'invops_in' VIEWBASE 

 from invops_in
GO
if exists (select * from sysobjects where id = object_id(N'V_invops_move') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invops_move
GO
create view V_invops_move as 
select   invops_move.invops_moveId
, 
invops_move.shCodeFrom 
shCodeFrom 
, 
invops_move.shCodeTo 
shCodeTo 
, 
invops_move.rfid 
rfid 
, 
invops_move.quantity 
quantity 
, invops_move.invops_moveID ID 
, 'invops_move' VIEWBASE 

 from invops_move
GO
if exists (select * from sysobjects where id = object_id(N'V_invops_out') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invops_out
GO
create view V_invops_out as 
select   invops_out.invops_outId
, 
invops_out.shCode 
shCode 
, 
invops_out.rfid 
rfid 
, 
invops_out.quantity 
quantity 
, 
 invops_out.theDept  
theDept 
, dbo.invd_dep_BRIEF_F(invops_out.theDept, NULL) 
theDept_name 
, invops_out.invops_outID ID 
, 'invops_out' VIEWBASE 

 from invops_out
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_dep') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_dep
GO
create view V_invd_dep as 
select   invd_dep.invd_depId
, 
invd_dep.name 
name 
, invd_dep.invd_depID ID 
, 'invd_dep' VIEWBASE 

 from invd_dep
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_machine') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_machine
GO
create view V_invd_machine as 
select   invd_machine.invd_machineId
, 
invd_machine.name 
name 
, invd_machine.invd_machineID ID 
, 'invd_machine' VIEWBASE 

 from invd_machine
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_op') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_op
GO
create view V_invd_op as 
select   invd_op.invd_opId
, 
invd_op.name 
name 
, invd_op.invd_opID ID 
, 'invd_op' VIEWBASE 

 from invd_op
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_store') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_store
GO
create view V_invd_store as 
select   invd_store.invd_storeId
, 
invd_store.name 
name 
, invd_store.invd_storeID ID 
, 'invd_store' VIEWBASE 

 from invd_store
GO
if exists (select * from sysobjects where id = object_id(N'V_invd_zone') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invd_zone
GO
create view V_invd_zone as 
select   invd_zone.invd_zoneId
, 
invd_zone.name 
name 
, invd_zone.invd_zoneID ID 
, 'invd_zone' VIEWBASE 

 from invd_zone
GO
if exists (select * from sysobjects where id = object_id(N'V_invwh_loc') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invwh_loc
GO
create view V_invwh_loc as 
select   invwh_loc.invwh_locId
, 
 invwh_loc.theStore  
theStore 
, dbo.invd_store_BRIEF_F(invwh_loc.theStore, NULL) 
theStore_name 
, 
invwh_loc.name 
name 
, 
 invwh_loc.whZone  
whZone 
, dbo.invd_zone_BRIEF_F(invwh_loc.whZone, NULL) 
whZone_name 
, invwh_loc.invwh_locID ID 
, 'invwh_loc' VIEWBASE 

 from invwh_loc
GO
if exists (select * from sysobjects where id = object_id(N'V_invwh_cell') and OBJECTPROPERTY(id, N'IsView') = 1)
drop view V_invwh_cell
GO
create view V_invwh_cell as 
select   invwh_cell.invwh_cellId
, invwh_locId 
, 
invwh_cell.name 
name 
, 
invwh_cell.SHCODE 
sHCODE 
, invwh_cell.invwh_cellID ID 
, 'invwh_cell' VIEWBASE 

 from invwh_cell
GO
">
      <FormData Name="" />
    </BlockHolder>
  </ModuleHolder>
</root>